{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,MAAM,6BAAO,CAAC;AACd,MAAM,gCAAU,SAAS,GAAG;IAC1B,MAAM,OAAO,OAAO,KAAK;IACzB,KAAK,MAAM,OAAO,KAChB,0BAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI;AAExB;AACA,MAAM,oCAAc,SAAS,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO;IAC7D,MAAM,MAAM,KAAK,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC;IACzC,MAAM,OAAO,OAAO,KAAK;IACzB,KAAK,QAAQ,SAAS,EAAE;QACtB,MAAM,SAAS,IAAI,CAAC,GAAG;QACvB,IAAI,WAAW;QACf,IAAI,OAAO,QAAQ,SAAS,GAC1B,WAAW,OAAO,QAAQ,KAAK;QAEjC,WAAW,WAAW;QACtB,MAAM,SAAS,CAAA,GAAA,QAAiB,EAAE,OAAO;QACzC,IAAI,aAAa,OAAO,SAAS,KAAK,IAAI,OAAO,OAAO,OAAO;QAC/D,IAAI;QACJ,CAAA,GAAA,QAAE,EAAE,KAAK,UAAU,QAAQ,OAAO;QAClC,IAAI,OAAO,cAAc,YACvB,CAAA,GAAA,QAAE,EAAE,KAAK,UAAU,QAAQ,OAAO;aAElC,IAAI,CAAA,GAAA,QAAO,EAAE,CAAA,GAAA,QAAQ,IAAI,UAAU,aAAa;YAC9C,MAAM,OAAO;gBACX,OAAO,WAAW,QAChB,wBACA,CAAC,IAAM,CAAC,UAAU,EAAE,EAAE,QAAQ,KAAK,KAAK,MAAM,CAAC;YAEnD;YACA,aAAa,CAAA,GAAA,mBAAW,EAAE,KAAK,MAAM;YACrC,WAAW,WAAW,YAAY;QACpC,OAAO;YACL,MAAM,WAAW,IAAI,gBAAgB,8BAA8B;YACnE,SAAS,aAAa,SAAS,OAAO,WAAW,QAAQ,UAAU;YACnE,MAAM,OAAO,WAAW,MAAM,CAAA,GAAA,QAAK,EAAE;YACrC,KAAK,MAAM,OAAO,KAAM;gBACtB,MAAM,QAAQ,IAAI,gBAAgB,8BAA8B;gBAChE,MAAM,eAAe,wCAAwC,aAAa;gBAC1E,MAAM,aAAa,MAAM;gBACzB,MAAM,aAAa,KAAK;gBACxB,MAAM,cAAc;gBACpB,SAAS,YAAY;YACvB;YACA,aAAa;QACf;QAEF,IAAI,UAAU;QACd,IAAI,SAAS;QACb,OAAQ,OAAO;YACb,KAAK;gBACH,UAAU;gBACV,SAAS;gBACT;YACF,KAAK;gBACH,SAAS;gBACT;YACF,KAAK;gBACH,SAAS;gBACT;YACF,KAAK;gBACH,SAAS;gBACT;YACF,KAAK;gBACH,SAAS;gBACT;YACF,KAAK;gBACH,SAAS;gBACT;YACF,KAAK;gBACH,SAAS;gBACT;YACF,KAAK;gBACH,SAAS;gBACT;YACF,KAAK;gBACH,SAAS;gBACT;YACF,KAAK;gBACH,SAAS;gBACT;YACF,KAAK;gBACH,SAAS;gBACT;YACF,KAAK;gBACH,SAAS;gBACT;YACF,KAAK;gBACH,SAAS;gBACT;YACF,KAAK;gBACH,SAAS;gBACT;YACF,KAAK;gBACH,SAAS;gBACT;YACF,KAAK;gBACH,SAAS;gBACT;YACF,KAAK;gBACH,SAAS;gBACT;YACF;gBACE,SAAS;QACb;QACA,EAAE,QAAQ,OAAO,IAAI;YACnB,YAAY,OAAO;YACnB,OAAO;YACP,WAAW;YACX,WAAW,OAAO;YAClB,IAAI;YACJ,IAAI;YACJ,OAAO;YACP,OAAO,OAAO;YACd,IAAI,OAAO;YACX,MAAM,OAAO;YACb,YAAY,OAAO;YACnB,SAAS,QAAQ,GAAG,WAAW,OAAO,OAAO;YAC7C,OAAO,QAAQ,GAAG,YAAY,OAAO;YACrC,cAAc,OAAO;YACrB,OAAO,OAAO,SAAS,UAAU,MAAM,KAAK;YAC5C,KAAK,OAAO;YACZ,MAAM,OAAO;YACb,OAAO,OAAO;YACd,SAAS,CAAA,GAAA,QAAQ,IAAI,UAAU;QACjC;QACA,CAAA,GAAA,QAAE,EAAE,KAAK,WAAW;YAClB,YAAY,OAAO;YACnB,WAAW,OAAO;YAClB,OAAO;YACP,WAAW;YACX,IAAI;YACJ,IAAI;YACJ,OAAO;YACP,OAAO,OAAO;YACd,IAAI,OAAO;YACX,OAAO,QAAQ,GAAG,YAAY,OAAO;YACrC,OAAO,OAAO,SAAS,UAAU,MAAM,KAAK;YAC5C,MAAM,OAAO;YACb,KAAK,OAAO;YACZ,OAAO,OAAO;YACd,SAAS,CAAA,GAAA,QAAQ,IAAI,UAAU;QACjC;IACF;AACF;AACA,MAAM,iCAAW,SAAS,KAAK,EAAE,CAAC,EAAE,OAAO;IACzC,CAAA,GAAA,QAAE,EAAE,KAAK,kBAAkB;IAC3B,IAAI,MAAM;IACV,IAAI,YAAY,CAAC;IACjB,IAAI;IACJ,IAAI;IACJ,IAAI,MAAM,iBAAiB,KAAK,GAAG;QACjC,MAAM,gBAAgB,CAAA,GAAA,QAAiB,EAAE,MAAM;QAC/C,eAAe,cAAc;QAC7B,oBAAoB,cAAc;IACpC;IACA,MAAM,QAAQ,SAAS,IAAI;QACzB;QACA,MAAM,aAAa,OAAO,KAAK,QAAQ,MAAM,KAAK;QAClD,IAAI,SAAS,CAAC,WAAW,KAAK,KAAK,GAAG;YACpC,SAAS,CAAC,WAAW,GAAG;YACxB,CAAA,GAAA,QAAE,EAAE,KAAK,mBAAmB,YAAY,SAAS,CAAC,WAAW;QAC/D,OAAO;YACL,SAAS,CAAC,WAAW;YACrB,CAAA,GAAA,QAAE,EAAE,KAAK,mBAAmB,YAAY,SAAS,CAAC,WAAW;QAC/D;QACA,IAAI,SAAS,aAAa,MAAM,SAAS,CAAC,WAAW;QACrD,CAAA,GAAA,QAAE,EAAE,KAAK,mCAAmC,YAAY,QAAQ,SAAS,CAAC,WAAW;QACrF,MAAM,gBAAgB,QAAQ,KAAK;QACnC,MAAM,cAAc,QAAQ,KAAK;QACjC,MAAM,WAAW;YAAE,OAAO;YAAI,YAAY;QAAG;QAC7C,SAAS,SAAS,KAAK,UAAU;QACjC,IAAI,KAAK,SAAS,cAChB,SAAS,YAAY;aAErB,SAAS,YAAY;QAEvB,SAAS,iBAAiB;QAC1B,SAAS,eAAe;QACxB,OAAQ,KAAK;YACX,KAAK;gBACH,SAAS,iBAAiB;YAC5B,KAAK;gBACH,SAAS,eAAe;gBACxB;YACF,KAAK;gBACH,SAAS,iBAAiB;YAC5B,KAAK;gBACH,SAAS,eAAe;gBACxB;YACF,KAAK;gBACH,SAAS,iBAAiB;YAC5B,KAAK;gBACH,SAAS,eAAe;gBACxB;QACJ;QACA,IAAI,QAAQ;QACZ,IAAI,aAAa;QACjB,OAAQ,KAAK;YACX,KAAK;gBACH,QAAQ;gBACR,IAAI,iBAAiB,KAAK,GACxB,QAAQ;gBAEV,IAAI,sBAAsB,KAAK,GAC7B,aAAa;gBAEf,SAAS,YAAY;gBACrB,SAAS,UAAU;gBACnB;YACF,KAAK;gBACH,SAAS,YAAY;gBACrB,SAAS,UAAU;gBACnB,SAAS,QAAQ;gBACjB;YACF,KAAK;gBACH,SAAS,YAAY;gBACrB,SAAS,UAAU;gBACnB,SAAS,QAAQ;gBACjB;YACF,KAAK;gBACH,SAAS,YAAY;gBACrB,SAAS,UAAU;gBACnB,SAAS,QAAQ;gBACjB;QACJ;QACA,IAAI,KAAK,UAAU,KAAK,GAAG;YACzB,MAAM,SAAS,CAAA,GAAA,QAAiB,EAAE,KAAK;YACvC,QAAQ,OAAO;YACf,aAAa,OAAO;QACtB;QACA,SAAS,QAAQ,SAAS,SAAS;QACnC,SAAS,aAAa,SAAS,cAAc;QAC7C,IAAI,KAAK,gBAAgB,KAAK,GAC5B,SAAS,QAAQ,CAAA,GAAA,QAAiB,EAAE,KAAK,aAAa,CAAA,GAAA,kBAAU;aAC3D,IAAI,MAAM,uBAAuB,KAAK,GAC3C,SAAS,QAAQ,CAAA,GAAA,QAAiB,EAAE,MAAM,oBAAoB,CAAA,GAAA,kBAAU;aAExE,SAAS,QAAQ,CAAA,GAAA,QAAiB,EAAE,2BAAK,OAAO,CAAA,GAAA,kBAAU;QAE5D,IAAI,KAAK,SAAS,KAAK,GACrB;YAAA,IAAI,KAAK,UAAU,KAAK,GACtB,SAAS,iBAAiB;QAC5B,OACK;YACL,SAAS,iBAAiB;YAC1B,SAAS,WAAW;QACtB;QACA,SAAS,YAAY,KAAK;QAC1B,SAAS,QAAQ,KAAK,KAAK,QAAQ,CAAA,GAAA,QAAK,EAAE,gBAAgB;QAC1D,IAAI,KAAK,UAAU,KAAK,GACtB,SAAS,QAAQ,SAAS,SAAS;QAErC,SAAS,aAAa,SAAS,WAAW,QAAQ,UAAU;QAC5D,SAAS,KAAK;QACd,SAAS,UAAU,oBAAoB,gBAAgB,MAAM;QAC7D,EAAE,QAAQ,KAAK,OAAO,KAAK,KAAK,UAAU;IAC5C;AACF;AACA,MAAM,mCAAa,SAAS,IAAI,EAAE,OAAO;IACvC,CAAA,GAAA,QAAE,EAAE,KAAK;IACT,QAAQ,GAAG;IACX,IAAI;QACF,QAAQ,MAAM;QACd,OAAO,QAAQ,GAAG;IACpB,EAAE,OAAO,GAAG;QACV;IACF;AACF;AACA,MAAM,6BAAO,eAAe,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,OAAO;IACrD,CAAA,GAAA,QAAE,EAAE,KAAK;IACT,QAAQ,GAAG;IACX,CAAA,GAAA,QAAK,EAAE,OAAO;IACd,QAAQ,OAAO,MAAM;IACrB,IAAI,MAAM,QAAQ,GAAG;IACrB,IAAI,QAAQ,KAAK,GACf,MAAM;IAER,MAAM,iBAAE,cAAa,EAAE,WAAW,MAAK,EAAE,GAAG,CAAA,GAAA,QAAQ;IACpD,MAAM,cAAc,MAAM,eAAe;IACzC,MAAM,cAAc,MAAM,eAAe;IACzC,IAAI;IACJ,IAAI,kBAAkB,WACpB,iBAAiB,CAAA,GAAA,aAAK,EAAE,OAAO;IAEjC,MAAM,OAAO,kBAAkB,YAAY,CAAA,GAAA,aAAK,EAAE,eAAe,OAAO,CAAC,EAAE,CAAC,gBAAgB,QAAQ,CAAA,GAAA,aAAK,EAAE;IAC3G,MAAM,MAAM,kBAAkB,YAAY,eAAe,OAAO,CAAC,EAAE,CAAC,kBAAkB;IACtF,MAAM,IAAI,IAAI,aAAe;QAC3B,YAAY;QACZ,UAAU;IACZ,GAAG,SAAS;QACV,SAAS;QACT,SAAS;QACT,SAAS;QACT,SAAS;QACT,SAAS;IACX,GAAG,oBAAoB;QACrB,OAAO,CAAC;IACV;IACA,IAAI;IACJ,MAAM,YAAY,QAAQ,GAAG;IAC7B,CAAA,GAAA,QAAE,EAAE,KAAK,gBAAgB;IACzB,IAAK,IAAI,KAAK,UAAU,SAAS,GAAG,MAAM,GAAG,KAAM;QACjD,OAAO,SAAS,CAAC,GAAG;QACpB,CAAA,GAAA,QAAE,EAAE,KAAK,eAAe;QACxB,QAAQ,GAAG,UACT,KAAK,IACL;YAAE,MAAM,KAAK;YAAO,MAAM,KAAK;QAAU,GACzC,SACA,KAAK,GACL,KAAK,SACL,KAAK;IAET;IACA,MAAM,OAAO,QAAQ,GAAG;IACxB,MAAM,QAAQ,QAAQ,GAAG;IACzB,CAAA,GAAA,QAAE,EAAE,KAAK,SAAS;IAClB,IAAI,IAAI;IACR,IAAK,IAAI,UAAU,SAAS,GAAG,KAAK,GAAG,IAAK;QAC1C,OAAO,SAAS,CAAC,EAAE;QACnB,CAAA,GAAA,gBAAQ,EAAE,WAAW,OAAO;QAC5B,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,IAAK;YAC1C,CAAA,GAAA,QAAE,EAAE,KAAK,wBAAwB,KAAK,KAAK,CAAC,EAAE,EAAE,KAAK;YACrD,EAAE,UAAU,KAAK,KAAK,CAAC,EAAE,EAAE,KAAK;QAClC;IACF;IACA,kCAAY,MAAM,GAAG,IAAI,MAAM,KAAK;IACpC,+BAAS,OAAO;IAChB,MAAM,MAAM,KAAK,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC;IACtC,MAAM,UAAU,KAAK,OAAO,MAAM,KAAK;IACvC,MAAM,CAAA,GAAA,QAAK,EAAE,SAAS,GAAG;QAAC;QAAS;QAAU;KAAQ,EAAE,aAAa;IACpE,CAAA,GAAA,QAAI,EAAE,YAAY,KAAK,sBAAsB,MAAM,gBAAgB,QAAQ,GAAG;IAC9E,CAAA,GAAA,QAAgB,EAAE,GAAG,KAAK,MAAM,gBAAgB,MAAM;IACtD,QAAQ,GAAG,WAAW,aAAa;IACnC,IAAI,CAAC,MAAM,YAAY;QACrB,MAAM,SAAS,IAAI,iBAAiB,UAAU,KAAK;QACnD,KAAK,MAAM,SAAS,OAAQ;YAC1B,MAAM,MAAM,MAAM;YAClB,MAAM,OAAO,IAAI,gBAAgB,8BAA8B;YAC/D,KAAK,aAAa,MAAM;YACxB,KAAK,aAAa,MAAM;YACxB,KAAK,aAAa,SAAS,IAAI;YAC/B,KAAK,aAAa,UAAU,IAAI;YAChC,MAAM,aAAa,MAAM,MAAM;QACjC;IACF;IACA,MAAM,OAAO,OAAO,KAAK;IACzB,KAAK,QAAQ,SAAS,GAAG;QACvB,MAAM,SAAS,IAAI,CAAC,IAAI;QACxB,IAAI,OAAO,MAAM;YACf,MAAM,OAAO,CAAA,GAAA,aAAK,EAAE,MAAM,KAAK,WAAW,MAAM;YAChD,IAAI,MAAM;gBACR,MAAM,OAAO,IAAI,gBAAgB,8BAA8B;gBAC/D,KAAK,eAAe,8BAA8B,SAAS,OAAO,QAAQ,KAAK;gBAC/E,KAAK,eAAe,8BAA8B,QAAQ,OAAO;gBACjE,KAAK,eAAe,8BAA8B,OAAO;gBACzD,IAAI,kBAAkB,WACpB,KAAK,eAAe,8BAA8B,UAAU;qBACvD,IAAI,OAAO,YAChB,KAAK,eAAe,8BAA8B,UAAU,OAAO;gBAErE,MAAM,WAAW,KAAK,OAAO;oBAC3B,OAAO;gBACT,GAAG;gBACH,MAAM,QAAQ,KAAK,OAAO;gBAC1B,IAAI,OACF,SAAS,OAAO;oBACd,OAAO,MAAM;gBACf;gBAEF,MAAM,QAAQ,KAAK,OAAO;gBAC1B,IAAI,OACF,SAAS,OAAO;oBACd,OAAO,MAAM;gBACf;YAEJ;QACF;IACF;AACF;AACA,MAAM,4CAAiB;aACrB;iBACA;cACA;gBACA;UACA;AACF;AACA,MAAM,6BAAO,CAAC,OAAO;IACnB,MAAM,UAAU;IAChB,MAAM,IAAI,QAAQ,OAAO;IACzB,MAAM,IAAI,QAAQ,OAAO;IACzB,MAAM,IAAI,QAAQ,OAAO;IACzB,OAAO,eAAY,GAAG,GAAG,GAAG;AAC9B;AACA,MAAM,kCAAY,CAAC,UAAY,CAAC;iBACf,EAAE,QAAQ,WAAW;WAC3B,EAAE,QAAQ,iBAAiB,QAAQ,UAAU;;;UAG9C,EAAE,QAAQ,WAAW;;;WAGpB,EAAE,QAAQ,WAAW;;;;UAItB,EAAE,QAAQ,iBAAiB,QAAQ,UAAU;WAC5C,EAAE,QAAQ,iBAAiB,QAAQ,UAAU;;;;;;;;UAQ9C,EAAE,QAAQ,QAAQ;YAChB,EAAE,QAAQ,WAAW;;;;;;;;;;;;;;;;;;;;;UAqBvB,EAAE,QAAQ,eAAe;;;;YAIvB,EAAE,QAAQ,UAAU;;;;;YAKpB,EAAE,QAAQ,UAAU;;;;;sBAKV,EAAE,QAAQ,oBAAoB;;;wBAG5B,EAAE,QAAQ,oBAAoB;YAC1C,EAAE,QAAQ,oBAAoB;;;;;;;sBAOpB,EAAE,2BAAK,QAAQ,qBAAqB,KAAK;;;;;UAKrD,EAAE,QAAQ,WAAW;YACnB,EAAE,QAAQ,cAAc;;;;;UAK1B,EAAE,QAAQ,WAAW;;;;WAIpB,EAAE,QAAQ,WAAW;;;WAGrB,EAAE,QAAQ,WAAW;;;;;;;;iBAQf,EAAE,QAAQ,WAAW;;gBAEtB,EAAE,QAAQ,cAAc;sBAClB,EAAE,QAAQ,QAAQ;;;;;;;;;UAS9B,EAAE,QAAQ,UAAU;;AAE9B,CAAC;AACD,MAAM,4CAAa;;;;;;;AC/fnB,UAAU;;;AAGV,QAAQ,GACR,MAAM,gCAAU,CAAC,OAAO;IACpB,OAAO,CAAA,GAAA,cAAA,EAAE,KAAK,MAAM,CAAA,GAAA,cAAI,EAAE,MAAM,MAAM,CAAC,QAAQ;AACnD;IACA,UAAU,GACV,2CAAe","sources":["node_modules/mermaid/dist/styles-5f89df53.js","node_modules/khroma/dist/methods/channel.js"],"sourcesContent":["import * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { curveLinear, select, selectAll } from \"d3\";\nimport { f as flowDb } from \"./flowDb-6a57c1b4.js\";\nimport { k as getStylesFromArray, l as log, n as evaluate, c as getConfig, e as common, o as interpolateToCurve, u as utils, p as setupGraphViewbox } from \"./mermaid-b0ad2de1.js\";\nimport { r as render } from \"./index-a92ac404.js\";\nimport { addHtmlLabel } from \"dagre-d3-es/src/dagre-js/label/add-html-label.js\";\nimport * as khroma from \"khroma\";\nconst conf = {};\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    conf[key] = cnf[key];\n  }\n};\nconst addVertices = function(vert, g, svgId, root, doc, diagObj) {\n  const svg = root.select(`[id=\"${svgId}\"]`);\n  const keys = Object.keys(vert);\n  keys.forEach(function(id) {\n    const vertex = vert[id];\n    let classStr = \"default\";\n    if (vertex.classes.length > 0) {\n      classStr = vertex.classes.join(\" \");\n    }\n    classStr = classStr + \" flowchart-label\";\n    const styles = getStylesFromArray(vertex.styles);\n    let vertexText = vertex.text !== void 0 ? vertex.text : vertex.id;\n    let vertexNode;\n    log.info(\"vertex\", vertex, vertex.labelType);\n    if (vertex.labelType === \"markdown\") {\n      log.info(\"vertex\", vertex, vertex.labelType);\n    } else {\n      if (evaluate(getConfig().flowchart.htmlLabels)) {\n        const node = {\n          label: vertexText.replace(\n            /fa[blrs]?:fa-[\\w-]+/g,\n            (s) => `<i class='${s.replace(\":\", \" \")}'></i>`\n          )\n        };\n        vertexNode = addHtmlLabel(svg, node).node();\n        vertexNode.parentNode.removeChild(vertexNode);\n      } else {\n        const svgLabel = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        svgLabel.setAttribute(\"style\", styles.labelStyle.replace(\"color:\", \"fill:\"));\n        const rows = vertexText.split(common.lineBreakRegex);\n        for (const row of rows) {\n          const tspan = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\n          tspan.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\");\n          tspan.setAttribute(\"dy\", \"1em\");\n          tspan.setAttribute(\"x\", \"1\");\n          tspan.textContent = row;\n          svgLabel.appendChild(tspan);\n        }\n        vertexNode = svgLabel;\n      }\n    }\n    let radious = 0;\n    let _shape = \"\";\n    switch (vertex.type) {\n      case \"round\":\n        radious = 5;\n        _shape = \"rect\";\n        break;\n      case \"square\":\n        _shape = \"rect\";\n        break;\n      case \"diamond\":\n        _shape = \"question\";\n        break;\n      case \"hexagon\":\n        _shape = \"hexagon\";\n        break;\n      case \"odd\":\n        _shape = \"rect_left_inv_arrow\";\n        break;\n      case \"lean_right\":\n        _shape = \"lean_right\";\n        break;\n      case \"lean_left\":\n        _shape = \"lean_left\";\n        break;\n      case \"trapezoid\":\n        _shape = \"trapezoid\";\n        break;\n      case \"inv_trapezoid\":\n        _shape = \"inv_trapezoid\";\n        break;\n      case \"odd_right\":\n        _shape = \"rect_left_inv_arrow\";\n        break;\n      case \"circle\":\n        _shape = \"circle\";\n        break;\n      case \"ellipse\":\n        _shape = \"ellipse\";\n        break;\n      case \"stadium\":\n        _shape = \"stadium\";\n        break;\n      case \"subroutine\":\n        _shape = \"subroutine\";\n        break;\n      case \"cylinder\":\n        _shape = \"cylinder\";\n        break;\n      case \"group\":\n        _shape = \"rect\";\n        break;\n      case \"doublecircle\":\n        _shape = \"doublecircle\";\n        break;\n      default:\n        _shape = \"rect\";\n    }\n    g.setNode(vertex.id, {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText: vertexText,\n      labelType: vertex.labelType,\n      rx: radious,\n      ry: radious,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      link: vertex.link,\n      linkTarget: vertex.linkTarget,\n      tooltip: diagObj.db.getTooltip(vertex.id) || \"\",\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      haveCallback: vertex.haveCallback,\n      width: vertex.type === \"group\" ? 500 : void 0,\n      dir: vertex.dir,\n      type: vertex.type,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding\n    });\n    log.info(\"setNode\", {\n      labelStyle: styles.labelStyle,\n      labelType: vertex.labelType,\n      shape: _shape,\n      labelText: vertexText,\n      rx: radious,\n      ry: radious,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      width: vertex.type === \"group\" ? 500 : void 0,\n      type: vertex.type,\n      dir: vertex.dir,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding\n    });\n  });\n};\nconst addEdges = function(edges, g, diagObj) {\n  log.info(\"abc78 edges = \", edges);\n  let cnt = 0;\n  let linkIdCnt = {};\n  let defaultStyle;\n  let defaultLabelStyle;\n  if (edges.defaultStyle !== void 0) {\n    const defaultStyles = getStylesFromArray(edges.defaultStyle);\n    defaultStyle = defaultStyles.style;\n    defaultLabelStyle = defaultStyles.labelStyle;\n  }\n  edges.forEach(function(edge) {\n    cnt++;\n    const linkIdBase = \"L-\" + edge.start + \"-\" + edge.end;\n    if (linkIdCnt[linkIdBase] === void 0) {\n      linkIdCnt[linkIdBase] = 0;\n      log.info(\"abc78 new entry\", linkIdBase, linkIdCnt[linkIdBase]);\n    } else {\n      linkIdCnt[linkIdBase]++;\n      log.info(\"abc78 new entry\", linkIdBase, linkIdCnt[linkIdBase]);\n    }\n    let linkId = linkIdBase + \"-\" + linkIdCnt[linkIdBase];\n    log.info(\"abc78 new link id to be used is\", linkIdBase, linkId, linkIdCnt[linkIdBase]);\n    const linkNameStart = \"LS-\" + edge.start;\n    const linkNameEnd = \"LE-\" + edge.end;\n    const edgeData = { style: \"\", labelStyle: \"\" };\n    edgeData.minlen = edge.length || 1;\n    if (edge.type === \"arrow_open\") {\n      edgeData.arrowhead = \"none\";\n    } else {\n      edgeData.arrowhead = \"normal\";\n    }\n    edgeData.arrowTypeStart = \"arrow_open\";\n    edgeData.arrowTypeEnd = \"arrow_open\";\n    switch (edge.type) {\n      case \"double_arrow_cross\":\n        edgeData.arrowTypeStart = \"arrow_cross\";\n      case \"arrow_cross\":\n        edgeData.arrowTypeEnd = \"arrow_cross\";\n        break;\n      case \"double_arrow_point\":\n        edgeData.arrowTypeStart = \"arrow_point\";\n      case \"arrow_point\":\n        edgeData.arrowTypeEnd = \"arrow_point\";\n        break;\n      case \"double_arrow_circle\":\n        edgeData.arrowTypeStart = \"arrow_circle\";\n      case \"arrow_circle\":\n        edgeData.arrowTypeEnd = \"arrow_circle\";\n        break;\n    }\n    let style = \"\";\n    let labelStyle = \"\";\n    switch (edge.stroke) {\n      case \"normal\":\n        style = \"fill:none;\";\n        if (defaultStyle !== void 0) {\n          style = defaultStyle;\n        }\n        if (defaultLabelStyle !== void 0) {\n          labelStyle = defaultLabelStyle;\n        }\n        edgeData.thickness = \"normal\";\n        edgeData.pattern = \"solid\";\n        break;\n      case \"dotted\":\n        edgeData.thickness = \"normal\";\n        edgeData.pattern = \"dotted\";\n        edgeData.style = \"fill:none;stroke-width:2px;stroke-dasharray:3;\";\n        break;\n      case \"thick\":\n        edgeData.thickness = \"thick\";\n        edgeData.pattern = \"solid\";\n        edgeData.style = \"stroke-width: 3.5px;fill:none;\";\n        break;\n      case \"invisible\":\n        edgeData.thickness = \"invisible\";\n        edgeData.pattern = \"solid\";\n        edgeData.style = \"stroke-width: 0;fill:none;\";\n        break;\n    }\n    if (edge.style !== void 0) {\n      const styles = getStylesFromArray(edge.style);\n      style = styles.style;\n      labelStyle = styles.labelStyle;\n    }\n    edgeData.style = edgeData.style += style;\n    edgeData.labelStyle = edgeData.labelStyle += labelStyle;\n    if (edge.interpolate !== void 0) {\n      edgeData.curve = interpolateToCurve(edge.interpolate, curveLinear);\n    } else if (edges.defaultInterpolate !== void 0) {\n      edgeData.curve = interpolateToCurve(edges.defaultInterpolate, curveLinear);\n    } else {\n      edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n    }\n    if (edge.text === void 0) {\n      if (edge.style !== void 0) {\n        edgeData.arrowheadStyle = \"fill: #333\";\n      }\n    } else {\n      edgeData.arrowheadStyle = \"fill: #333\";\n      edgeData.labelpos = \"c\";\n    }\n    edgeData.labelType = edge.labelType;\n    edgeData.label = edge.text.replace(common.lineBreakRegex, \"\\n\");\n    if (edge.style === void 0) {\n      edgeData.style = edgeData.style || \"stroke: #333; stroke-width: 1.5px;fill:none;\";\n    }\n    edgeData.labelStyle = edgeData.labelStyle.replace(\"color:\", \"fill:\");\n    edgeData.id = linkId;\n    edgeData.classes = \"flowchart-link \" + linkNameStart + \" \" + linkNameEnd;\n    g.setEdge(edge.start, edge.end, edgeData, cnt);\n  });\n};\nconst getClasses = function(text, diagObj) {\n  log.info(\"Extracting classes\");\n  diagObj.db.clear();\n  try {\n    diagObj.parse(text);\n    return diagObj.db.getClasses();\n  } catch (e) {\n    return;\n  }\n};\nconst draw = async function(text, id, _version, diagObj) {\n  log.info(\"Drawing flowchart\");\n  diagObj.db.clear();\n  flowDb.setGen(\"gen-2\");\n  diagObj.parser.parse(text);\n  let dir = diagObj.db.getDirection();\n  if (dir === void 0) {\n    dir = \"TD\";\n  }\n  const { securityLevel, flowchart: conf2 } = getConfig();\n  const nodeSpacing = conf2.nodeSpacing || 50;\n  const rankSpacing = conf2.rankSpacing || 50;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: dir,\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 0,\n    marginy: 0\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  let subG;\n  const subGraphs = diagObj.db.getSubGraphs();\n  log.info(\"Subgraphs - \", subGraphs);\n  for (let i2 = subGraphs.length - 1; i2 >= 0; i2--) {\n    subG = subGraphs[i2];\n    log.info(\"Subgraph - \", subG);\n    diagObj.db.addVertex(\n      subG.id,\n      { text: subG.title, type: subG.labelType },\n      \"group\",\n      void 0,\n      subG.classes,\n      subG.dir\n    );\n  }\n  const vert = diagObj.db.getVertices();\n  const edges = diagObj.db.getEdges();\n  log.info(\"Edges\", edges);\n  let i = 0;\n  for (i = subGraphs.length - 1; i >= 0; i--) {\n    subG = subGraphs[i];\n    selectAll(\"cluster\").append(\"text\");\n    for (let j = 0; j < subG.nodes.length; j++) {\n      log.info(\"Setting up subgraphs\", subG.nodes[j], subG.id);\n      g.setParent(subG.nodes[j], subG.id);\n    }\n  }\n  addVertices(vert, g, id, root, doc, diagObj);\n  addEdges(edges, g);\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(element, g, [\"point\", \"circle\", \"cross\"], \"flowchart\", id);\n  utils.insertTitle(svg, \"flowchartTitleText\", conf2.titleTopMargin, diagObj.db.getDiagramTitle());\n  setupGraphViewbox(g, svg, conf2.diagramPadding, conf2.useMaxWidth);\n  diagObj.db.indexNodes(\"subGraph\" + i);\n  if (!conf2.htmlLabels) {\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      const dim = label.getBBox();\n      const rect = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n      rect.setAttribute(\"rx\", 0);\n      rect.setAttribute(\"ry\", 0);\n      rect.setAttribute(\"width\", dim.width);\n      rect.setAttribute(\"height\", dim.height);\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n  const keys = Object.keys(vert);\n  keys.forEach(function(key) {\n    const vertex = vert[key];\n    if (vertex.link) {\n      const node = select(\"#\" + id + ' [id=\"' + key + '\"]');\n      if (node) {\n        const link = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"a\");\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"class\", vertex.classes.join(\" \"));\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"href\", vertex.link);\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"rel\", \"noopener\");\n        if (securityLevel === \"sandbox\") {\n          link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"target\", \"_top\");\n        } else if (vertex.linkTarget) {\n          link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"target\", vertex.linkTarget);\n        }\n        const linkNode = node.insert(function() {\n          return link;\n        }, \":first-child\");\n        const shape = node.select(\".label-container\");\n        if (shape) {\n          linkNode.append(function() {\n            return shape.node();\n          });\n        }\n        const label = node.select(\".label\");\n        if (label) {\n          linkNode.append(function() {\n            return label.node();\n          });\n        }\n      }\n    }\n  });\n};\nconst flowRendererV2 = {\n  setConf,\n  addVertices,\n  addEdges,\n  getClasses,\n  draw\n};\nconst fade = (color, opacity) => {\n  const channel = khroma.channel;\n  const r = channel(color, \"r\");\n  const g = channel(color, \"g\");\n  const b = channel(color, \"b\");\n  return khroma.rgba(r, g, b, opacity);\n};\nconst getStyles = (options) => `.label {\n    font-family: ${options.fontFamily};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n  .cluster-label text {\n    fill: ${options.titleColor};\n  }\n  .cluster-label span,p {\n    color: ${options.titleColor};\n  }\n\n  .label text,span,p {\n    fill: ${options.nodeTextColor || options.textColor};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n\n  .node rect,\n  .node circle,\n  .node ellipse,\n  .node polygon,\n  .node path {\n    fill: ${options.mainBkg};\n    stroke: ${options.nodeBorder};\n    stroke-width: 1px;\n  }\n  .flowchart-label text {\n    text-anchor: middle;\n  }\n  // .flowchart-label .text-outer-tspan {\n  //   text-anchor: middle;\n  // }\n  // .flowchart-label .text-inner-tspan {\n  //   text-anchor: start;\n  // }\n\n  .node .label {\n    text-align: center;\n  }\n  .node.clickable {\n    cursor: pointer;\n  }\n\n  .arrowheadPath {\n    fill: ${options.arrowheadColor};\n  }\n\n  .edgePath .path {\n    stroke: ${options.lineColor};\n    stroke-width: 2.0px;\n  }\n\n  .flowchart-link {\n    stroke: ${options.lineColor};\n    fill: none;\n  }\n\n  .edgeLabel {\n    background-color: ${options.edgeLabelBackground};\n    rect {\n      opacity: 0.5;\n      background-color: ${options.edgeLabelBackground};\n      fill: ${options.edgeLabelBackground};\n    }\n    text-align: center;\n  }\n\n  /* For html labels only */\n  .labelBkg {\n    background-color: ${fade(options.edgeLabelBackground, 0.5)};\n    // background-color: \n  }\n\n  .cluster rect {\n    fill: ${options.clusterBkg};\n    stroke: ${options.clusterBorder};\n    stroke-width: 1px;\n  }\n\n  .cluster text {\n    fill: ${options.titleColor};\n  }\n\n  .cluster span,p {\n    color: ${options.titleColor};\n  }\n  /* .cluster div {\n    color: ${options.titleColor};\n  } */\n\n  div.mermaidTooltip {\n    position: absolute;\n    text-align: center;\n    max-width: 200px;\n    padding: 2px;\n    font-family: ${options.fontFamily};\n    font-size: 12px;\n    background: ${options.tertiaryColor};\n    border: 1px solid ${options.border2};\n    border-radius: 2px;\n    pointer-events: none;\n    z-index: 100;\n  }\n\n  .flowchartTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options.textColor};\n  }\n`;\nconst flowStyles = getStyles;\nexport {\n  flowStyles as a,\n  flowRendererV2 as f\n};\n","/* IMPORT */\nimport _ from '../utils/index.js';\nimport Color from '../color/index.js';\n/* MAIN */\nconst channel = (color, channel) => {\n    return _.lang.round(Color.parse(color)[channel]);\n};\n/* EXPORT */\nexport default channel;\n"],"names":[],"version":3,"file":"flowDiagram-93327f21.18cd1e52.js.map"}