{"mappings":"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","sources":["node_modules/dagre-d3-es/src/graphlib/index.js","node_modules/dagre-d3-es/src/graphlib/graph.js","node_modules/dagre-d3-es/src/dagre/index.js","node_modules/dagre-d3-es/src/dagre/acyclic.js","node_modules/dagre-d3-es/src/dagre/greedy-fas.js","node_modules/dagre-d3-es/src/dagre/data/list.js","node_modules/dagre-d3-es/src/dagre/layout.js","node_modules/dagre-d3-es/src/dagre/add-border-segments.js","node_modules/dagre-d3-es/src/dagre/util.js","node_modules/dagre-d3-es/src/dagre/coordinate-system.js","node_modules/dagre-d3-es/src/dagre/normalize.js","node_modules/dagre-d3-es/src/dagre/rank/index.js","node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js","node_modules/dagre-d3-es/src/dagre/rank/util.js","node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js","node_modules/dagre-d3-es/src/graphlib/alg/index.js","node_modules/dagre-d3-es/src/graphlib/alg/components.js","node_modules/dagre-d3-es/src/graphlib/alg/dijkstra.js","node_modules/dagre-d3-es/src/graphlib/data/priority-queue.js","node_modules/dagre-d3-es/src/graphlib/alg/dijkstra-all.js","node_modules/dagre-d3-es/src/graphlib/alg/find-cycles.js","node_modules/dagre-d3-es/src/graphlib/alg/tarjan.js","node_modules/dagre-d3-es/src/graphlib/alg/floyd-warshall.js","node_modules/dagre-d3-es/src/graphlib/alg/is-acyclic.js","node_modules/dagre-d3-es/src/graphlib/alg/topsort.js","node_modules/dagre-d3-es/src/graphlib/alg/postorder.js","node_modules/dagre-d3-es/src/graphlib/alg/dfs.js","node_modules/dagre-d3-es/src/graphlib/alg/preorder.js","node_modules/dagre-d3-es/src/graphlib/alg/prim.js","node_modules/dagre-d3-es/src/dagre/nesting-graph.js","node_modules/dagre-d3-es/src/dagre/order/index.js","node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js","node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js","node_modules/dagre-d3-es/src/dagre/order/cross-count.js","node_modules/dagre-d3-es/src/dagre/order/init-order.js","node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js","node_modules/dagre-d3-es/src/dagre/order/barycenter.js","node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js","node_modules/dagre-d3-es/src/dagre/order/sort.js","node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js","node_modules/dagre-d3-es/src/dagre/position/index.js","node_modules/dagre-d3-es/src/dagre/position/bk.js"],"sourcesContent":["// Includes only the \"core\" of graphlib\n\nimport { Graph } from './graph.js';\n\nconst version = '2.1.9-pre';\n\nexport { Graph, version };\n","import * as _ from 'lodash-es';\n\nvar DEFAULT_EDGE_NAME = '\\x00';\nvar GRAPH_NODE = '\\x00';\nvar EDGE_KEY_DELIM = '\\x01';\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\nexport class Graph {\n  constructor(opts = {}) {\n    this._isDirected = _.has(opts, 'directed') ? opts.directed : true;\n    this._isMultigraph = _.has(opts, 'multigraph') ? opts.multigraph : false;\n    this._isCompound = _.has(opts, 'compound') ? opts.compound : false;\n\n    // Label for the graph itself\n    this._label = undefined;\n\n    // Defaults to be set when creating a new node\n    this._defaultNodeLabelFn = _.constant(undefined);\n\n    // Defaults to be set when creating a new edge\n    this._defaultEdgeLabelFn = _.constant(undefined);\n\n    // v -> label\n    this._nodes = {};\n\n    if (this._isCompound) {\n      // v -> parent\n      this._parent = {};\n\n      // v -> children\n      this._children = {};\n      this._children[GRAPH_NODE] = {};\n    }\n\n    // v -> edgeObj\n    this._in = {};\n\n    // u -> v -> Number\n    this._preds = {};\n\n    // v -> edgeObj\n    this._out = {};\n\n    // v -> w -> Number\n    this._sucs = {};\n\n    // e -> edgeObj\n    this._edgeObjs = {};\n\n    // e -> label\n    this._edgeLabels = {};\n  }\n  /* === Graph functions ========= */\n  isDirected() {\n    return this._isDirected;\n  }\n  isMultigraph() {\n    return this._isMultigraph;\n  }\n  isCompound() {\n    return this._isCompound;\n  }\n  setGraph(label) {\n    this._label = label;\n    return this;\n  }\n  graph() {\n    return this._label;\n  }\n  /* === Node functions ========== */\n  setDefaultNodeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultNodeLabelFn = newDefault;\n    return this;\n  }\n  nodeCount() {\n    return this._nodeCount;\n  }\n  nodes() {\n    return _.keys(this._nodes);\n  }\n  sources() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._in[v]);\n    });\n  }\n  sinks() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._out[v]);\n    });\n  }\n  setNodes(vs, value) {\n    var args = arguments;\n    var self = this;\n    _.each(vs, function (v) {\n      if (args.length > 1) {\n        self.setNode(v, value);\n      } else {\n        self.setNode(v);\n      }\n    });\n    return this;\n  }\n  setNode(v, value) {\n    if (_.has(this._nodes, v)) {\n      if (arguments.length > 1) {\n        this._nodes[v] = value;\n      }\n      return this;\n    }\n\n    // @ts-expect-error\n    this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n    if (this._isCompound) {\n      this._parent[v] = GRAPH_NODE;\n      this._children[v] = {};\n      this._children[GRAPH_NODE][v] = true;\n    }\n    this._in[v] = {};\n    this._preds[v] = {};\n    this._out[v] = {};\n    this._sucs[v] = {};\n    ++this._nodeCount;\n    return this;\n  }\n  node(v) {\n    return this._nodes[v];\n  }\n  hasNode(v) {\n    return _.has(this._nodes, v);\n  }\n  removeNode(v) {\n    var self = this;\n    if (_.has(this._nodes, v)) {\n      var removeEdge = function (e) {\n        self.removeEdge(self._edgeObjs[e]);\n      };\n      delete this._nodes[v];\n      if (this._isCompound) {\n        this._removeFromParentsChildList(v);\n        delete this._parent[v];\n        _.each(this.children(v), function (child) {\n          self.setParent(child);\n        });\n        delete this._children[v];\n      }\n      _.each(_.keys(this._in[v]), removeEdge);\n      delete this._in[v];\n      delete this._preds[v];\n      _.each(_.keys(this._out[v]), removeEdge);\n      delete this._out[v];\n      delete this._sucs[v];\n      --this._nodeCount;\n    }\n    return this;\n  }\n  setParent(v, parent) {\n    if (!this._isCompound) {\n      throw new Error('Cannot set parent in a non-compound graph');\n    }\n\n    if (_.isUndefined(parent)) {\n      parent = GRAPH_NODE;\n    } else {\n      // Coerce parent to string\n      parent += '';\n      for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {\n        if (ancestor === v) {\n          throw new Error('Setting ' + parent + ' as parent of ' + v + ' would create a cycle');\n        }\n      }\n\n      this.setNode(parent);\n    }\n\n    this.setNode(v);\n    this._removeFromParentsChildList(v);\n    this._parent[v] = parent;\n    this._children[parent][v] = true;\n    return this;\n  }\n  _removeFromParentsChildList(v) {\n    delete this._children[this._parent[v]][v];\n  }\n  parent(v) {\n    if (this._isCompound) {\n      var parent = this._parent[v];\n      if (parent !== GRAPH_NODE) {\n        return parent;\n      }\n    }\n  }\n  children(v) {\n    if (_.isUndefined(v)) {\n      v = GRAPH_NODE;\n    }\n\n    if (this._isCompound) {\n      var children = this._children[v];\n      if (children) {\n        return _.keys(children);\n      }\n    } else if (v === GRAPH_NODE) {\n      return this.nodes();\n    } else if (this.hasNode(v)) {\n      return [];\n    }\n  }\n  predecessors(v) {\n    var predsV = this._preds[v];\n    if (predsV) {\n      return _.keys(predsV);\n    }\n  }\n  successors(v) {\n    var sucsV = this._sucs[v];\n    if (sucsV) {\n      return _.keys(sucsV);\n    }\n  }\n  neighbors(v) {\n    var preds = this.predecessors(v);\n    if (preds) {\n      return _.union(preds, this.successors(v));\n    }\n  }\n  isLeaf(v) {\n    var neighbors;\n    if (this.isDirected()) {\n      neighbors = this.successors(v);\n    } else {\n      neighbors = this.neighbors(v);\n    }\n    return neighbors.length === 0;\n  }\n  filterNodes(filter) {\n    // @ts-expect-error\n    var copy = new this.constructor({\n      directed: this._isDirected,\n      multigraph: this._isMultigraph,\n      compound: this._isCompound,\n    });\n\n    copy.setGraph(this.graph());\n\n    var self = this;\n    _.each(this._nodes, function (value, v) {\n      if (filter(v)) {\n        copy.setNode(v, value);\n      }\n    });\n\n    _.each(this._edgeObjs, function (e) {\n      // @ts-expect-error\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n        copy.setEdge(e, self.edge(e));\n      }\n    });\n\n    var parents = {};\n    function findParent(v) {\n      var parent = self.parent(v);\n      if (parent === undefined || copy.hasNode(parent)) {\n        parents[v] = parent;\n        return parent;\n      } else if (parent in parents) {\n        return parents[parent];\n      } else {\n        return findParent(parent);\n      }\n    }\n\n    if (this._isCompound) {\n      _.each(copy.nodes(), function (v) {\n        copy.setParent(v, findParent(v));\n      });\n    }\n\n    return copy;\n  }\n  /* === Edge functions ========== */\n  setDefaultEdgeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultEdgeLabelFn = newDefault;\n    return this;\n  }\n  edgeCount() {\n    return this._edgeCount;\n  }\n  edges() {\n    return _.values(this._edgeObjs);\n  }\n  setPath(vs, value) {\n    var self = this;\n    var args = arguments;\n    _.reduce(vs, function (v, w) {\n      if (args.length > 1) {\n        self.setEdge(v, w, value);\n      } else {\n        self.setEdge(v, w);\n      }\n      return w;\n    });\n    return this;\n  }\n  /*\n   * setEdge(v, w, [value, [name]])\n   * setEdge({ v, w, [name] }, [value])\n   */\n  setEdge() {\n    var v, w, name, value;\n    var valueSpecified = false;\n    var arg0 = arguments[0];\n\n    if (typeof arg0 === 'object' && arg0 !== null && 'v' in arg0) {\n      v = arg0.v;\n      w = arg0.w;\n      name = arg0.name;\n      if (arguments.length === 2) {\n        value = arguments[1];\n        valueSpecified = true;\n      }\n    } else {\n      v = arg0;\n      w = arguments[1];\n      name = arguments[3];\n      if (arguments.length > 2) {\n        value = arguments[2];\n        valueSpecified = true;\n      }\n    }\n\n    v = '' + v;\n    w = '' + w;\n    if (!_.isUndefined(name)) {\n      name = '' + name;\n    }\n\n    var e = edgeArgsToId(this._isDirected, v, w, name);\n    if (_.has(this._edgeLabels, e)) {\n      if (valueSpecified) {\n        this._edgeLabels[e] = value;\n      }\n      return this;\n    }\n\n    if (!_.isUndefined(name) && !this._isMultigraph) {\n      throw new Error('Cannot set a named edge when isMultigraph = false');\n    }\n\n    // It didn't exist, so we need to create it.\n    // First ensure the nodes exist.\n    this.setNode(v);\n    this.setNode(w);\n\n    // @ts-expect-error\n    this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n\n    var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);\n    // Ensure we add undirected edges in a consistent way.\n    v = edgeObj.v;\n    w = edgeObj.w;\n\n    Object.freeze(edgeObj);\n    this._edgeObjs[e] = edgeObj;\n    incrementOrInitEntry(this._preds[w], v);\n    incrementOrInitEntry(this._sucs[v], w);\n    this._in[w][e] = edgeObj;\n    this._out[v][e] = edgeObj;\n    this._edgeCount++;\n    return this;\n  }\n  edge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return this._edgeLabels[e];\n  }\n  hasEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return _.has(this._edgeLabels, e);\n  }\n  removeEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    var edge = this._edgeObjs[e];\n    if (edge) {\n      v = edge.v;\n      w = edge.w;\n      delete this._edgeLabels[e];\n      delete this._edgeObjs[e];\n      decrementOrRemoveEntry(this._preds[w], v);\n      decrementOrRemoveEntry(this._sucs[v], w);\n      delete this._in[w][e];\n      delete this._out[v][e];\n      this._edgeCount--;\n    }\n    return this;\n  }\n  inEdges(v, u) {\n    var inV = this._in[v];\n    if (inV) {\n      var edges = _.values(inV);\n      if (!u) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.v === u;\n      });\n    }\n  }\n  outEdges(v, w) {\n    var outV = this._out[v];\n    if (outV) {\n      var edges = _.values(outV);\n      if (!w) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.w === w;\n      });\n    }\n  }\n  nodeEdges(v, w) {\n    var inEdges = this.inEdges(v, w);\n    if (inEdges) {\n      return inEdges.concat(this.outEdges(v, w));\n    }\n  }\n}\n\n/* Number of nodes in the graph. Should only be changed by the implementation. */\nGraph.prototype._nodeCount = 0;\n\n/* Number of edges in the graph. Should only be changed by the implementation. */\nGraph.prototype._edgeCount = 0;\n\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (!--map[k]) {\n    delete map[k];\n  }\n}\n\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var edgeObj = { v: v, w: w };\n  if (name) {\n    edgeObj.name = name;\n  }\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}\n","import * as acyclic from './acyclic.js';\nimport { layout } from './layout.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\n\nexport { acyclic, normalize, rank, layout };\n","import * as _ from 'lodash-es';\nimport { greedyFAS } from './greedy-fas.js';\n\nexport { run, undo };\n\nfunction run(g) {\n  var fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  _.forEach(fas, function (e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId('rev'));\n  });\n\n  function weightFn(g) {\n    return function (e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  function dfs(v) {\n    if (_.has(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.forEach(g.outEdges(v), function (e) {\n      if (_.has(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.forEach(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.forEach(g.edges(), function (e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    })\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n","/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nexport { List };\n\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return '[' + strs.join(', ') + ']';\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { addBorderSegments } from './add-border-segments.js';\nimport * as coordinateSystem from './coordinate-system.js';\nimport * as acyclic from './acyclic.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\nimport * as nestingGraph from './nesting-graph.js';\nimport { order } from './order/index.js';\nimport { parentDummyChains } from './parent-dummy-chains.js';\nimport { position } from './position/index.js';\nimport * as util from './util.js';\n\nexport { layout };\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', function () {\n    var layoutGraph = time('  buildLayoutGraph', function () {\n      return buildLayoutGraph(g);\n    });\n    time('  runLayout', function () {\n      runLayout(layoutGraph, time);\n    });\n    time('  updateInputGraph', function () {\n      updateInputGraph(g, layoutGraph);\n    });\n  });\n}\n\nfunction runLayout(g, time) {\n  time('    makeSpaceForEdgeLabels', function () {\n    makeSpaceForEdgeLabels(g);\n  });\n  time('    removeSelfEdges', function () {\n    removeSelfEdges(g);\n  });\n  time('    acyclic', function () {\n    acyclic.run(g);\n  });\n  time('    nestingGraph.run', function () {\n    nestingGraph.run(g);\n  });\n  time('    rank', function () {\n    rank(util.asNonCompoundGraph(g));\n  });\n  time('    injectEdgeLabelProxies', function () {\n    injectEdgeLabelProxies(g);\n  });\n  time('    removeEmptyRanks', function () {\n    util.removeEmptyRanks(g);\n  });\n  time('    nestingGraph.cleanup', function () {\n    nestingGraph.cleanup(g);\n  });\n  time('    normalizeRanks', function () {\n    util.normalizeRanks(g);\n  });\n  time('    assignRankMinMax', function () {\n    assignRankMinMax(g);\n  });\n  time('    removeEdgeLabelProxies', function () {\n    removeEdgeLabelProxies(g);\n  });\n  time('    normalize.run', function () {\n    normalize.run(g);\n  });\n  time('    parentDummyChains', function () {\n    parentDummyChains(g);\n  });\n  time('    addBorderSegments', function () {\n    addBorderSegments(g);\n  });\n  time('    order', function () {\n    order(g);\n  });\n  time('    insertSelfEdges', function () {\n    insertSelfEdges(g);\n  });\n  time('    adjustCoordinateSystem', function () {\n    coordinateSystem.adjust(g);\n  });\n  time('    position', function () {\n    position(g);\n  });\n  time('    positionSelfEdges', function () {\n    positionSelfEdges(g);\n  });\n  time('    removeBorderNodes', function () {\n    removeBorderNodes(g);\n  });\n  time('    normalize.undo', function () {\n    normalize.undo(g);\n  });\n  time('    fixupEdgeLabelCoords', function () {\n    fixupEdgeLabelCoords(g);\n  });\n  time('    undoCoordinateSystem', function () {\n    coordinateSystem.undo(g);\n  });\n  time('    translateGraph', function () {\n    translateGraph(g);\n  });\n  time('    assignNodeIntersects', function () {\n    assignNodeIntersects(g);\n  });\n  time('    reversePoints', function () {\n    reversePointsForReversedEdges(g);\n  });\n  time('    acyclic.undo', function () {\n    acyclic.undo(g);\n  });\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (_.has(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nvar nodeNumAttrs = ['width', 'height'];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nvar edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs))\n  );\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs))\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      // @ts-expect-error\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (_.has(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (_.has(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se'\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (_.has(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    })\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n","import * as _ from 'lodash-es';\n\nexport { adjust, undo };\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'bt' || rankDir === 'rl') {\n    reverseY(g);\n  }\n\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapWidthHeightOne(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    swapWidthHeightOne(g.edge(e));\n  });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.forEach(g.nodes(), function (v) {\n    reverseYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, reverseYOne);\n    if (_.has(edge, 'y')) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapXYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, swapXYOne);\n    if (_.has(edge, 'x')) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      // @ts-expect-error\n      attrs.dummy = 'edge-label';\n      // @ts-expect-error\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","import { feasibleTree } from './feasible-tree.js';\nimport { networkSimplex } from './network-simplex.js';\nimport { longestPath } from './util.js';\n\nexport { rank };\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      })\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","import { components } from './components.js';\nimport { dijkstra } from './dijkstra.js';\nimport { dijkstraAll } from './dijkstra-all.js';\nimport { findCycles } from './find-cycles.js';\nimport { floydWarshall } from './floyd-warshall.js';\nimport { isAcyclic } from './is-acyclic.js';\nimport { postorder } from './postorder.js';\nimport { preorder } from './preorder.js';\nimport { prim } from './prim.js';\nimport { tarjan } from './tarjan.js';\nimport { topsort } from './topsort.js';\n\nexport {\n  components,\n  dijkstra,\n  dijkstraAll,\n  findCycles,\n  floydWarshall,\n  isAcyclic,\n  postorder,\n  preorder,\n  prim,\n  tarjan,\n  topsort,\n};\n","import * as _ from 'lodash-es';\n\nexport { components };\n\nfunction components(g) {\n  var visited = {};\n  var cmpts = [];\n  var cmpt;\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    cmpt.push(v);\n    _.each(g.successors(v), dfs);\n    _.each(g.predecessors(v), dfs);\n  }\n\n  _.each(g.nodes(), function (v) {\n    cmpt = [];\n    dfs(v);\n    if (cmpt.length) {\n      cmpts.push(cmpt);\n    }\n  });\n\n  return cmpts;\n}\n","import * as _ from 'lodash-es';\nimport { PriorityQueue } from '../data/priority-queue.js';\n\nexport { dijkstra };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(\n    g,\n    String(source),\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function (edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\n        'dijkstra does not allow negative edge weights. ' +\n          'Bad edge: ' +\n          edge +\n          ' Weight: ' +\n          weight\n      );\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function (v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n","import * as _ from 'lodash-es';\n\nexport { PriorityQueue };\n\n/**\n * A min-priority queue data structure. This algorithm is derived from Cormen,\n * et al., \"Introduction to Algorithms\". The basic idea of a min-priority\n * queue is that you can efficiently (in O(1) time) get the smallest key in\n * the queue. Adding and removing elements takes O(log n) time. A key can\n * have its priority decreased in O(log n) time.\n */\nclass PriorityQueue {\n  constructor() {\n    this._arr = [];\n    this._keyIndices = {};\n  }\n  /**\n   * Returns the number of elements in the queue. Takes `O(1)` time.\n   */\n  size() {\n    return this._arr.length;\n  }\n  /**\n   * Returns the keys that are in the queue. Takes `O(n)` time.\n   */\n  keys() {\n    return this._arr.map(function (x) {\n      return x.key;\n    });\n  }\n  /**\n   * Returns `true` if **key** is in the queue and `false` if not.\n   */\n  has(key) {\n    return _.has(this._keyIndices, key);\n  }\n  /**\n   * Returns the priority for **key**. If **key** is not present in the queue\n   * then this function returns `undefined`. Takes `O(1)` time.\n   *\n   * @param {Object} key\n   */\n  priority(key) {\n    var index = this._keyIndices[key];\n    if (index !== undefined) {\n      return this._arr[index].priority;\n    }\n  }\n  /**\n   * Returns the key for the minimum element in this queue. If the queue is\n   * empty this function throws an Error. Takes `O(1)` time.\n   */\n  min() {\n    if (this.size() === 0) {\n      throw new Error('Queue underflow');\n    }\n    return this._arr[0].key;\n  }\n  /**\n   * Inserts a new key into the priority queue. If the key already exists in\n   * the queue this function returns `false`; otherwise it will return `true`.\n   * Takes `O(n)` time.\n   *\n   * @param {Object} key the key to add\n   * @param {Number} priority the initial priority for the key\n   */\n  add(key, priority) {\n    var keyIndices = this._keyIndices;\n    key = String(key);\n    if (!_.has(keyIndices, key)) {\n      var arr = this._arr;\n      var index = arr.length;\n      keyIndices[key] = index;\n      arr.push({ key: key, priority: priority });\n      this._decrease(index);\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Removes and returns the smallest key in the queue. Takes `O(log n)` time.\n   */\n  removeMin() {\n    this._swap(0, this._arr.length - 1);\n    var min = this._arr.pop();\n    delete this._keyIndices[min.key];\n    this._heapify(0);\n    return min.key;\n  }\n  /**\n   * Decreases the priority for **key** to **priority**. If the new priority is\n   * greater than the previous priority, this function will throw an Error.\n   *\n   * @param {Object} key the key for which to raise priority\n   * @param {Number} priority the new priority for the key\n   */\n  decrease(key, priority) {\n    var index = this._keyIndices[key];\n    if (priority > this._arr[index].priority) {\n      throw new Error(\n        'New priority is greater than current priority. ' +\n          'Key: ' +\n          key +\n          ' Old: ' +\n          this._arr[index].priority +\n          ' New: ' +\n          priority\n      );\n    }\n    this._arr[index].priority = priority;\n    this._decrease(index);\n  }\n  _heapify(i) {\n    var arr = this._arr;\n    var l = 2 * i;\n    var r = l + 1;\n    var largest = i;\n    if (l < arr.length) {\n      largest = arr[l].priority < arr[largest].priority ? l : largest;\n      if (r < arr.length) {\n        largest = arr[r].priority < arr[largest].priority ? r : largest;\n      }\n      if (largest !== i) {\n        this._swap(i, largest);\n        this._heapify(largest);\n      }\n    }\n  }\n  _decrease(index) {\n    var arr = this._arr;\n    var priority = arr[index].priority;\n    var parent;\n    while (index !== 0) {\n      parent = index >> 1;\n      if (arr[parent].priority < priority) {\n        break;\n      }\n      this._swap(index, parent);\n      index = parent;\n    }\n  }\n  _swap(i, j) {\n    var arr = this._arr;\n    var keyIndices = this._keyIndices;\n    var origArrI = arr[i];\n    var origArrJ = arr[j];\n    arr[i] = origArrJ;\n    arr[j] = origArrI;\n    keyIndices[origArrJ.key] = i;\n    keyIndices[origArrI.key] = j;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { dijkstra } from './dijkstra.js';\n\nexport { dijkstraAll };\n\nfunction dijkstraAll(g, weightFunc, edgeFunc) {\n  return _.transform(\n    g.nodes(),\n    function (acc, v) {\n      acc[v] = dijkstra(g, v, weightFunc, edgeFunc);\n    },\n    {}\n  );\n}\n","import * as _ from 'lodash-es';\nimport { tarjan } from './tarjan.js';\n\nexport { findCycles };\n\nfunction findCycles(g) {\n  return _.filter(tarjan(g), function (cmpt) {\n    return cmpt.length > 1 || (cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]));\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { tarjan };\n\nfunction tarjan(g) {\n  var index = 0;\n  var stack = [];\n  var visited = {}; // node id -> { onStack, lowlink, index }\n  var results = [];\n\n  function dfs(v) {\n    var entry = (visited[v] = {\n      onStack: true,\n      lowlink: index,\n      index: index++,\n    });\n    stack.push(v);\n\n    g.successors(v).forEach(function (w) {\n      if (!_.has(visited, w)) {\n        dfs(w);\n        entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);\n      } else if (visited[w].onStack) {\n        entry.lowlink = Math.min(entry.lowlink, visited[w].index);\n      }\n    });\n\n    if (entry.lowlink === entry.index) {\n      var cmpt = [];\n      var w;\n      do {\n        w = stack.pop();\n        visited[w].onStack = false;\n        cmpt.push(w);\n      } while (v !== w);\n      results.push(cmpt);\n    }\n  }\n\n  g.nodes().forEach(function (v) {\n    if (!_.has(visited, v)) {\n      dfs(v);\n    }\n  });\n\n  return results;\n}\n","import * as _ from 'lodash-es';\n\nexport { floydWarshall };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(\n    g,\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {};\n  var nodes = g.nodes();\n\n  nodes.forEach(function (v) {\n    results[v] = {};\n    results[v][v] = { distance: 0 };\n    nodes.forEach(function (w) {\n      if (v !== w) {\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\n      }\n    });\n    edgeFn(v).forEach(function (edge) {\n      var w = edge.v === v ? edge.w : edge.v;\n      var d = weightFn(edge);\n      results[v][w] = { distance: d, predecessor: v };\n    });\n  });\n\n  nodes.forEach(function (k) {\n    var rowK = results[k];\n    nodes.forEach(function (i) {\n      var rowI = results[i];\n      nodes.forEach(function (j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n\n  return results;\n}\n","import { topsort, CycleException } from './topsort.js';\n\nexport { isAcyclic };\n\nfunction isAcyclic(g) {\n  try {\n    topsort(g);\n  } catch (e) {\n    if (e instanceof CycleException) {\n      return false;\n    }\n    throw e;\n  }\n  return true;\n}\n","import * as _ from 'lodash-es';\n\nexport { topsort, CycleException };\n\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (_.has(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!_.has(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\n","import { dfs } from './dfs.js';\n\nexport { postorder };\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, 'post');\n}\n","import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n","import { dfs } from './dfs.js';\n\nexport { preorder };\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, 'pre');\n}\n","import * as _ from 'lodash-es';\nimport { PriorityQueue } from '../data/priority-queue.js';\nimport { Graph } from '../graph.js';\n\nexport { prim };\n\nfunction prim(g, weightFunc) {\n  var result = new Graph();\n  var parents = {};\n  var pq = new PriorityQueue();\n  var v;\n\n  function updateNeighbors(edge) {\n    var w = edge.v === v ? edge.w : edge.v;\n    var pri = pq.priority(w);\n    if (pri !== undefined) {\n      var edgeWeight = weightFunc(edge);\n      if (edgeWeight < pri) {\n        parents[w] = v;\n        pq.decrease(w, edgeWeight);\n      }\n    }\n  }\n\n  if (g.nodeCount() === 0) {\n    return result;\n  }\n\n  _.each(g.nodes(), function (v) {\n    pq.add(v, Number.POSITIVE_INFINITY);\n    result.setNode(v);\n  });\n\n  // Start from an arbitrary node\n  pq.decrease(g.nodes()[0], 0);\n\n  var init = false;\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    if (_.has(parents, v)) {\n      result.setEdge(v, parents[v]);\n    } else if (init) {\n      throw new Error('Input graph is not connected: ' + g);\n    } else {\n      init = true;\n    }\n\n    g.nodeEdges(v).forEach(updateNeighbors);\n  }\n\n  return result;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\n\nexport { order };\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { addSubgraphConstraints };\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\n\nexport { buildLayerGraph };\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel(function (v) {\n        return g.node(v);\n      });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function (e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (_.has(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId('_root'))));\n  return v;\n}\n","import * as _ from 'lodash-es';\n\nexport { crossCount };\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(\n    southLayer,\n    _.map(southLayer, function (v, i) {\n      return i;\n    })\n  );\n  var southEntries = _.flatten(\n    _.map(northLayer, function (v) {\n      return _.sortBy(\n        _.map(g.outEdges(v), function (e) {\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\n        }),\n        'pos'\n      );\n    })\n  );\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function () {\n    return 0;\n  });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.forEach(\n    // @ts-expect-error\n    southEntries.forEach(function (entry) {\n      var index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      var weightSum = 0;\n      // @ts-expect-error\n      while (index > 0) {\n        // @ts-expect-error\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        // @ts-expect-error\n        index = (index - 1) >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    })\n  );\n\n  return cc;\n}\n","import * as _ from 'lodash-es';\n\nexport { initOrder };\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    })\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n","import * as _ from 'lodash-es';\nimport { barycenter } from './barycenter.js';\nimport { resolveConflicts } from './resolve-conflicts.js';\nimport { sort } from './sort.js';\n\nexport { sortSubgraph };\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (_.has(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!_.has(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(\n      entry.vs.map(function (v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      })\n    );\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { barycenter };\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function (v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(\n        inV,\n        function (acc, e) {\n          var edge = g.edge(e),\n            nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight,\n          };\n        },\n        { sum: 0, weight: 0 }\n      );\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight,\n      };\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    }\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\n\nexport { sort };\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function (entry) {\n    return _.has(entry, 'barycenter');\n  });\n  var sortable = parts.lhs,\n    unsortable = _.sortBy(parts.rhs, function (entry) {\n      return -entry.i;\n    }),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.forEach(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function (entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\nimport { positionX } from './bk.js';\n\nexport { position };\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.forOwn(positionX(g), function (x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  _.forEach(layering, function (layer) {\n    var maxHeight = _.max(\n      _.map(layer, function (v) {\n        return g.node(v).height;\n      })\n    );\n    _.forEach(layer, function (v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nexport {\n  positionX,\n  findType1Conflicts,\n  findType2Conflicts,\n  addConflict,\n  hasConflict,\n  verticalAlignment,\n  horizontalCompaction,\n  alignCoordinates,\n  findSmallestWidthAlignment,\n  balance,\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function (v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i + 1), function (scanNode) {\n          _.forEach(g.predecessors(scanNode), function (u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        // @ts-expect-error\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function (i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function (u) {\n          var uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function (v, southLookahead) {\n      if (g.node(v).dummy === 'border') {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          // @ts-expect-error\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function (u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function (layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function (v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function (w) {\n          return pos[w];\n        });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function (acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function (acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function (v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function (layer) {\n    var u;\n    _.forEach(layer, function (v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach(['u', 'd'], function (vert) {\n    _.forEach(['l', 'r'], function (horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === 'l' ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function (x) {\n          return x + delta;\n        });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function (ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach(['u', 'd'], function (vert) {\n    adjustedLayering = vert === 'u' ? layering : _.values(layering).reverse();\n    _.forEach(['l', 'r'], function (horiz) {\n      if (horiz === 'r') {\n        adjustedLayering = _.map(adjustedLayering, function (inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n      if (horiz === 'r') {\n        xs = _.mapValues(xs, function (x) {\n          return -x;\n        });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function (g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, 'labelpos')) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = -vLabel.width / 2;\n          break;\n        case 'r':\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, 'labelpos')) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = wLabel.width / 2;\n          break;\n        case 'r':\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n"],"names":[],"version":3,"file":"flowDiagram-93327f21.06432b66.js.map","sourceRoot":"../"}