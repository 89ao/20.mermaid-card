{"mappings":"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","sources":["node_modules/mermaid/dist/index-a92ac404.js","node_modules/dagre-d3-es/src/graphlib/json.js"],"sourcesContent":["import { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nimport { c as createLabel, i as intersectRect, a as insertMarkers, b as clear$2, d as clear$3, u as updateNodeBounds, s as setNodeElem, e as insertNode, f as insertEdgeLabel, p as positionNode, g as insertEdge, h as positionEdgeLabel } from \"./edges-49ac43a2.js\";\nimport { l as log, n as evaluate, c as getConfig } from \"./mermaid-b0ad2de1.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { c as createText } from \"./createText-3df630b5.js\";\nimport { select } from \"d3\";\nlet clusterDb = {};\nlet descendants = {};\nlet parents = {};\nconst clear$1 = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\nconst isDescendant = (id, ancenstorId) => {\n  log.trace(\"In isDecendant\", ancenstorId, \" \", id, \" = \", descendants[ancenstorId].includes(id));\n  if (descendants[ancenstorId].includes(id)) {\n    return true;\n  }\n  return false;\n};\nconst edgeInCluster = (edge, clusterId) => {\n  log.info(\"Decendants of \", clusterId, \" is \", descendants[clusterId]);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n  if (!descendants[clusterId]) {\n    log.debug(\"Tilt, \", clusterId, \",not in decendants\");\n    return false;\n  }\n  return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\n};\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n};\nconst extractDescendants = (id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n};\nconst findNonClusterChild = (id, graph) => {\n  log.trace(\"Searching\", id);\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    log.trace(\"This is a valid node\", id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace(\"Found replacement for\", id, \" => \", _id);\n      return _id;\n    }\n  }\n};\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\nconst adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        if (edge.v !== id && edge.w !== id) {\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n          if (d1 ^ d2) {\n            log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n            log.warn(\"Decendants of XXX \", id, \": \", descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb[e.v],\n      \" --- \",\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + \"---\" + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: \"\",\n        labelText: edge.label,\n        padding: 0,\n        shape: \"labelRect\",\n        style: \"\"\n      });\n      const edge1 = JSON.parse(JSON.stringify(edge));\n      const edge2 = JSON.parse(JSON.stringify(edge));\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge2.label = \"\";\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n      graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\n      graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n};\nconst extractor = (graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb[node]) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\n    graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        // Todo: set proper spacing\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb[node].externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n};\nconst sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\nconst rect = (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const useHtmlLabels = evaluate(getConfig().flowchart.htmlLabels);\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const text = node.labelType === \"markdown\" ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels }) : label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  log.trace(\"Data \", node, JSON.stringify(node));\n  rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\n  if (useHtmlLabels) {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  } else {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + node.x + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  }\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst noteGroup = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const innerRect = shapeSvg.append(\"rect\");\n  const text = label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\n  innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\n  label.attr(\n    \"transform\",\n    \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2 - node.padding / 3 + (evaluate(getConfig().flowchart.htmlLabels) ? 5 : 3)) + \")\"\n  );\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst divider = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\nlet clusterElems = {};\nconst insertCluster = (elem, node) => {\n  log.trace(\"Inserting cluster\");\n  const shape = node.shape || \"rect\";\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nconst clear = () => {\n  clusterElems = {};\n};\nconst recursiveRender = async (_elem, graph, diagramtype, parentCluster) => {\n  log.info(\"Graph in recursive render: XXX\", graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node && node.clusterNode) {\n        log.info(\"Cluster identified\", v, node.width, graph.node(v));\n        const o = await recursiveRender(nodes, node.graph, diagramtype, graph.node(v));\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\n        setNodeElem(newEl, node);\n        log.warn(\"Recursive render complete \", newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\n          log.info(findNonClusterChild(node.id, graph));\n          clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        } else {\n          log.info(\"Node - the non recursive path\", v, node.id, node);\n          await insertNode(nodes, graph.node(v), dir);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n    log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translateing: \", clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n  graph.edges().forEach(function(e) {\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n  });\n  log.info(\"#############################################\");\n  log.info(\"###                Layout                 ###\");\n  log.info(\"#############################################\");\n  log.info(graph);\n  layout(graph);\n  log.info(\"Graph after layout:\", graphlibJson.write(graph));\n  let diff = 0;\n  sortNodesByHierarchy(graph).forEach(function(v) {\n    const node = graph.node(v);\n    log.info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\n    log.info(\n      \"Position \" + v + \": (\" + node.x,\n      \",\" + node.y,\n      \") width: \",\n      node.width,\n      \" height: \",\n      node.height\n    );\n    if (node && node.clusterNode) {\n      positionNode(node);\n    } else {\n      if (graph.children(v).length > 0) {\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        positionNode(node);\n      }\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramtype, graph);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === \"group\") {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\nconst render = async (elem, graph, markers, diagramtype, id) => {\n  insertMarkers(elem, markers, diagramtype, id);\n  clear$2();\n  clear$3();\n  clear();\n  clear$1();\n  log.warn(\"Graph at first:\", graphlibJson.write(graph));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after:\", graphlibJson.write(graph));\n  await recursiveRender(elem, graph, diagramtype);\n};\nexport {\n  render as r\n};\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n"],"names":[],"version":3,"file":"flowDiagram-93327f21.72160e6b.js.map","sourceRoot":"../"}