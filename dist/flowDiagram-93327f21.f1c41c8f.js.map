{"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAGA,SAAS,yCAAmB,QAAQ;IAClC,MAAM,0BAA0B,SAAS,QAAQ,WAAW;IAC5D,MAAM,qBAAqB,CAAA,GAAA,aAAK,EAAE;IAClC,OAAO;AACT;AACA,SAAS,sCAAgB,QAAQ;IAC/B,MAAM,uBAAuB,yCAAmB;IAChD,MAAM,YAAE,SAAQ,EAAE,GAAG,CAAA,GAAA,mBAAW,EAAE;IAClC,MAAM,QAAQ;QAAC,EAAE;KAAC;IAClB,IAAI,cAAc;IAClB,SAAS,YAAY,IAAI,EAAE,aAAa,QAAQ;QAC9C,IAAI,KAAK,SAAS,QAAQ;YACxB,MAAM,YAAY,KAAK,MAAM,MAAM;YACnC,UAAU,QAAQ,CAAC,UAAU;gBAC3B,IAAI,UAAU,GAAG;oBACf;oBACA,MAAM,KAAK,EAAE;gBACf;gBACA,SAAS,MAAM,KAAK,QAAQ,CAAC;oBAC3B,IAAI,MACF,KAAK,CAAC,YAAY,CAAC,KAAK;wBAAE,SAAS;wBAAM,MAAM;oBAAW;gBAE9D;YACF;QACF,OAAO,IAAI,KAAK,SAAS,YAAY,KAAK,SAAS,YACjD,KAAK,SAAS,QAAQ,CAAC;YACrB,YAAY,aAAa,KAAK;QAChC;IAEJ;IACA,SAAS,QAAQ,CAAC;QAChB,IAAI,SAAS,SAAS,aACpB,SAAS,SAAS,QAAQ,CAAC;YACzB,YAAY;QACd;IAEJ;IACA,OAAO;AACT;AACA,SAAS,qCAAe,QAAQ;IAC9B,MAAM,YAAE,SAAQ,EAAE,GAAG,CAAA,GAAA,mBAAW,EAAE;IAClC,SAAS,OAAO,IAAI;QAClB,IAAI,KAAK,SAAS,QAChB,OAAO,KAAK,MAAM,QAAQ,OAAO;aAC5B,IAAI,KAAK,SAAS,UACvB,OAAO,CAAC,QAAQ,EAAE,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,SAAS,CAAC;aAC1D,IAAI,KAAK,SAAS,YACvB,OAAO,CAAC,IAAI,EAAE,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,KAAK,CAAC;aAClD,IAAI,KAAK,SAAS,aACvB,OAAO,CAAC,GAAG,EAAE,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,IAAI,CAAC;QAEvD,OAAO,CAAC,sBAAsB,EAAE,KAAK,KAAK,CAAC;IAC7C;IACA,OAAO,SAAS,IAAI,QAAQ,KAAK;AACnC;AACA,SAAS,iCAAW,GAAG,EAAE,OAAO;IAC9B,IAAI,SACF,IAAI,KAAK,SAAS;AAEtB;AACA,SAAS,kCAAY,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,gBAAgB,KAAK;IACvE,MAAM,KAAK,QAAQ,OAAO;IAC1B,MAAM,MAAM,GAAG,OAAO;IACtB,MAAM,QAAQ,KAAK;IACnB,MAAM,aAAa,KAAK,SAAS,cAAc;IAC/C,IAAI,KACF,CAAC;iBACY,EAAE,WAAW,CAAC,EAAE,QAAQ,EAAE,CAAC,GAAI,CAAA,KAAK,aAAa,YAAY,KAAK,aAAa,MAAM,EAAC,IAAK,MAAM,QAAQ;IAExH,iCAAW,KAAK,KAAK;IACrB,IAAI,MAAM,WAAW;IACrB,IAAI,MAAM,eAAe;IACzB,IAAI,MAAM,aAAa,QAAQ;IAC/B,IAAI,KAAK,SAAS;IAClB,IAAI,eACF,IAAI,KAAK,SAAS;IAEpB,IAAI,OAAO,IAAI,OAAO;IACtB,IAAI,KAAK,UAAU,OAAO;QACxB,IAAI,MAAM,WAAW;QACrB,IAAI,MAAM,eAAe;QACzB,IAAI,MAAM,SAAS,QAAQ;QAC3B,OAAO,IAAI,OAAO;IACpB;IACA,GAAG,MAAM,SAAS,KAAK;IACvB,GAAG,MAAM,UAAU,KAAK;IACxB,OAAO,GAAG;AACZ;AACA,SAAS,kCAAY,WAAW,EAAE,SAAS,EAAE,UAAU;IACrD,OAAO,YAAY,OAAO,SAAS,KAAK,SAAS,oBAAoB,KAAK,KAAK,GAAG,KAAK,KAAK,YAAY,aAAa,MAAM,MAAM,KAAK,MAAM,aAAa;AAC3J;AACA,SAAS,yCAAmB,UAAU,EAAE,UAAU,EAAE,IAAI;IACtD,MAAM,cAAc,WAAW,OAAO;IACtC,MAAM,WAAW,kCAAY,aAAa,GAAG;IAC7C,iDAA2B,UAAU;QAAC;YAAE,SAAS;YAAM,MAAM;QAAS;KAAE;IACxE,MAAM,aAAa,SAAS,OAAO;IACnC,YAAY;IACZ,OAAO;AACT;AACA,SAAS,0CAAoB,KAAK,EAAE,CAAC,EAAE,cAAc,EAAE,gBAAgB,KAAK;IAC1E,MAAM,aAAa;IACnB,MAAM,aAAa,EAAE,OAAO;IAC5B,IAAI,MAAM,WAAW,OAAO,QAAQ,KAAK,SAAS;IAClD,MAAM,cAAc,WAAW,OAAO,QAAQ,KAAK,KAAK;IACxD,IAAI,YAAY;IAChB,eAAe,QAAQ,CAAC;QACtB,IAAI,UAAU,KAAK,IAAI,CAAC,OAAS,KAAK,SAAS,KAAK;QACpD,IAAI,UAAU;QACd,IAAI,kBAAkB,EAAE;QACxB,IAAI,YAAY;QAChB,IAAI,yCAAmB,YAAY,YAAY,YAAY,OACzD,gBAAgB,KAAK;aAChB;YACL,IAAK,IAAI,IAAI,GAAG,KAAK,QAAQ,QAAQ,IAAK;gBACxC,UAAU,QAAQ,MAAM,WAAW;gBACnC,CAAA,GAAA,QAAE,EAAE,KAAK,SAAS,WAAW;gBAC7B,IAAI,yCAAmB,YAAY,YAAY,WAAW,OAAO;oBAC/D,MAAM,SAAS,QAAQ,MAAM,WAAW;oBACxC,MAAM,iBAAiB,OAAO,YAAY;oBAC1C,IAAI,iBAAiB,IACnB,IAAI,YAAY,iBAAiB;oBAEnC,gBAAgB,KAAK,QAAQ,MAAM,WAAW,GAAG;oBACjD,YAAY;oBACZ,UAAU;gBACZ;YACF;YACA,IAAI,WAAW,MACb,gBAAgB,KAAK;QAEzB;QACA,MAAM,gBAAgB,gBAAgB,IAAI,CAAC,IAAO,CAAA;gBAAE,SAAS;gBAAG,MAAM,KAAK;YAAK,CAAA;QAChF,KAAK,MAAM,gBAAgB,cAAe;YACxC,IAAI,QAAQ,kCAAY,aAAa,WAAW;YAChD,iDAA2B,OAAO;gBAAC;aAAa;YAChD;QACF;IACF;IACA,IAAI,eAAe;QACjB,MAAM,OAAO,YAAY,OAAO;QAChC,MAAM,UAAU;QAChB,IAAI,KAAK,KAAK,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,KAAK,SAAS,KAAK,QAAQ,IAAI,SAAS,KAAK,UAAU,KAAK,SAAS,IAAI;QACrH,OAAO,WAAW;IACpB,OACE,OAAO,YAAY;AAEvB;AACA,SAAS,iDAA2B,KAAK,EAAE,WAAW;IACpD,MAAM,KAAK;IACX,YAAY,QAAQ,CAAC,MAAM;QACzB,MAAM,aAAa,MAAM,OAAO,SAAS,KAAK,cAAc,KAAK,SAAS,OAAO,WAAW,UAAU,KAAK,SAAS,oBAAoB,KAAK,eAAe,KAAK,SAAS,WAAW,SAAS;QAC9L,IAAI,UAAU,GACZ,WAAW,KAAK,KAAK;aAErB,WAAW,KAAK,MAAM,KAAK;IAE/B;AACF;AACA,MAAM,4CAAa,CAAC,IAAI,OAAO,EAAE,EAAE,SACjC,QAAQ,cACR,UAAU,iBACV,UAAU,oBACV,gBAAgB,eAChB,SAAS,cACT,MAAK,oBACL,mBAAmB,QACpB,GAAG,CAAC,CAAC;IACJ,CAAA,GAAA,QAAE,EAAE,KAAK,cAAc,MAAM,OAAO,SAAS,SAAS,eAAe,QAAQ;IAC7E,IAAI,eAAe;QACjB,MAAM,WAAW,qCAAe;QAChC,MAAM,OAAO;oBACX;YACA,OAAO,CAAA,GAAA,QAAa,EAAE,UAAU,QAC9B,wBACA,CAAC,IAAM,CAAC,UAAU,EAAE,EAAE,QAAQ,KAAK,KAAK,MAAM,CAAC;YAEjD,YAAY,MAAM,QAAQ,SAAS;QACrC;QACA,IAAI,aAAa,kCAAY,IAAI,MAAM,OAAO,SAAS;QACvD,OAAO;IACT,OAAO;QACL,MAAM,iBAAiB,sCAAgB;QACvC,MAAM,WAAW,0CAAoB,OAAO,IAAI,gBAAgB;QAChE,OAAO;IACT;AACF;;;;;;AC5LA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmCC,GAED;;;;;CAKC,GAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+CC,GAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+CC,GAED,iDAAiD;AACjD,6DAA6D;AAC7D,2CAA2C;;;;;;;;;;;;;;;;;;;AAW3C,MAAM,4BAAM,CAAC,EAAE;AAYR,MAAM,4CACX;;;;;GAKC,GAED;;;;;GAKC,GACD,SAAU,KAAK,EAAE,QAAQ,EAAE,OAAO;IAChC,IAAI,OAAO,aAAa,UAAU;QAChC,UAAU;QACV,WAAW;IACb;IACA,OAAO,+BAAS,SACd,CAAA,GAAA,kBAAU,EACR,CAAA,GAAA,YAAI,EAAE,SAAS,WAAW,MAAM,CAAA,GAAA,iBAAS,IAAI,OAAO,UAAU;AAGpE;AAEF;;;;CAIC,GACD,SAAS,+BAAS,OAAO;IACvB,mBAAmB,GACnB,MAAM,SAAS;QACb,YAAY,EAAE;QACd,gBAAgB;YAAC;YAAY;YAAY;YAAW;YAAa;SAAS;QAC1E,OAAO;YACL,UAAU,OAAO;YACjB,kBAAkB;YAClB,eAAe;YACf,YAAY,OAAO;YACnB,YAAY,OAAO;YACnB,iBAAiB;YACjB,oBAAoB;YACpB,YAAY,OAAO;YACnB,qBAAqB;YACrB,qBAAqB;YACrB,cAAc,OAAO,UAAU;YAC/B,UAAU,OAAO,UAAU;YAC3B,cAAc;YACd,MAAM;YACN,eAAe;YACf,YAAY,OAAO;YACnB,6BAA6B;YAC7B,uBAAuB;YACvB,uBAAuB;YACvB,UAAU,OAAO;YACjB,iBAAiB,OAAO;YACxB,mBAAmB,OAAO;YAC1B,UAAU,OAAO,MAAM;YACvB,cAAc;YACd,UAAU,OAAO,MAAM;YACvB,cAAc;YACd,OAAO,OAAO;YACd,OAAO;YACP,MAAM,OAAO;YACb,UAAU,OAAO;YACjB,eAAe;YACf,aAAa,OAAO,MAAM;YAC1B,eAAe,OAAO;YACtB,WAAW,OAAO;YAClB,WAAW;YACX,iBAAiB;YACjB,2BAA2B;YAC3B,qBAAqB;YACrB,eAAe,OAAO;YACtB,QAAQ,OAAO;YACf,eAAe,OAAO;QACxB;QACA,MAAM;YACJ,YAAY;YACZ,oBAAoB;YACpB,UAAU;YACV,eAAe;YACf,kBAAkB;YAClB,YAAY;YACZ,sBAAsB;YACtB,qCAAqC;YACrC,iCAAiC;YACjC,yBAAyB;YACzB,YAAY,OAAO;YACnB,iBAAiB;YACjB,qBAAqB;YACrB,qBAAqB;YACrB,eAAe;YACf,cAAc,OAAO;YACrB,UAAU,OAAO;YACjB,cAAc;YACd,MAAM;YACN,YAAY;YACZ,6BAA6B;YAC7B,uBAAuB;YACvB,uBAAuB;YACvB,UAAU;YACV,iBAAiB,OAAO;YACxB,mBAAmB,OAAO;YAC1B,UAAU,OAAO;YACjB,cAAc;YACd,UAAU,OAAO;YACjB,cAAc;YACd,OAAO,OAAO;YACd,OAAO;YACP,WAAW;YACX,YAAY;YACZ,MAAM,OAAO;YACb,UAAU;YACV,aAAa;YACb,eAAe;YACf,WAAW;YACX,iBAAiB;YACjB,2BAA2B;YAC3B,qBAAqB;YACrB,UAAU;YACV,eAAe,OAAO;YACtB,2BAA2B;YAC3B,mBAAmB;YACnB,QAAQ;YACR,eAAe;QACjB;IACF;IACA,gCAAU,QAAQ,AAAC,CAAA,WAAW,CAAC,CAAA,EAAG,mBAAmB,EAAE;IAEvD,wBAAwB,GACxB,MAAM,OAAO,CAAC;IACd,OAAO;IAEP;;;;;;;GAOC,GACD,SAAS,QAAQ,MAAM;QACrB,iBAAiB,GACjB,IAAI,OAAO;YACT,MAAM;YACN,UAAU,EAAE;QACd;QACA,mDAAmD,GACnD,MAAM,UAAU;YACd,OAAO;gBAAC;aAAK;YACb,YAAY,EAAE;oBACd;mBACA;kBACA;oBACA;oBACA;qBACA;qBACA;QACF;QACA,0BAA0B,GAC1B,MAAM,YAAY,EAAE;QACpB,IAAI,QAAQ;QACZ,MAAO,EAAE,QAAQ,OAAO,OACtB,qEAAqE;QACrE,wCAAwC;QACxC,IACE,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,iBAC1B,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS;YAE1B,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,SACvB,UAAU,KAAK;iBACV;gBACL,MAAM,OAAO,UAAU;gBACvB,QAAQ,YAAY,QAAQ,MAAM;YACpC;;QAGJ,QAAQ;QACR,MAAO,EAAE,QAAQ,OAAO,OAAQ;YAC9B,MAAM,UAAU,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;YACxC,IAAI,0BAAI,KAAK,SAAS,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,OACrC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,KAC7B,OAAO,OACL;gBACE,gBAAgB,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;YACnC,GACA,UAEF,MAAM,CAAC,MAAM,CAAC,EAAE;QAGtB;QAEA,kCAAkC;QAClC,IAAI,QAAQ,WAAW,SAAS,GAAG;YACjC,MAAM,OAAO,QAAQ,UAAU,CAAC,QAAQ,WAAW,SAAS,EAAE;YAC9D,MAAM,UAAU,IAAI,CAAC,EAAE,IAAI;YAC3B,QAAQ,KAAK,SAAS,WAAW,IAAI,CAAC,EAAE;QAC1C;QAEA,8BAA8B;QAC9B,KAAK,WAAW;YACd,OAAO,4BACL,OAAO,SAAS,IACZ,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,QACb;gBACE,MAAM;gBACN,QAAQ;gBACR,QAAQ;YACV;YAEN,KAAK,4BACH,OAAO,SAAS,IACZ,MAAM,CAAC,OAAO,SAAS,EAAE,CAAC,EAAE,CAAC,MAC7B;gBACE,MAAM;gBACN,QAAQ;gBACR,QAAQ;YACV;QAER;QAEA,mBAAmB;QACnB,QAAQ;QACR,MAAO,EAAE,QAAQ,OAAO,WAAW,OACjC,OAAO,OAAO,UAAU,CAAC,MAAM,CAAC,SAAS;QAE3C,OAAO;IACT;IAEA;;;;;GAKC,GACD,SAAS,YAAY,MAAM,EAAE,KAAK,EAAE,MAAM;QACxC,IAAI,QAAQ,QAAQ;QACpB,IAAI,mBAAmB;QACvB,IAAI,aAAa;QACjB,8BAA8B,GAC9B,IAAI;QACJ,+BAA+B,GAC/B,IAAI;QACJ,+BAA+B,GAC/B,IAAI;QACJ,gCAAgC,GAChC,IAAI;QACJ,MAAO,EAAE,SAAS,OAAQ;YACxB,MAAM,QAAQ,MAAM,CAAC,MAAM;YAC3B,IACE,KAAK,CAAC,EAAE,CAAC,SAAS,mBAClB,KAAK,CAAC,EAAE,CAAC,SAAS,iBAClB,KAAK,CAAC,EAAE,CAAC,SAAS,cAClB;gBACA,IAAI,KAAK,CAAC,EAAE,KAAK,SACf;qBAEA;gBAEF,WAAW;YACb,OAAO,IAAI,KAAK,CAAC,EAAE,CAAC,SAAS,mBAC3B;gBAAA,IAAI,KAAK,CAAC,EAAE,KAAK,SAAS;oBACxB,IACE,YACA,CAAC,YACD,CAAC,oBACD,CAAC,qBAED,sBAAsB;oBAExB,WAAW;gBACb;YAAA,OACK,IACL,KAAK,CAAC,EAAE,CAAC,SAAS,gBAClB,KAAK,CAAC,EAAE,CAAC,SAAS,mBAClB,KAAK,CAAC,EAAE,CAAC,SAAS,oBAClB,KAAK,CAAC,EAAE,CAAC,SAAS,oBAClB,KAAK,CAAC,EAAE,CAAC,SAAS;iBAIlB,WAAW;YAEb,IACE,AAAC,CAAC,oBACA,KAAK,CAAC,EAAE,KAAK,WACb,KAAK,CAAC,EAAE,CAAC,SAAS,oBACnB,qBAAqB,MACpB,KAAK,CAAC,EAAE,KAAK,UACZ,CAAA,KAAK,CAAC,EAAE,CAAC,SAAS,mBACjB,KAAK,CAAC,EAAE,CAAC,SAAS,aAAY,GAClC;gBACA,IAAI,UAAU;oBACZ,IAAI,YAAY;oBAChB,YAAY;oBACZ,MAAO,YAAa;wBAClB,MAAM,YAAY,MAAM,CAAC,UAAU;wBACnC,IACE,SAAS,CAAC,EAAE,CAAC,SAAS,gBACtB,SAAS,CAAC,EAAE,CAAC,SAAS,mBACtB;4BACA,IAAI,SAAS,CAAC,EAAE,KAAK,QAAQ;4BAC7B,IAAI,WAAW;gCACb,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO;gCAC5B,aAAa;4BACf;4BACA,SAAS,CAAC,EAAE,CAAC,OAAO;4BACpB,YAAY;wBACd,OAAO,IACL,SAAS,CAAC,EAAE,CAAC,SAAS,gBACtB,SAAS,CAAC,EAAE,CAAC,SAAS,sBACtB,SAAS,CAAC,EAAE,CAAC,SAAS,gCACtB,SAAS,CAAC,EAAE,CAAC,SAAS,sBACtB,SAAS,CAAC,EAAE,CAAC,SAAS;6BAItB;oBAEJ;oBACA,IACE,uBACC,CAAA,CAAC,aAAa,sBAAsB,SAAQ,GAE7C,SAAS,UAAU;oBAGrB,gBAAgB;oBAChB,SAAS,MAAM,OAAO,OACpB,CAAC,GACD,YAAY,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;oBAEpD,OAAO,OAAO,aAAa,OAAO,GAAG;wBAAC;wBAAQ;wBAAU,KAAK,CAAC,EAAE;qBAAC;oBACjE;oBACA;gBACF;gBAEA,0BAA0B;gBAC1B,IAAI,KAAK,CAAC,EAAE,CAAC,SAAS,kBAAkB;oBACtC,WAAW;wBACT,MAAM;wBACN,SAAS;wBACT,OAAO,OAAO,OAAO,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC;wBAClC,iDAAiD;wBACjD,KAAK;oBACP;oBACA,iEAAiE;oBACjE,OAAO,OAAO,OAAO,GAAG;wBAAC;wBAAS;wBAAU,KAAK,CAAC,EAAE;qBAAC;oBACrD;oBACA;oBACA,sBAAsB;oBACtB,WAAW;gBACb;YACF;QACF;QACA,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU;QAC3B,OAAO;IACT;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,QAAQ,GAAG,EAAE,KAAK;QACzB,IAAI,CAAC,IAAI,GAAG;IACd;IAEA;;;;;;;;;GASC,GACD,SAAS,QAAQ,GAAG;QAClB,OAAO,IAAI,CAAC,IAAI;IAClB;IAEA;;;;;;;;;GASC,GACD,SAAS,OAAO,MAAM,EAAE,GAAG;QACzB,OAAO;QAEP;;;;KAIC,GACD,SAAS,KAAK,KAAK;YACjB,MAAM,KAAK,IAAI,EAAE,OAAO,QAAQ;YAChC,IAAI,KAAK,IAAI,KAAK,IAAI,EAAE;QAC1B;IACF;IAEA;;;GAGC,GACD,SAAS;QACP,IAAI,CAAC,MAAM,KAAK;YACd,MAAM;YACN,UAAU,EAAE;QACd;IACF;IAEA;;;;;;;;;;;;;GAaC,GACD,SAAS,MAAM,IAAI,EAAE,KAAK,EAAE,YAAY;QACtC,MAAM,SAAS,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAChD,oEAAoE;QACpE,OAAO,SAAS,KAAK;QACrB,IAAI,CAAC,MAAM,KAAK;QAChB,IAAI,CAAC,WAAW,KAAK;YAAC;YAAO;SAAa;QAC1C,iDAAiD;QACjD,KAAK,WAAW;YACd,OAAO,4BAAM,MAAM;QACrB;QACA,OAAO;IACT;IAEA;;;;;;;GAOC,GACD,SAAS,OAAO,GAAG;QACjB,OAAO;QAEP;;;;KAIC,GACD,SAAS,MAAM,KAAK;YAClB,IAAI,KAAK,IAAI,KAAK,IAAI,EAAE;YACxB,KAAK,KAAK,IAAI,EAAE;QAClB;IACF;IAEA;;;;;;;;;GASC,GACD,SAAS,KAAK,KAAK,EAAE,WAAW;QAC9B,MAAM,OAAO,IAAI,CAAC,MAAM;QACxB,MAAM,OAAO,IAAI,CAAC,WAAW;QAC7B,IAAI,CAAC,MACH,MAAM,IAAI,MACR,mBACE,MAAM,OACN,QACA,CAAA,GAAA,wBAAgB,EAAE;YAChB,OAAO,MAAM;YACb,KAAK,MAAM;QACb,KACA;aAEC,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,MAAM;YAChC,IAAI,aACF,YAAY,KAAK,IAAI,EAAE,OAAO,IAAI,CAAC,EAAE;iBAChC;gBACL,MAAM,UAAU,IAAI,CAAC,EAAE,IAAI;gBAC3B,QAAQ,KAAK,IAAI,EAAE,OAAO,IAAI,CAAC,EAAE;YACnC;;QAEF,KAAK,SAAS,MAAM,4BAAM,MAAM;QAChC,OAAO;IACT;IAEA;;;GAGC,GACD,SAAS;QACP,OAAO,CAAA,GAAA,eAAO,EAAE,IAAI,CAAC,MAAM;IAC7B;IAEA,EAAE;IACF,YAAY;IACZ,EAAE;IAEF;;;GAGC,GACD,SAAS;QACP,QAAQ,+BAA+B;IACzC;IAEA;;;GAGC,GACD,SAAS,qBAAqB,KAAK;QACjC,IAAI,QAAQ,gCAAgC;YAC1C,MAAM,WAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;YAClD,SAAS,QAAQ,OAAO,SAAS,IAAI,CAAC,eAAe,QAAQ;YAC7D,QAAQ;QACV;IACF;IAEA;;;GAGC,GACD,SAAS;QACP,MAAM,OAAO,IAAI,CAAC;QAClB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,KAAK,OAAO;IACd;IAEA;;;GAGC,GACD,SAAS;QACP,MAAM,OAAO,IAAI,CAAC;QAClB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,KAAK,OAAO;IACd;IAEA;;;GAGC,GACD,SAAS;QACP,qCAAqC;QACrC,IAAI,QAAQ,mBAAmB;QAC/B,IAAI,CAAC;QACL,QAAQ,kBAAkB;IAC5B;IAEA;;;GAGC,GACD,SAAS;QACP,MAAM,OAAO,IAAI,CAAC;QAClB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,KAAK,QAAQ,KAAK,QAAQ,4BAA4B;QACtD,QAAQ;IACV;IAEA;;;GAGC,GACD,SAAS;QACP,MAAM,OAAO,IAAI,CAAC;QAClB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,KAAK,QAAQ,KAAK,QAAQ,gBAAgB;IAC5C;IAEA;;;GAGC,GACD,SAAS,4BAA4B,KAAK;QACxC,MAAM,QAAQ,IAAI,CAAC;QACnB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,KAAK,QAAQ;QACb,KAAK,aAAa,CAAA,GAAA,0BAAkB,EAClC,IAAI,CAAC,eAAe,QACpB;IACJ;IAEA;;;GAGC,GACD,SAAS;QACP,MAAM,OAAO,IAAI,CAAC;QAClB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,KAAK,QAAQ;IACf;IAEA;;;GAGC,GACD,SAAS;QACP,MAAM,OAAO,IAAI,CAAC;QAClB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,KAAK,MAAM;IACb;IAEA;;;GAGC,GACD,SAAS,yBAAyB,KAAK;QACrC,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,IAAI,CAAC,KAAK,OAAO;YACf,MAAM,QAAQ,IAAI,CAAC,eAAe,OAAO;YACzC,KAAK,QAAQ;QACf;IACF;IAEA;;;GAGC,GACD,SAAS;QACP,QAAQ,gCAAgC;IAC1C;IAEA;;;GAGC,GACD,SAAS,gCAAgC,KAAK;QAC5C,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,KAAK,QAAQ,IAAI,CAAC,eAAe,OAAO,WAAW,OAAO,KAAK,IAAI;IACrE;IAEA;;;GAGC,GACD,SAAS;QACP,QAAQ;IACV;IAEA;;;GAGC,GAED,SAAS,YAAY,KAAK;QACxB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,IAAI,OAAO,KAAK,QAAQ,CAAC,KAAK,SAAS,SAAS,EAAE;QAClD,IAAI,CAAC,QAAQ,KAAK,SAAS,QAAQ;YACjC,uBAAuB;YACvB,OAAO;YACP,2CAA2C;YAC3C,KAAK,WAAW;gBACd,OAAO,4BAAM,MAAM;YACrB;YACA,oDAAoD;YACpD,KAAK,SAAS,KAAK;QACrB;QACA,IAAI,CAAC,MAAM,KAAK;IAClB;IAEA;;;GAGC,GAED,SAAS,WAAW,KAAK;QACvB,MAAM,OAAO,IAAI,CAAC,MAAM;QACxB,KAAK,SAAS,IAAI,CAAC,eAAe;QAClC,KAAK,SAAS,MAAM,4BAAM,MAAM;IAClC;IAEA;;;GAGC,GAED,SAAS,iBAAiB,KAAK;QAC7B,MAAM,UAAU,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QACjD,8DAA8D;QAC9D,IAAI,QAAQ,gBAAgB;YAC1B,MAAM,OAAO,QAAQ,QAAQ,CAAC,QAAQ,SAAS,SAAS,EAAE;YAC1D,KAAK,SAAS,MAAM,4BAAM,MAAM;YAChC,QAAQ;YACR;QACF;QACA,IACE,CAAC,QAAQ,mCACT,OAAO,eAAe,SAAS,QAAQ,OACvC;YACA,YAAY,KAAK,IAAI,EAAE;YACvB,WAAW,KAAK,IAAI,EAAE;QACxB;IACF;IAEA;;;GAGC,GAED,SAAS;QACP,QAAQ,eAAe;IACzB;IAEA;;;GAGC,GAED,SAAS;QACP,MAAM,OAAO,IAAI,CAAC;QAClB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,KAAK,QAAQ;IACf;IAEA;;;GAGC,GAED,SAAS;QACP,MAAM,OAAO,IAAI,CAAC;QAClB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,KAAK,QAAQ;IACf;IAEA;;;GAGC,GAED,SAAS;QACP,MAAM,OAAO,IAAI,CAAC;QAClB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,KAAK,QAAQ;IACf;IAEA;;;GAGC,GAED,SAAS;QACP,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,0EAA0E;QAC1E,iCAAiC;QACjC,gBAAgB;QAChB,IAAI,QAAQ,gBAAgB;YAC1B,0BAA0B,GAC1B,MAAM,gBAAgB,QAAQ,oBAAoB;YAClD,KAAK,QAAQ;YACb,4BAA4B;YAC5B,KAAK,gBAAgB;YACrB,4BAA4B;YAC5B,OAAO,KAAK;YACZ,OAAO,KAAK;QACd,OAAO;YACL,4BAA4B;YAC5B,OAAO,KAAK;YACZ,4BAA4B;YAC5B,OAAO,KAAK;QACd;QACA,QAAQ;IACV;IAEA;;;GAGC,GAED,SAAS;QACP,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,0EAA0E;QAC1E,iCAAiC;QACjC,gBAAgB;QAChB,IAAI,QAAQ,gBAAgB;YAC1B,0BAA0B,GAC1B,MAAM,gBAAgB,QAAQ,oBAAoB;YAClD,KAAK,QAAQ;YACb,4BAA4B;YAC5B,KAAK,gBAAgB;YACrB,4BAA4B;YAC5B,OAAO,KAAK;YACZ,OAAO,KAAK;QACd,OAAO;YACL,4BAA4B;YAC5B,OAAO,KAAK;YACZ,4BAA4B;YAC5B,OAAO,KAAK;QACd;QACA,QAAQ;IACV;IAEA;;;GAGC,GAED,SAAS,gBAAgB,KAAK;QAC5B,MAAM,SAAS,IAAI,CAAC,eAAe;QACnC,MAAM,WAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAClD,2EAA2E;QAC3E,SAAS;QACT,SAAS,QAAQ,CAAA,GAAA,mBAAW,EAAE;QAC9B,mCAAmC;QACnC,SAAS,aAAa,CAAA,GAAA,0BAAkB,EAAE,QAAQ;IACpD;IAEA;;;GAGC,GAED,SAAS;QACP,MAAM,WAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAClD,MAAM,QAAQ,IAAI,CAAC;QACnB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,sBAAsB;QACtB,QAAQ,eAAe;QACvB,IAAI,KAAK,SAAS,QAAQ;YACxB,yCAAyC,GACzC,oDAAoD;YACpD,MAAM,WAAW,SAAS;YAC1B,KAAK,WAAW;QAClB,OACE,KAAK,MAAM;IAEf;IAEA;;;GAGC,GAED,SAAS;QACP,MAAM,OAAO,IAAI,CAAC;QAClB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,KAAK,MAAM;IACb;IAEA;;;GAGC,GAED,SAAS;QACP,MAAM,OAAO,IAAI,CAAC;QAClB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,KAAK,QAAQ;IACf;IAEA;;;GAGC,GAED,SAAS;QACP,QAAQ;IACV;IAEA;;;GAGC,GAED,SAAS;QACP,QAAQ,iBAAiB;IAC3B;IAEA;;;GAGC,GAED,SAAS,sBAAsB,KAAK;QAClC,MAAM,QAAQ,IAAI,CAAC;QACnB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,2EAA2E;QAC3E,SAAS;QACT,KAAK,QAAQ;QACb,mCAAmC;QACnC,KAAK,aAAa,CAAA,GAAA,0BAAkB,EAClC,IAAI,CAAC,eAAe,QACpB;QACF,QAAQ,iBAAiB;IAC3B;IAEA;;;GAGC,GAED,SAAS,+BAA+B,KAAK;QAC3C,QAAQ,0BAA0B,MAAM;IAC1C;IAEA;;;GAGC,GACD,SAAS,8BAA8B,KAAK;QAC1C,MAAM,OAAO,IAAI,CAAC,eAAe;QACjC,MAAM,OAAO,QAAQ;QACrB,mBAAmB,GACnB,IAAI;QACJ,IAAI,MAAM;YACR,QAAQ,CAAA,GAAA,sCAA8B,EACpC,MACA,SAAS,oCAAoC,KAAK;YAEpD,QAAQ;QACV,OAAO;YACL,MAAM,SAAS,CAAA,GAAA,oCAA4B,EAAE;YAC7C,QAAQ;QACV;QACA,MAAM,OAAO,IAAI,CAAC,MAAM;QACxB,KAAK,SAAS;QACd,KAAK,SAAS,MAAM,4BAAM,MAAM;IAClC;IAEA;;;GAGC,GACD,SAAS,uBAAuB,KAAK;QACnC,WAAW,KAAK,IAAI,EAAE;QACtB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,KAAK,MAAM,IAAI,CAAC,eAAe;IACjC;IAEA;;;GAGC,GACD,SAAS,oBAAoB,KAAK;QAChC,WAAW,KAAK,IAAI,EAAE;QACtB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,SAAS,EAAE;QAC9C,KAAK,MAAM,YAAY,IAAI,CAAC,eAAe;IAC7C;IAEA,EAAE;IACF,YAAY;IACZ,EAAE;IAEF,0BAA0B,GAC1B,SAAS;QACP,OAAO;YACL,MAAM;YACN,UAAU,EAAE;QACd;IACF;IAEA,oBAAoB,GACpB,SAAS;QACP,OAAO;YACL,MAAM;YACN,MAAM;YACN,MAAM;YACN,OAAO;QACT;IACF;IAEA,0BAA0B,GAC1B,SAAS;QACP,OAAO;YACL,MAAM;YACN,OAAO;QACT;IACF;IAEA,0BAA0B,GAC1B,SAAS;QACP,OAAO;YACL,MAAM;YACN,YAAY;YACZ,OAAO;YACP,OAAO;YACP,KAAK;QACP;IACF;IAEA,wBAAwB,GACxB,SAAS;QACP,OAAO;YACL,MAAM;YACN,UAAU,EAAE;QACd;IACF;IAEA,uBAAuB,GACvB,SAAS;QACP,8CAA8C;QAC9C,OAAO;YACL,MAAM;YACN,OAAO;YACP,UAAU,EAAE;QACd;IACF;IAEA,qBAAqB,GACrB,SAAS;QACP,OAAO;YACL,MAAM;QACR;IACF;IAEA,oBAAoB,GACpB,SAAS;QACP,OAAO;YACL,MAAM;YACN,OAAO;QACT;IACF;IAEA,qBAAqB,GACrB,SAAS;QACP,OAAO;YACL,MAAM;YACN,OAAO;YACP,KAAK;YACL,KAAK;QACP;IACF;IAEA,oBAAoB,GACpB,SAAS;QACP,OAAO;YACL,MAAM;YACN,OAAO;YACP,KAAK;YACL,UAAU,EAAE;QACd;IACF;IAEA;;;GAGC,GACD,SAAS,KAAK,KAAK;QACjB,OAAO;YACL,MAAM;YACN,SAAS,MAAM,SAAS;YACxB,OAAO;YACP,QAAQ,MAAM;YACd,UAAU,EAAE;QACd;IACF;IAEA;;;GAGC,GACD,SAAS,SAAS,KAAK;QACrB,OAAO;YACL,MAAM;YACN,QAAQ,MAAM;YACd,SAAS;YACT,UAAU,EAAE;QACd;IACF;IAEA,yBAAyB,GACzB,SAAS;QACP,OAAO;YACL,MAAM;YACN,UAAU,EAAE;QACd;IACF;IAEA,sBAAsB,GACtB,SAAS;QACP,OAAO;YACL,MAAM;YACN,UAAU,EAAE;QACd;IACF;IAEA,oBAAoB,GACpB,SAAS;QACP,OAAO;YACL,MAAM;YACN,OAAO;QACT;IACF;IAEA,6BAA6B,GAC7B,SAAS;QACP,OAAO;YACL,MAAM;QACR;IACF;AACF;AAEA;;;;;;;CAOC,GACD,SAAS,4BAAM,CAAC;IACd,OAAO;QACL,MAAM,EAAE;QACR,QAAQ,EAAE;QACV,QAAQ,EAAE;IACZ;AACF;AAEA;;;;CAIC,GACD,SAAS,gCAAU,QAAQ,EAAE,UAAU;IACrC,IAAI,QAAQ;IACZ,MAAO,EAAE,QAAQ,WAAW,OAAQ;QAClC,MAAM,QAAQ,UAAU,CAAC,MAAM;QAC/B,IAAI,MAAM,QAAQ,QAChB,gCAAU,UAAU;aAEpB,gCAAU,UAAU;IAExB;AACF;AAEA;;;;CAIC,GACD,SAAS,gCAAU,QAAQ,EAAE,SAAS;IACpC,4BAA4B,GAC5B,IAAI;IACJ,IAAK,OAAO,UACV,IAAI,0BAAI,KAAK,WAAW,MAAM;QAC5B,IAAI,QAAQ,kBAAkB;YAC5B,MAAM,QAAQ,SAAS,CAAC,IAAI;YAC5B,IAAI,OACF,QAAQ,CAAC,IAAI,CAAC,QAAQ;QAE1B,OAAO,IAAI,QAAQ,cAAc;YAC/B,MAAM,QAAQ,SAAS,CAAC,IAAI;YAC5B,IAAI,OACF,QAAQ,CAAC,IAAI,CAAC,QAAQ;QAE1B,OAAO,IAAI,QAAQ,WAAW,QAAQ,QAAQ;YAC5C,MAAM,QAAQ,SAAS,CAAC,IAAI;YAC5B,IAAI,OACF,OAAO,OAAO,QAAQ,CAAC,IAAI,EAAE;QAEjC;IACF;AAEJ;AAEA,yBAAyB,GACzB,SAAS,qCAAe,IAAI,EAAE,KAAK;IACjC,IAAI,MACF,MAAM,IAAI,MACR,mBACE,KAAK,OACL,QACA,CAAA,GAAA,wBAAgB,EAAE;QAChB,OAAO,KAAK;QACZ,KAAK,KAAK;IACZ,KACA,4BACA,MAAM,OACN,QACA,CAAA,GAAA,wBAAgB,EAAE;QAChB,OAAO,MAAM;QACb,KAAK,MAAM;IACb,KACA;SAGJ,MAAM,IAAI,MACR,sCACE,MAAM,OACN,QACA,CAAA,GAAA,wBAAgB,EAAE;QAChB,OAAO,MAAM;QACb,KAAK,MAAM;IACb,KACA;AAGR;;;;;;ACt2CA;;;;;;;;;CASC,GAED,oBAAoB,GACpB,MAAM,qCAAe,CAAC;AAef,SAAS,0CAAS,KAAK,EAAE,OAAO;IACrC,MAAM,WAAW,WAAW;IAC5B,MAAM,kBACJ,OAAO,SAAS,oBAAoB,YAChC,SAAS,kBACT;IACN,MAAM,cACJ,OAAO,SAAS,gBAAgB,YAAY,SAAS,cAAc;IAErE,OAAO,0BAAI,OAAO,iBAAiB;AACrC;AAEA;;;;;;;;;;;CAWC,GACD,SAAS,0BAAI,KAAK,EAAE,eAAe,EAAE,WAAW;IAC9C,IAAI,2BAAK,QAAQ;QACf,IAAI,WAAW,OACb,OAAO,MAAM,SAAS,UAAU,CAAC,cAAc,KAAK,MAAM;QAG5D,IAAI,mBAAmB,SAAS,SAAS,MAAM,KAC7C,OAAO,MAAM;QAGf,IAAI,cAAc,OAChB,OAAO,0BAAI,MAAM,UAAU,iBAAiB;IAEhD;IAEA,IAAI,MAAM,QAAQ,QAChB,OAAO,0BAAI,OAAO,iBAAiB;IAGrC,OAAO;AACT;AAEA;;;;;;;;;;;CAWC,GACD,SAAS,0BAAI,MAAM,EAAE,eAAe,EAAE,WAAW;IAC/C,0BAA0B,GAC1B,MAAM,SAAS,EAAE;IACjB,IAAI,QAAQ;IAEZ,MAAO,EAAE,QAAQ,OAAO,OACtB,MAAM,CAAC,MAAM,GAAG,0BAAI,MAAM,CAAC,MAAM,EAAE,iBAAiB;IAGtD,OAAO,OAAO,KAAK;AACrB;AAEA;;;;;;;CAOC,GACD,SAAS,2BAAK,KAAK;IACjB,OAAO,QAAQ,SAAS,OAAO,UAAU;AAC3C;;;;;;;AC3GA;;;;;;;CAMC;;;;;;;;;;;;;AAcM,SAAS,0CAAM,OAAO;IAC3B,MAAM,WAAW,WAAW,CAAC;IAC7B,MAAM,aACJ,oCAAoC,GACpC,CAAA,GAAA,wBAAgB,EAAE;QAAC;WAAuB,SAAS,cAAc,EAAE;KAAE;IAEvE,yBAAyB,GACzB,MAAM,SAAS;QACb,SAAS,EAAE;QACX,MAAM,CAAC;oBACP;QACA,SAAS,OAAO,CAAA,GAAA,cAAM;QACtB,UAAU,OAAO,CAAA,GAAA,eAAO;QACxB,MAAM,OAAO,CAAA,GAAA,WAAG;QAChB,QAAQ,OAAO,CAAA,GAAA,aAAK;QACpB,MAAM,OAAO,CAAA,GAAA,WAAG;IAClB;IACA,OAAO;IAEP;;GAEC,GACD,SAAS,OAAO,OAAO;QACrB,OAAO;QACP,mBAAmB,GACnB,SAAS,QAAQ,IAAI;YACnB,OAAO,CAAA,GAAA,sBAAc,EAAE,QAAQ,SAAS;QAC1C;IACF;AACF;;;;;;ACjDA;;;;;;CAKC;AAID,MAAM,uCAAiB,CAAC,EAAE;AAUnB,SAAS,0CAAkB,UAAU;IAC1C,gCAAgC,GAChC,MAAM,MAAM,CAAC;IACb,IAAI,QAAQ;IAEZ,MAAO,EAAE,QAAQ,WAAW,OAC1B,sCAAgB,KAAK,UAAU,CAAC,MAAM;IAGxC,OAAO;AACT;AAEA;;;;;;;;CAQC,GACD,SAAS,sCAAgB,GAAG,EAAE,SAAS;IACrC,4BAA4B,GAC5B,IAAI;IAEJ,IAAK,QAAQ,UAAW;QACtB,MAAM,QAAQ,qCAAe,KAAK,KAAK,QAAQ,GAAG,CAAC,KAAK,GAAG;QAC3D,oCAAoC,GACpC,MAAM,OAAO,SAAU,CAAA,GAAG,CAAC,KAAK,GAAG,CAAC,CAAA;QACpC,gDAAgD,GAChD,MAAM,QAAQ,SAAS,CAAC,KAAK;QAC7B,mBAAmB,GACnB,IAAI;QAEJ,IAAI,OACF,IAAK,QAAQ,MAAO;YAClB,IAAI,CAAC,qCAAe,KAAK,MAAM,OAAO,IAAI,CAAC,KAAK,GAAG,EAAE;YACrD,MAAM,QAAQ,KAAK,CAAC,KAAK;YACzB,iCACE,sCAAsC;YACtC,IAAI,CAAC,KAAK,EACV,MAAM,QAAQ,SAAS,QAAQ,QAAQ;gBAAC;aAAM,GAAG,EAAE;QAEvD;IAEJ;AACF;AAEA;;;;;;;CAOC,GACD,SAAS,iCAAW,QAAQ,EAAE,IAAI;IAChC,IAAI,QAAQ;IACZ,2BAA2B,GAC3B,MAAM,SAAS,EAAE;IAEjB,MAAO,EAAE,QAAQ,KAAK,OAEnB,AAAC,CAAA,IAAI,CAAC,MAAM,CAAC,QAAQ,UAAU,WAAW,MAAK,EAAG,KAAK,IAAI,CAAC,MAAM;IAGrE,CAAA,GAAA,aAAK,EAAE,UAAU,GAAG,GAAG;AACzB;AAUO,SAAS,0CAAsB,cAAc;IAClD,0BAA0B,GAC1B,MAAM,WAAW,CAAC;IAClB,IAAI,QAAQ;IAEZ,MAAO,EAAE,QAAQ,eAAe,OAC9B,oCAAc,UAAU,cAAc,CAAC,MAAM;IAG/C,OAAO;AACT;AAEA;;;;;;;;CAQC,GACD,SAAS,oCAAc,GAAG,EAAE,SAAS;IACnC,gCAAgC,GAChC,IAAI;IAEJ,IAAK,QAAQ,UAAW;QACtB,MAAM,QAAQ,qCAAe,KAAK,KAAK,QAAQ,GAAG,CAAC,KAAK,GAAG;QAC3D,MAAM,OAAO,SAAU,CAAA,GAAG,CAAC,KAAK,GAAG,CAAC,CAAA;QACpC,MAAM,QAAQ,SAAS,CAAC,KAAK;QAC7B,0BAA0B,GAC1B,IAAI;QAEJ,IAAI,OACF,IAAK,QAAQ,MACX,6EAA6E;QAC7E,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK;IAG9B;AACF;;;;;;;ACvIA;;;;;;;;;;;;;;;;;;;;;CAqBC,GACM,SAAS,0CAAO,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK;IAC/C,MAAM,MAAM,KAAK;IACjB,IAAI,aAAa;IACjB,2BAA2B,GAC3B,IAAI;IAEJ,gDAAgD;IAChD,IAAI,QAAQ,GACV,QAAQ,CAAC,QAAQ,MAAM,IAAI,MAAM;SAEjC,QAAQ,QAAQ,MAAM,MAAM;IAE9B,SAAS,SAAS,IAAI,SAAS;IAE/B,mEAAmE;IACnE,IAAI,MAAM,SAAS,OAAO;QACxB,aAAa,MAAM,KAAK;QACxB,WAAW,QAAQ,OAAO;QAC1B,oCAAoC;QACpC,KAAK,UAAU;IACjB,OAAO;QACL,8CAA8C;QAC9C,IAAI,QAAQ,KAAK,OAAO,OAAO;QAE/B,2DAA2D;QAC3D,MAAO,aAAa,MAAM,OAAQ;YAChC,aAAa,MAAM,MAAM,YAAY,aAAa;YAClD,WAAW,QAAQ,OAAO;YAC1B,oCAAoC;YACpC,KAAK,UAAU;YACf,cAAc;YACd,SAAS;QACX;IACF;AACF;AAkBO,SAAS,yCAAK,IAAI,EAAE,KAAK;IAC9B,IAAI,KAAK,SAAS,GAAG;QACnB,0CAAO,MAAM,KAAK,QAAQ,GAAG;QAC7B,OAAO;IACT;IACA,OAAO;AACT;;;;;;;;AChFA;;;;;;;CAMC;;;AAKM,MAAM,4CAAU;IACrB,UAAU;AACZ;AAEA;;;CAGC,GACD,SAAS,wCAAkB,OAAO;IAChC,MAAM,eAAe,QAAQ,QAC3B,IAAI,CAAC,OAAO,WAAW,gBACvB,4BACA;IAEF,kBAAkB,GAClB,IAAI;IACJ,OAAO;IAEP,kBAAkB,GAClB,SAAS,2BAA2B,IAAI;QACtC,IAAI,SAAS,MAAM;YACjB,QAAQ,QAAQ;YAChB;QACF;QACA,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,OAAO,CAAA,GAAA,mBAAW,EAAE,SAAS,cAAc;IAC7C;IAEA,kBAAkB,GAClB,SAAS,iBAAiB,IAAI;QAC5B,QAAQ,MAAM;QACd,OAAO,UAAU;IACnB;IAEA,kBAAkB,GAClB,SAAS,UAAU,IAAI;QACrB,MAAM,QAAQ,QAAQ,MAAM,aAAa;YACvC,aAAa;sBACb;QACF;QACA,IAAI,UACF,SAAS,OAAO;QAElB,WAAW;QACX,OAAO,KAAK;IACd;IAEA,kBAAkB,GAClB,SAAS,KAAK,IAAI;QAChB,IAAI,SAAS,MAAM;YACjB,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,QAAQ,QAAQ;YAChB;QACF;QACA,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,OAAO;QACT;QAEA,QAAQ;QACR,QAAQ,QAAQ;QAChB,OAAO;IACT;AACF;;;;;;AC9EA;;;;;CAIC;AAsCM,SAAS,0CAAa,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG;IACjD,MAAM,QAAQ,MAAM,MAAM,IAAI,OAAO;IACrC,IAAI,OAAO;IACX,OAAO;IAEP,kBAAkB,GAClB,SAAS,MAAM,IAAI;QACjB,IAAI,CAAA,GAAA,oBAAY,EAAE,OAAO;YACvB,QAAQ,MAAM;YACd,OAAO,OAAO;QAChB;QACA,OAAO,GAAG;IACZ;IAEA,kBAAkB,GAClB,SAAS,OAAO,IAAI;QAClB,IAAI,CAAA,GAAA,oBAAY,EAAE,SAAS,SAAS,OAAO;YACzC,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,QAAQ,KAAK;QACb,OAAO,GAAG;IACZ;AACF;;;;;;;;;;;;;;;;;ACjEA;;;CAEC;AAqBM,MAAM,4CAAa,iCAAW;AAc9B,MAAM,4CAAoB,iCAAW;AAuBrC,MAAM,4CAAa,iCAAW;AAa9B,SAAS,0CAAa,IAAI;IAC/B,OACE,wEAAwE;IACxE,gBAAgB;IAChB,SAAS,QAAS,CAAA,OAAO,MAAM,SAAS,GAAE;AAE9C;AAaO,MAAM,4CAAa,iCAAW;AAoB9B,MAAM,4CAAgB,iCAAW;AAejC,MAAM,4CAAmB,iCAAW;AAiBpC,SAAS,0CAAmB,IAAI;IACrC,OAAO,SAAS,QAAQ,OAAO;AACjC;AAWO,SAAS,0CAA0B,IAAI;IAC5C,OAAO,SAAS,QAAS,CAAA,OAAO,KAAK,SAAS,EAAC;AACjD;AAiBO,SAAS,0CAAc,IAAI;IAChC,OAAO,SAAS,MAAM,SAAS,MAAM,SAAS;AAChD;AAuBO,MAAM,4CAAqB,iCAAW,CAAA,GAAA,8BAAsB;AAsB5D,MAAM,4CAAoB,iCAAW;AAE5C;;;;;CAKC,GACD,SAAS,iCAAW,KAAK;IACvB,OAAO;IAEP;;;;;;;GAOC,GACD,SAAS,MAAM,IAAI;QACjB,OAAO,SAAS,QAAQ,MAAM,KAAK,OAAO,aAAa;IACzD;AACF;;;;;;ACrPA,yCAAyC;AACzC,EAAE;AACF,8EAA8E;AAC9E,wBAAwB;AACxB,sEAAsE;AACtE,kDAAkD;AAElD;;CAEC,GACM,MAAM,4CACX;;;;;;;;;;ACXF;;;;;;;;;;CAUC,GAED;;;CAEC;;;;;AAMM,MAAM,4CAAW;IACtB,UAAU;AACZ;AAEA,sBAAsB,GACtB,MAAM,2CAAqB;IACzB,UAAU;AACZ;AAEA;;;CAGC,GACD,SAAS,yCAAmB,OAAO;IACjC,MAAM,OAAO,IAAI;IACjB,6BAA6B,GAC7B,MAAM,QAAQ,EAAE;IAChB,IAAI,YAAY;IAChB,wCAAwC,GACxC,IAAI;IACJ,8BAA8B,GAC9B,IAAI;IACJ,mBAAmB,GACnB,IAAI;IACJ,OAAO;IAEP,kBAAkB,GAClB,SAAS,MAAM,IAAI;QACjB,mEAAmE;QACnE,uEAAuE;QACvE,SAAS;QACT,4EAA4E;QAC5E,kBAAkB;QAClB,uDAAuD;QACvD,yCAAyC;QACzC,kEAAkE;QAClE,uEAAuE;QACvE,qBAAqB;QACrB,IAAI,YAAY,MAAM,QAAQ;YAC5B,MAAM,OAAO,KAAK,CAAC,UAAU;YAC7B,KAAK,iBAAiB,IAAI,CAAC,EAAE;YAC7B,OAAO,QAAQ,QACb,IAAI,CAAC,EAAE,CAAC,cACR,kBACA,oBACA;QACJ;QAEA,QAAQ;QACR,OAAO,mBAAmB;IAC5B;IAEA,kBAAkB,GAClB,SAAS,iBAAiB,IAAI;QAC5B;QAEA,yEAAyE;QACzE,wEAAwE;QACxE,cAAc;QACd,IAAI,KAAK,eAAe,YAAY;YAClC,KAAK,eAAe,aAAa;YACjC,IAAI,WACF;YAGF,kEAAkE;YAClE,4DAA4D;YAC5D,MAAM,mBAAmB,KAAK,OAAO;YACrC,IAAI,kBAAkB;YACtB,8BAA8B,GAC9B,IAAI;YAEJ,uBAAuB;YACvB,MAAO,kBACL,IACE,KAAK,MAAM,CAAC,gBAAgB,CAAC,EAAE,KAAK,UACpC,KAAK,MAAM,CAAC,gBAAgB,CAAC,EAAE,CAAC,SAAS,aACzC;gBACA,QAAQ,KAAK,MAAM,CAAC,gBAAgB,CAAC,EAAE,CAAC;gBACxC;YACF;YAEF,eAAe;YAEf,iBAAiB;YACjB,IAAI,QAAQ;YACZ,MAAO,QAAQ,KAAK,OAAO,OAAQ;gBACjC,KAAK,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,OAAO,OAAO,CAAC,GAAG;gBAC9C;YACF;YAEA,4DAA4D;YAC5D,CAAA,GAAA,aAAK,EACH,KAAK,QACL,kBAAkB,GAClB,GACA,KAAK,OAAO,MAAM;YAGpB,+BAA+B;YAC/B,KAAK,OAAO,SAAS;YACrB,OAAO,mBAAmB;QAC5B;QACA,OAAO,MAAM;IACf;IAEA,kBAAkB,GAClB,SAAS,mBAAmB,IAAI;QAC9B,yEAAyE;QACzE,0DAA0D;QAC1D,sEAAsE;QACtE,sEAAsE;QACtE,SAAS;QACT,IAAI,cAAc,MAAM,QAAQ;YAC9B,sEAAsE;YACtE,iBAAiB;YACjB,qDAAqD;YACrD,IAAI,CAAC,WACH,OAAO,kBAAkB;YAG3B,kEAAkE;YAClE,qEAAqE;YACrE,SAAS;YACT,IAAI,UAAU,oBAAoB,UAAU,iBAAiB,UAC3D,OAAO,UAAU;YAGnB,sDAAsD;YACtD,sEAAsE;YACtE,aAAa;YACb,uEAAuE;YACvE,kDAAkD;YAClD,KAAK,YAAY,QACf,UAAU,oBAAoB,CAAC,UAAU;QAE7C;QAEA,qCAAqC;QACrC,KAAK,iBAAiB,CAAC;QACvB,OAAO,QAAQ,MACb,0CACA,sBACA,uBACA;IACJ;IAEA,kBAAkB,GAClB,SAAS,qBAAqB,IAAI;QAChC,IAAI,WAAW;QACf,eAAe;QACf,OAAO,kBAAkB;IAC3B;IAEA,kBAAkB,GAClB,SAAS,sBAAsB,IAAI;QACjC,KAAK,OAAO,IAAI,CAAC,KAAK,MAAM,KAAK,GAAG,cAAc,MAAM;QACxD,kBAAkB,KAAK,MAAM;QAC7B,OAAO,UAAU;IACnB;IAEA,kBAAkB,GAClB,SAAS,kBAAkB,IAAI;QAC7B,sBAAsB;QACtB,KAAK,iBAAiB,CAAC;QACvB,OAAO,QAAQ,QACb,0CACA,mBACA,WACA;IACJ;IAEA,kBAAkB,GAClB,SAAS,kBAAkB,IAAI;QAC7B;QACA,MAAM,KAAK;YAAC,KAAK;YAAkB,KAAK;SAAe;QACvD,eAAe;QACf,OAAO,kBAAkB;IAC3B;IAEA,kBAAkB,GAClB,SAAS,UAAU,IAAI;QACrB,IAAI,SAAS,MAAM;YACjB,IAAI,WAAW;YACf,eAAe;YACf,QAAQ,QAAQ;YAChB;QACF;QACA,YAAY,aAAa,KAAK,OAAO,KAAK,KAAK;QAC/C,QAAQ,MAAM,aAAa;YACzB,aAAa;YACb,UAAU;YACV,YAAY;QACd;QACA,OAAO,aAAa;IACtB;IAEA,kBAAkB,GAClB,SAAS,aAAa,IAAI;QACxB,IAAI,SAAS,MAAM;YACjB,aAAa,QAAQ,KAAK,cAAc;YACxC,eAAe;YACf,QAAQ,QAAQ;YAChB;QACF;QACA,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,QAAQ,QAAQ;YAChB,aAAa,QAAQ,KAAK;YAC1B,+BAA+B;YAC/B,YAAY;YACZ,KAAK,YAAY;YACjB,OAAO;QACT;QACA,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;GAIC,GACD,SAAS,aAAa,KAAK,EAAE,GAAG;QAC9B,MAAM,SAAS,KAAK,YAAY;QAChC,IAAI,KAAK,OAAO,KAAK;QACrB,MAAM,WAAW;QACjB,IAAI,YAAY,WAAW,OAAO;QAClC,aAAa;QACb,UAAU,WAAW,MAAM;QAC3B,UAAU,MAAM;QAEhB,yCAAyC;QACzC,EAAE;QACF,cAAc;QACd,MAAM;QACN,KAAK;QACL,EAAE;QACF,MAAM;QACN,EAAE;QACF,SAAS;QACT,IAAI;QACJ,EAAE;QACF,MAAM;QACN,EAAE;QACF,UAAU;QACV,IAAI;QACJ,MAAM;QACN,EAAE;QACF,yEAAyE;QACzE,uEAAuE;QACvE,yCAAyC;QACzC,yEAAyE;QACzE,wDAAwD;QACxD,EAAE;QACF,qEAAqE;QACrE,qBAAqB;QACrB,oEAAoE;QACpE,uBAAuB;QACvB,yEAAyE;QACzE,8CAA8C;QAC9C,EAAE;QACF,sEAAsE;QACtE,kDAAkD;QAClD,yEAAyE;QACzE,IAAI,KAAK,OAAO,IAAI,CAAC,MAAM,MAAM,KAAK,EAAE;YACtC,IAAI,QAAQ,UAAU,OAAO;YAC7B,MAAO,QAAS;gBACd,IACE,2CAA2C;gBAC3C,UAAU,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,SAAS,mBAC1C,gCAAgC;gBAC/B,CAAA,CAAC,UAAU,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,OAC3B,qBAAqB;gBACrB,UAAU,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,SAAS,eAAc,GAExD,mEAAmE;gBACnE,qBAAqB;gBACrB;YAEJ;YAEA,kEAAkE;YAClE,qDAAqD;YACrD,MAAM,mBAAmB,KAAK,OAAO;YACrC,IAAI,kBAAkB;YACtB,gCAAgC,GAChC,IAAI;YACJ,8BAA8B,GAC9B,IAAI;YAEJ,0DAA0D;YAC1D,MAAO,kBACL,IACE,KAAK,MAAM,CAAC,gBAAgB,CAAC,EAAE,KAAK,UACpC,KAAK,MAAM,CAAC,gBAAgB,CAAC,EAAE,CAAC,SAAS,aACzC;gBACA,IAAI,MAAM;oBACR,QAAQ,KAAK,MAAM,CAAC,gBAAgB,CAAC,EAAE,CAAC;oBACxC;gBACF;gBACA,OAAO;YACT;YAEF,eAAe;YAEf,iBAAiB;YACjB,QAAQ;YACR,MAAO,QAAQ,KAAK,OAAO,OAAQ;gBACjC,KAAK,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,OAAO,OAAO,CAAC,GAAG;gBAC9C;YACF;YAEA,4DAA4D;YAC5D,CAAA,GAAA,aAAK,EACH,KAAK,QACL,kBAAkB,GAClB,GACA,KAAK,OAAO,MAAM;YAGpB,+BAA+B;YAC/B,KAAK,OAAO,SAAS;QACvB;IACF;IAEA;;;GAGC,GACD,SAAS,eAAe,IAAI;QAC1B,IAAI,QAAQ,MAAM;QAElB,wBAAwB;QACxB,MAAO,UAAU,KAAM;YACrB,MAAM,QAAQ,KAAK,CAAC,MAAM;YAC1B,KAAK,iBAAiB,KAAK,CAAC,EAAE;YAC9B,KAAK,CAAC,EAAE,CAAC,KAAK,KAAK,MAAM;QAC3B;QACA,MAAM,SAAS;IACjB;IACA,SAAS;QACP,UAAU,MAAM;YAAC;SAAK;QACtB,aAAa;QACb,YAAY;QACZ,KAAK,eAAe,aAAa;IACnC;AACF;AAEA;;;CAGC,GACD,SAAS,wCAAkB,OAAO,EAAE,EAAE,EAAE,GAAG;IACzC,gCAAgC;IAEhC,OAAO,CAAA,GAAA,mBAAW,EAChB,SACA,QAAQ,QAAQ,IAAI,CAAC,OAAO,WAAW,UAAU,IAAI,MACrD,cACA,IAAI,CAAC,OAAO,WAAW,QAAQ,KAAK,SAAS,kBAAkB,YAAY;AAE/E;;;;;;;AC7XA;;;;;;;CAKC;;;;AAMM,MAAM,4CAAO;IAClB,UAAU;AACZ;AAEA;;;CAGC,GACD,SAAS,qCAAe,OAAO;IAC7B,MAAM,OAAO,IAAI;IACjB,MAAM,UAAU,QAAQ,QACtB,6BAA6B;IAC7B,CAAA,GAAA,gBAAQ,GACR,eACA,sDAAsD;IACtD,QAAQ,QACN,IAAI,CAAC,OAAO,WAAW,aACvB,gBACA,CAAA,GAAA,mBAAW,EACT,SACA,QAAQ,QACN,IAAI,CAAC,OAAO,WAAW,MACvB,gBACA,QAAQ,QAAQ,CAAA,GAAA,cAAM,GAAG,kBAE3B;IAIN,OAAO;IAEP,kBAAkB,GAClB,SAAS,cAAc,IAAI;QACzB,IAAI,SAAS,MAAM;YACjB,QAAQ,QAAQ;YAChB;QACF;QACA,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,KAAK,mBAAmB;QACxB,OAAO;IACT;IAEA,kBAAkB,GAClB,SAAS,eAAe,IAAI;QAC1B,IAAI,SAAS,MAAM;YACjB,QAAQ,QAAQ;YAChB;QACF;QACA,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,KAAK,mBAAmB;QACxB,OAAO;IACT;AACF;;;;;;ACnEA;;;;;;CAKC;;;AAKM,MAAM,4CAAY;IACvB,UAAU;IACV,SAAS;AACX;AAEA;;;CAGC,GACD,SAAS,wCAAkB,OAAO,EAAE,EAAE,EAAE,GAAG;IACzC,OAAO;IAEP;;;;;;;;;;;;;GAaC,GACD,SAAS,MAAM,IAAI;QACjB,OAAO,CAAA,GAAA,oBAAY,EAAE,QACjB,CAAA,GAAA,mBAAW,EAAE,SAAS,OAAO,cAAc,QAC3C,MAAM;IACZ;IAEA;;;;;;;;;;;;;GAaC,GACD,SAAS,MAAM,IAAI;QACjB,OAAO,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,QAAQ,GAAG,QAAQ,IAAI;IACpE;AACF;;;;;;;AC3DA;;;;;;;;CAOC;;;;;AASM,MAAM,4CAAU;IACrB,UAAU;IACV,SAAS;AACX;AAEA,sBAAsB,GACtB,MAAM,8CAAwB;IAC5B,UAAU;IACV,SAAS;AACX;AAEA;;;;;CAKC,GACD,SAAS,qCAAe,MAAM;IAC5B,CAAA,GAAA,kBAAU,EAAE;IACZ,OAAO;AACT;AAEA;;;CAGC,GACD,SAAS,sCAAgB,OAAO,EAAE,EAAE;IAClC,8BAA8B,GAC9B,IAAI;IACJ,OAAO;IAEP;;;;;;;;;GASC,GACD,SAAS,WAAW,IAAI;QACtB,QAAQ,MAAM;QACd,WAAW,QAAQ,MAAM,gBAAgB;YACvC,aAAa;QACf;QACA,OAAO,YAAY;IACrB;IAEA;;;;;;;;;GASC,GACD,SAAS,YAAY,IAAI;QACvB,IAAI,SAAS,MACX,OAAO,WAAW;QAGpB,0EAA0E;QAC1E,kCAAkC;QAClC,IAAI,CAAA,GAAA,yBAAiB,EAAE,OACrB,OAAO,QAAQ,MACb,6CACA,iBACA,YACA;QAGJ,QAAQ;QACR,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;GAIC,GACD,SAAS,WAAW,IAAI;QACtB,QAAQ,KAAK;QACb,QAAQ,KAAK;QACb,OAAO,GAAG;IACZ;IAEA;;;;GAIC,GACD,SAAS,gBAAgB,IAAI;QAC3B,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,SAAS,OAAO,QAAQ,MAAM,gBAAgB;YAC5C,aAAa;sBACb;QACF;QACA,WAAW,SAAS;QACpB,OAAO;IACT;AACF;AAEA;;;CAGC,GACD,SAAS,2CAAqB,OAAO,EAAE,EAAE,EAAE,GAAG;IAC5C,MAAM,OAAO,IAAI;IACjB,OAAO;IAEP;;;;GAIC,GACD,SAAS,eAAe,IAAI;QAC1B,QAAQ,KAAK;QACb,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,OAAO,CAAA,GAAA,mBAAW,EAAE,SAAS,UAAU;IACzC;IAEA;;;;GAIC,GACD,SAAS,SAAS,IAAI;QACpB,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OACtC,OAAO,IAAI;QAGb,gCAAgC;QAEhC,MAAM,OAAO,KAAK,MAAM,CAAC,KAAK,OAAO,SAAS,EAAE;QAChD,IACE,CAAC,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,mBAC9C,QACA,IAAI,CAAC,EAAE,CAAC,SAAS,gBACjB,IAAI,CAAC,EAAE,CAAC,eAAe,IAAI,CAAC,EAAE,EAAE,MAAM,UAAU,GAEhD,OAAO,GAAG;QAEZ,OAAO,QAAQ,UAAU,KAAK,OAAO,WAAW,MAAM,KAAK,IAAI;IACjE;AACF;;;;;;ACvKA;;;;;CAIC;AAWM,SAAS,0CAAY,MAAM;IAChC,mCAAmC,GACnC,MAAM,QAAQ,CAAC;IACf,IAAI,QAAQ;IACZ,kBAAkB,GAClB,IAAI;IACJ,+BAA+B,GAC/B,IAAI;IACJ,mBAAmB,GACnB,IAAI;IACJ,kBAAkB,GAClB,IAAI;IACJ,yBAAyB,GACzB,IAAI;IACJ,yBAAyB,GACzB,IAAI;IACJ,gCAAgC,GAChC,IAAI;IACJ,MAAO,EAAE,QAAQ,OAAO,OAAQ;QAC9B,MAAO,SAAS,MACd,QAAQ,KAAK,CAAC,MAAM;QAEtB,QAAQ,MAAM,CAAC,MAAM;QAErB,yEAAyE;QACzE,0CAA0C;QAC1C,IACE,SACA,KAAK,CAAC,EAAE,CAAC,SAAS,eAClB,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,SAAS,kBAC9B;YACA,YAAY,KAAK,CAAC,EAAE,CAAC,WAAW;YAChC,aAAa;YACb,IACE,aAAa,UAAU,UACvB,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,mBAElC,cAAc;YAEhB,IACE,aAAa,UAAU,UACvB,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,WAElC,MAAO,EAAE,aAAa,UAAU,OAAQ;gBACtC,IAAI,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,WACpC;gBAEF,IAAI,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,aAAa;oBACjD,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,8BAA8B;oBACvD;gBACF;YACF;QAEJ;QAEA,SAAS;QACT,IAAI,KAAK,CAAC,EAAE,KAAK,SACf;YAAA,IAAI,KAAK,CAAC,EAAE,CAAC,aAAa;gBACxB,OAAO,OAAO,OAAO,iCAAW,QAAQ;gBACxC,QAAQ,KAAK,CAAC,MAAM;gBACpB,OAAO;YACT;QAAA,OAGG,IAAI,KAAK,CAAC,EAAE,CAAC,YAAY;YAC5B,aAAa;YACb,YAAY;YACZ,MAAO,aAAc;gBACnB,aAAa,MAAM,CAAC,WAAW;gBAC/B,IACE,UAAU,CAAC,EAAE,CAAC,SAAS,gBACvB,UAAU,CAAC,EAAE,CAAC,SAAS,mBAEvB;oBAAA,IAAI,UAAU,CAAC,EAAE,KAAK,SAAS;wBAC7B,IAAI,WACF,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO;wBAE9B,UAAU,CAAC,EAAE,CAAC,OAAO;wBACrB,YAAY;oBACd;gBAAA,OAEA;YAEJ;YACA,IAAI,WAAW;gBACb,gBAAgB;gBAChB,KAAK,CAAC,EAAE,CAAC,MAAM,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;gBAEtD,yCAAyC;gBACzC,aAAa,OAAO,MAAM,WAAW;gBACrC,WAAW,QAAQ;gBACnB,CAAA,GAAA,aAAK,EAAE,QAAQ,WAAW,QAAQ,YAAY,GAAG;YACnD;QACF;IACF;IACA,OAAO,CAAC;AACV;AAEA;;;;;;CAMC,GACD,SAAS,iCAAW,MAAM,EAAE,UAAU;IACpC,MAAM,QAAQ,MAAM,CAAC,WAAW,CAAC,EAAE;IACnC,MAAM,UAAU,MAAM,CAAC,WAAW,CAAC,EAAE;IACrC,IAAI,gBAAgB,aAAa;IACjC,0BAA0B,GAC1B,MAAM,iBAAiB,EAAE;IACzB,MAAM,YACJ,MAAM,cAAc,QAAQ,MAAM,CAAC,MAAM,YAAY,CAAC,MAAM;IAC9D,MAAM,cAAc,UAAU;IAC9B,oCAAoC,GACpC,MAAM,QAAQ,EAAE;IAChB,mCAAmC,GACnC,MAAM,OAAO,CAAC;IACd,yBAAyB,GACzB,IAAI;IACJ,8BAA8B,GAC9B,IAAI;IACJ,IAAI,QAAQ;IACZ,8BAA8B,GAC9B,IAAI,UAAU;IACd,IAAI,SAAS;IACb,IAAI,QAAQ;IACZ,MAAM,SAAS;QAAC;KAAM;IAEtB,sEAAsE;IACtE,gBAAgB;IAChB,MAAO,QAAS;QACd,iDAAiD;QACjD,MAAO,MAAM,CAAC,EAAE,cAAc,CAAC,EAAE,KAAK;QAGtC,eAAe,KAAK;QACpB,IAAI,CAAC,QAAQ,YAAY;YACvB,SAAS,QAAQ,YAAY;YAC7B,IAAI,CAAC,QAAQ,MACX,OAAO,KAAK;YAEd,IAAI,UACF,UAAU,WAAW,QAAQ;YAE/B,IAAI,QAAQ,6BACV,UAAU,qCAAqC;YAEjD,UAAU,MAAM;YAChB,IAAI,QAAQ,6BACV,UAAU,qCAAqC;QAEnD;QAEA,0BAA0B;QAC1B,WAAW;QACX,UAAU,QAAQ;IACpB;IAEA,6EAA6E;IAC7E,sBAAsB;IACtB,UAAU;IACV,MAAO,EAAE,QAAQ,YAAY,OAC3B,IACE,2CAA2C;IAC3C,WAAW,CAAC,MAAM,CAAC,EAAE,KAAK,UAC1B,WAAW,CAAC,QAAQ,EAAE,CAAC,EAAE,KAAK,WAC9B,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,WAAW,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,QACzD,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,SAAS,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,MAC/D;QACA,QAAQ,QAAQ;QAChB,OAAO,KAAK;QACZ,WAAW;QACX,QAAQ,aAAa;QACrB,QAAQ,WAAW;QACnB,UAAU,QAAQ;IACpB;IAGF,WAAW;IACX,UAAU,SAAS,EAAE;IAErB,yEAAyE;IACzE,2DAA2D;IAC3D,sEAAsE;IACtE,IAAI,SAAS;QACX,WAAW;QACX,QAAQ,aAAa;QACrB,QAAQ,WAAW;IACrB,OACE,OAAO;IAGT,uEAAuE;IACvE,+DAA+D;IAC/D,QAAQ,OAAO;IACf,MAAO,QAAS;QACd,MAAM,QAAQ,YAAY,MAAM,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,QAAQ,EAAE;QAChE,MAAM,QAAQ,eAAe;QAC7B,MAAM,QAAQ;YAAC;YAAO,QAAQ,MAAM,SAAS;SAAE;QAC/C,CAAA,GAAA,aAAK,EAAE,QAAQ,OAAO,GAAG;IAC3B;IACA,QAAQ;IACR,MAAO,EAAE,QAAQ,MAAM,OAAQ;QAC7B,IAAI,CAAC,SAAS,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,SAAS,KAAK,CAAC,MAAM,CAAC,EAAE;QACzD,UAAU,KAAK,CAAC,MAAM,CAAC,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,EAAE,GAAG;IAChD;IACA,OAAO;AACT;;;;;;;;;;;AC/NA;;;;;;;CAOC,GAEM,MAAM,4CAAW;IACtB,YAAY;AACd;AACO,MAAM,4CAAS,wCAAkB;AACjC,MAAM,4CAAO,wCAAkB;AAEtC;;;CAGC,GACD,SAAS,wCAAkB,KAAK;IAC9B,OAAO;QACL,UAAU;QACV,YAAY,qCACV,UAAU,SAAS,+CAAyB;IAEhD;IAEA;;;GAGC,GACD,SAAS,eAAe,OAAO;QAC7B,MAAM,OAAO,IAAI;QACjB,MAAM,aAAa,IAAI,CAAC,OAAO,UAAU,CAAC,MAAM;QAChD,MAAM,OAAO,QAAQ,QAAQ,YAAY,OAAO;QAChD,OAAO;QAEP,kBAAkB,GAClB,SAAS,MAAM,IAAI;YACjB,OAAO,QAAQ,QAAQ,KAAK,QAAQ,QAAQ;QAC9C;QAEA,kBAAkB,GAClB,SAAS,QAAQ,IAAI;YACnB,IAAI,SAAS,MAAM;gBACjB,QAAQ,QAAQ;gBAChB;YACF;YACA,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,OAAO;QACT;QAEA,kBAAkB,GAClB,SAAS,KAAK,IAAI;YAChB,IAAI,QAAQ,OAAO;gBACjB,QAAQ,KAAK;gBACb,OAAO,KAAK;YACd;YAEA,QAAQ;YACR,QAAQ,QAAQ;YAChB,OAAO;QACT;QAEA;;;KAGC,GACD,SAAS,QAAQ,IAAI;YACnB,IAAI,SAAS,MACX,OAAO;YAET,MAAM,OAAO,UAAU,CAAC,KAAK;YAC7B,IAAI,QAAQ;YACZ,IAAI,MACF,gCAAgC;YAEhC,MAAO,EAAE,QAAQ,KAAK,OAAQ;gBAC5B,MAAM,OAAO,IAAI,CAAC,MAAM;gBACxB,IAAI,CAAC,KAAK,YAAY,KAAK,SAAS,KAAK,MAAM,KAAK,WAClD,OAAO;YAEX;YAEF,OAAO;QACT;IACF;AACF;AAEA;;;CAGC,GACD,SAAS,qCAAe,aAAa;IACnC,OAAO;IAEP,qBAAqB,GACrB,SAAS,eAAe,MAAM,EAAE,OAAO;QACrC,IAAI,QAAQ;QACZ,+BAA+B,GAC/B,IAAI;QAEJ,sEAAsE;QACtE,kCAAkC;QAClC,MAAO,EAAE,SAAS,OAAO,OAAQ;YAC/B,IAAI,UAAU,WACZ;gBAAA,IAAI,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,QAAQ;oBACrD,QAAQ;oBACR;gBACF;YAAA,OACK,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,QAAQ;gBAC7D,gDAAgD;gBAChD,IAAI,UAAU,QAAQ,GAAG;oBACvB,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC;oBAC5C,OAAO,OAAO,QAAQ,GAAG,QAAQ,QAAQ;oBACzC,QAAQ,QAAQ;gBAClB;gBACA,QAAQ;YACV;QACF;QACA,OAAO,gBAAgB,cAAc,QAAQ,WAAW;IAC1D;AACF;AAEA;;;;;;;;;;CAUC,GACD,SAAS,6CAAuB,MAAM,EAAE,OAAO;IAC7C,IAAI,aAAa,EAAE,cAAc;;IAEjC,MAAO,EAAE,cAAc,OAAO,OAC5B,IACE,AAAC,CAAA,eAAe,OAAO,UACrB,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,YAAW,KAC5C,MAAM,CAAC,aAAa,EAAE,CAAC,EAAE,CAAC,SAAS,QACnC;QACA,MAAM,OAAO,MAAM,CAAC,aAAa,EAAE,CAAC,EAAE;QACtC,MAAM,SAAS,QAAQ,YAAY;QACnC,IAAI,QAAQ,OAAO;QACnB,IAAI,cAAc;QAClB,IAAI,OAAO;QACX,gCAAgC,GAChC,IAAI;QACJ,MAAO,QAAS;YACd,MAAM,QAAQ,MAAM,CAAC,MAAM;YAC3B,IAAI,OAAO,UAAU,UAAU;gBAC7B,cAAc,MAAM;gBACpB,MAAO,MAAM,WAAW,cAAc,OAAO,GAAI;oBAC/C;oBACA;gBACF;gBACA,IAAI,aAAa;gBACjB,cAAc;YAChB,OAEK,IAAI,UAAU,IAAI;gBACrB,OAAO;gBACP;YACF,OAAO,IAAI,UAAU;iBAEd;gBACL,+BAA+B;gBAC/B;gBACA;YACF;QACF;QACA,IAAI,MAAM;YACR,MAAM,QAAQ;gBACZ,MACE,eAAe,OAAO,UAAU,QAAQ,OAAO,IAC3C,eACA;gBACN,OAAO;oBACL,MAAM,KAAK,IAAI;oBACf,QAAQ,KAAK,IAAI,SAAS;oBAC1B,QAAQ,KAAK,IAAI,SAAS;oBAC1B,QAAQ,KAAK,MAAM,SAAS;oBAC5B,cAAc,QACV,cACA,KAAK,MAAM,eAAe;gBAChC;gBACA,KAAK,OAAO,OAAO,CAAC,GAAG,KAAK;YAC9B;YACA,KAAK,MAAM,OAAO,OAAO,CAAC,GAAG,MAAM;YACnC,IAAI,KAAK,MAAM,WAAW,KAAK,IAAI,QACjC,OAAO,OAAO,MAAM;iBACf;gBACL,OAAO,OACL,YACA,GACA;oBAAC;oBAAS;oBAAO;iBAAQ,EACzB;oBAAC;oBAAQ;oBAAO;iBAAQ;gBAE1B,cAAc;YAChB;QACF;QACA;IACF;IAEF,OAAO;AACT;;;;;;;ACjNA;;;;;;;;;;;;;CAaC,GAED;;;;;;;;;;;;;;CAaC;;;;;AAmBM,SAAS,0CAAgB,MAAM,EAAE,UAAU,EAAE,IAAI;IACtD,kBAAkB,GAClB,IAAI,QAAQ,OAAO,OACjB,OACI,OAAO,OAAO,CAAC,GAAG,QAClB;QACE,MAAM;QACN,QAAQ;QACR,QAAQ;IACV,GACJ;QACE,QAAQ;QACR,cAAc;IAChB;IAEF,mCAAmC,GACnC,MAAM,cAAc,CAAC;IACrB,6BAA6B,GAC7B,MAAM,uBAAuB,EAAE;IAC/B,yBAAyB,GACzB,IAAI,SAAS,EAAE;IACf,yBAAyB,GACzB,IAAI,QAAQ,EAAE;IACd,gCAAgC,GAChC,IAAI,WAAW;IAEf;;;;GAIC,GACD,MAAM,UAAU;iBACd;eACA;cACA;QACA,SAAS,iBAAiB;QAC1B,OAAO,iBAAiB;QACxB,WAAW,iBAAiB,mBAAmB;YAC7C,WAAW;QACb;IACF;IAEA;;;;GAIC,GACD,MAAM,UAAU;QACd,UAAU;QACV,MAAM;QACN,gBAAgB,CAAC;QACjB,QAAQ,EAAE;gBACV;qBACA;wBACA;aACA;oBACA;eACA;IACF;IAEA;;;;GAIC,GACD,IAAI,QAAQ,WAAW,SAAS,KAAK,SAAS;IAE9C;;;;GAIC,GACD,IAAI;IACJ,IAAI,WAAW,YACb,qBAAqB,KAAK;IAE5B,OAAO;IAEP,qCAAqC,GACrC,SAAS,MAAM,KAAK;QAClB,SAAS,CAAA,GAAA,WAAG,EAAE,QAAQ;QACtB;QAEA,sDAAsD;QACtD,IAAI,MAAM,CAAC,OAAO,SAAS,EAAE,KAAK,MAChC,OAAO,EAAE;QAEX,UAAU,YAAY;QAEtB,gCAAgC;QAChC,QAAQ,SAAS,CAAA,GAAA,iBAAS,EAAE,sBAAsB,QAAQ,QAAQ;QAClE,OAAO,QAAQ;IACjB;IAEA,EAAE;IACF,SAAS;IACT,EAAE;IAEF,8CAA8C,GAC9C,SAAS,eAAe,KAAK,EAAE,UAAU;QACvC,OAAO,sCAAgB,YAAY,QAAQ;IAC7C;IAEA,2CAA2C,GAC3C,SAAS,YAAY,KAAK;QACxB,OAAO,kCAAY,QAAQ;IAC7B;IAEA,mCAAmC,GACnC,SAAS;QACP,iFAAiF;QACjF,MAAM,QAAC,KAAI,UAAE,OAAM,UAAE,OAAM,UAAE,OAAM,gBAAE,aAAY,EAAC,GAAG;QACrD,OAAO;kBACL;oBACA;oBACA;oBACA;0BACA;QACF;IACF;IAEA,0CAA0C,GAC1C,SAAS,WAAW,KAAK;QACvB,WAAW,CAAC,MAAM,KAAK,GAAG,MAAM;QAChC;IACF;IAEA,EAAE;IACF,oBAAoB;IACpB,EAAE;IAEF;;;;;;;;;GASC,GACD,SAAS;QACP,mBAAmB,GACnB,IAAI;QACJ,MAAO,MAAM,SAAS,OAAO,OAAQ;YACnC,MAAM,QAAQ,MAAM,CAAC,MAAM,OAAO;YAElC,+CAA+C;YAC/C,IAAI,OAAO,UAAU,UAAU;gBAC7B,aAAa,MAAM;gBACnB,IAAI,MAAM,eAAe,GACvB,MAAM,eAAe;gBAEvB,MACE,MAAM,WAAW,cACjB,MAAM,eAAe,MAAM,OAE3B,GAAG,MAAM,WAAW,MAAM;YAE9B,OACE,GAAG;QAEP;IACF;IAEA;;;;;GAKC,GACD,SAAS,GAAG,IAAI;QACd,WAAW;QACX,eAAe;QACf,QAAQ,MAAM;IAChB;IAEA,+BAA+B,GAC/B,SAAS,QAAQ,IAAI;QACnB,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,MAAM;YACN,MAAM,SAAS;YACf,MAAM,UAAU,SAAS,KAAK,IAAI;YAClC;QACF,OAAO,IAAI,SAAS,IAAI;YACtB,MAAM;YACN,MAAM;QACR;QAEA,yBAAyB;QACzB,IAAI,MAAM,eAAe,GACvB,MAAM;aACD;YACL,MAAM;YAEN,0BAA0B;YAC1B,mEAAmE;YACnE,WAAW;YACX,IAAI,MAAM,iBAAiB,MAAM,CAAC,MAAM,OAAO,CAAC,QAAQ;gBACtD,MAAM,eAAe;gBACrB,MAAM;YACR;QACF;QAEA,iCAAiC;QACjC,QAAQ,WAAW;QAEnB,oBAAoB;QACpB,WAAW;IACb;IAEA,6BAA6B,GAC7B,SAAS,MAAM,IAAI,EAAE,MAAM;QACzB,kBAAkB,GAClB,uEAAuE;QACvE,MAAM,QAAQ,UAAU,CAAC;QACzB,MAAM,OAAO;QACb,MAAM,QAAQ;QACd,QAAQ,OAAO,KAAK;YAAC;YAAS;YAAO;SAAQ;QAC7C,MAAM,KAAK;QACX,OAAO;IACT;IAEA,4BAA4B,GAC5B,SAAS,KAAK,IAAI;QAChB,MAAM,QAAQ,MAAM;QACpB,MAAM,MAAM;QACZ,QAAQ,OAAO,KAAK;YAAC;YAAQ;YAAO;SAAQ;QAC5C,OAAO;IACT;IAEA;;;;GAIC,GACD,SAAS,sBAAsB,SAAS,EAAE,IAAI;QAC5C,UAAU,WAAW,KAAK;IAC5B;IAEA;;;;GAIC,GACD,SAAS,kBAAkB,CAAC,EAAE,IAAI;QAChC,KAAK;IACP;IAEA;;;;;GAKC,GACD,SAAS,iBAAiB,QAAQ,EAAE,MAAM;QACxC,OAAO;QAEP;;;;;;;;KAQC,GACD,SAAS,KAAK,UAAU,EAAE,WAAW,EAAE,UAAU;YAC/C,6BAA6B,GAC7B,IAAI;YACJ,mBAAmB,GACnB,IAAI;YACJ,sBAAsB,GACtB,IAAI;YACJ,iBAAiB,GACjB,IAAI;YACJ,OAAO,MAAM,QAAQ,cACjB,uBAAuB,cACvB,cAAc,aAEd,uBAAuB;gBAAC;aAAW,IACnC,sBAAsB;YAE1B;;;;;OAKC,GACD,SAAS,sBAAsB,GAAG;gBAChC,OAAO;gBAEP,kBAAkB,GAClB,SAAS,MAAM,IAAI;oBACjB,MAAM,MAAM,SAAS,QAAQ,GAAG,CAAC,KAAK;oBACtC,MAAM,MAAM,SAAS,QAAQ,IAAI;oBACjC,MAAM,OAAO;wBACX,mCAAmC;wBACnC,oBAAoB,MAChB,MAAM,QAAQ,OAAO,MAAM,MAAM;4BAAC;yBAAI,GAAG,EAAE;2BAC3C,MAAM,QAAQ,OAAO,MAAM,MAAM;4BAAC;yBAAI,GAAG,EAAE;qBAChD;oBACD,OAAO,uBAAuB,MAAM;gBACtC;YACF;YAEA;;;;;OAKC,GACD,SAAS,uBAAuB,IAAI;gBAClC,mBAAmB;gBACnB,iBAAiB;gBACjB,IAAI,KAAK,WAAW,GAClB,OAAO;gBAET,OAAO,gBAAgB,IAAI,CAAC,eAAe;YAC7C;YAEA;;;;;OAKC,GACD,SAAS,gBAAgB,SAAS;gBAChC,OAAO;gBAEP,kBAAkB,GAClB,SAAS,MAAM,IAAI;oBACjB,mEAAmE;oBACnE,oEAAoE;oBACpE,uEAAuE;oBACvE,kBAAkB;oBAClB,OAAO;oBACP,mBAAmB;oBACnB,IAAI,CAAC,UAAU,SACb,QAAQ,mBAAmB;oBAG7B,gCAAgC;oBAEhC,IACE,UAAU,QACV,QAAQ,OAAO,WAAW,QAAQ,KAAK,SAAS,UAAU,OAE1D,OAAO,IAAI;oBAEb,OAAO,UAAU,SAAS,KACxB,6DAA6D;oBAC7D,aAAa;oBACb,iEAAiE;oBACjE,SAAS,OAAO,OAAO,OAAO,OAAO,UAAU,UAAU,SACzD,SACA,IACA,KACA;gBACJ;YACF;YAEA,kBAAkB,GAClB,SAAS,GAAG,IAAI;gBACd,WAAW;gBACX,SAAS,kBAAkB;gBAC3B,OAAO;YACT;YAEA,kBAAkB,GAClB,SAAS,IAAI,IAAI;gBACf,WAAW;gBACX,KAAK;gBACL,IAAI,EAAE,iBAAiB,iBAAiB,QACtC,OAAO,gBAAgB,gBAAgB,CAAC,eAAe;gBAEzD,OAAO;YACT;QACF;IACF;IAEA;;;;GAIC,GACD,SAAS,UAAU,SAAS,EAAE,IAAI;QAChC,IAAI,UAAU,cAAc,CAAC,qBAAqB,SAAS,YACzD,qBAAqB,KAAK;QAE5B,IAAI,UAAU,SACZ,CAAA,GAAA,aAAK,EACH,QAAQ,QACR,MACA,QAAQ,OAAO,SAAS,MACxB,UAAU,QAAQ,QAAQ,OAAO,MAAM,OAAO;QAGlD,IAAI,UAAU,WACZ,QAAQ,SAAS,UAAU,UAAU,QAAQ,QAAQ;IAEzD;IAEA;;;;GAIC,GACD,SAAS;QACP,MAAM,aAAa;QACnB,MAAM,gBAAgB,QAAQ;QAC9B,MAAM,wBAAwB,QAAQ;QACtC,MAAM,mBAAmB,QAAQ,OAAO;QACxC,MAAM,aAAa,MAAM,KAAK;QAC9B,OAAO;qBACL;YACA,MAAM;QACR;QAEA;;;;KAIC,GACD,SAAS;YACP,QAAQ;YACR,QAAQ,WAAW;YACnB,QAAQ,mBAAmB;YAC3B,QAAQ,OAAO,SAAS;YACxB,QAAQ;YACR;QACF;IACF;IAEA;;;;;GAKC,GACD,SAAS;QACP,IAAI,MAAM,QAAQ,eAAe,MAAM,SAAS,GAAG;YACjD,MAAM,SAAS,WAAW,CAAC,MAAM,KAAK;YACtC,MAAM,UAAU,WAAW,CAAC,MAAM,KAAK,GAAG;QAC5C;IACF;AACF;AAEA;;;;;;CAMC,GACD,SAAS,kCAAY,MAAM,EAAE,KAAK;IAChC,MAAM,aAAa,MAAM,MAAM;IAC/B,MAAM,mBAAmB,MAAM,MAAM;IACrC,MAAM,WAAW,MAAM,IAAI;IAC3B,MAAM,iBAAiB,MAAM,IAAI;IACjC,yBAAyB,GACzB,IAAI;IACJ,IAAI,eAAe,UACjB,4DAA4D;IAC5D,OAAO;QAAC,MAAM,CAAC,WAAW,CAAC,MAAM,kBAAkB;KAAgB;SAC9D;QACL,OAAO,OAAO,MAAM,YAAY;QAChC,IAAI,mBAAmB,IAAI;YACzB,MAAM,OAAO,IAAI,CAAC,EAAE;YACpB,IAAI,OAAO,SAAS,UAClB,IAAI,CAAC,EAAE,GAAG,KAAK,MAAM;iBAErB,KAAK;QAET;QACA,IAAI,iBAAiB,GACnB,4DAA4D;QAC5D,KAAK,KAAK,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG;IAExC;IACA,OAAO;AACT;AAEA;;;;;;CAMC,GACD,SAAS,sCAAgB,MAAM,EAAE,UAAU;IACzC,IAAI,QAAQ;IACZ,0BAA0B,GAC1B,MAAM,SAAS,EAAE;IACjB,gCAAgC,GAChC,IAAI;IACJ,MAAO,EAAE,QAAQ,OAAO,OAAQ;QAC9B,MAAM,QAAQ,MAAM,CAAC,MAAM;QAC3B,mBAAmB,GACnB,IAAI;QACJ,IAAI,OAAO,UAAU,UACnB,QAAQ;aAER,OAAQ;YACN,KAAK;gBACH,QAAQ;gBACR;YAEF,KAAK;gBACH,QAAQ;gBACR;YAEF,KAAK;gBACH,QAAQ;gBACR;YAEF,KAAK;gBACH,QAAQ,aAAa,MAAM;gBAC3B;YAEF,KAAK;gBACH,IAAI,CAAC,cAAc,OAAO;gBAC1B,QAAQ;gBACR;YAEF;gBACE,wCAAwC;gBACxC,QAAQ,OAAO,aAAa;QAEhC;QACF,QAAQ,UAAU;QAClB,OAAO,KAAK;IACd;IACA,OAAO,OAAO,KAAK;AACrB;;;;;;ACrkBA;;;;CAIC,GAED;;;;;;;;;;;CAWC,GACM,SAAS,0CAAW,UAAU,EAAE,MAAM,EAAE,OAAO;IACpD,4BAA4B,GAC5B,MAAM,SAAS,EAAE;IACjB,IAAI,QAAQ;IAEZ,MAAO,EAAE,QAAQ,WAAW,OAAQ;QAClC,MAAM,UAAU,UAAU,CAAC,MAAM,CAAC;QAElC,IAAI,WAAW,CAAC,OAAO,SAAS,UAAU;YACxC,SAAS,QAAQ,QAAQ;YACzB,OAAO,KAAK;QACd;IACF;IAEA,OAAO;AACT;;;;;;;;;;;;;;;;ACjCA;;;;;;;;;;;;;;;;;;;;;;CAEC;;;AA2BM,MAAM,4CAAW;IACtB,CAAC,GAAG,EAAE,CAAA,GAAA,WAAG;IACT,CAAC,GAAG,EAAE,CAAA,GAAA,WAAG;IACT,CAAC,GAAG,EAAE,CAAA,GAAA,WAAG;IACT,CAAC,GAAG,EAAE,CAAA,GAAA,WAAG;IACT,CAAC,GAAG,EAAE,CAAA,GAAA,WAAG;IACT,CAAC,GAAG,EAAE,CAAA,GAAA,WAAG;IACT,CAAC,GAAG,EAAE,CAAA,GAAA,WAAG;IACT,CAAC,GAAG,EAAE,CAAA,GAAA,WAAG;IACT,CAAC,GAAG,EAAE,CAAA,GAAA,WAAG;IACT,CAAC,GAAG,EAAE,CAAA,GAAA,WAAG;IACT,CAAC,GAAG,EAAE,CAAA,GAAA,WAAG;IACT,CAAC,GAAG,EAAE,CAAA,GAAA,WAAG;IACT,CAAC,GAAG,EAAE,CAAA,GAAA,WAAG;IACT,CAAC,GAAG,EAAE,CAAA,GAAA,iBAAS;AACjB;AAGO,MAAM,4CAAiB;IAC5B,CAAC,GAAG,EAAE,CAAA,GAAA,iBAAS;AACjB;AAGO,MAAM,4CAAc;IACzB,CAAC,GAAG,EAAE,CAAA,GAAA,mBAAW;IACjB,CAAC,GAAG,EAAE,CAAA,GAAA,mBAAW;IACjB,CAAC,GAAG,EAAE,CAAA,GAAA,mBAAW;AACnB;AAGO,MAAM,4CAAO;IAClB,CAAC,GAAG,EAAE,CAAA,GAAA,iBAAS;IACf,CAAC,GAAG,EAAE,CAAA,GAAA,oBAAY;IAClB,CAAC,GAAG,EAAE;QAAC,CAAA,GAAA,sBAAc;QAAG,CAAA,GAAA,oBAAY;KAAE;IACtC,CAAC,GAAG,EAAE,CAAA,GAAA,eAAO;IACb,CAAC,GAAG,EAAE,CAAA,GAAA,sBAAc;IACpB,CAAC,GAAG,EAAE,CAAA,GAAA,oBAAY;IAClB,CAAC,GAAG,EAAE,CAAA,GAAA,iBAAS;IACf,CAAC,IAAI,EAAE,CAAA,GAAA,iBAAS;AAClB;AAGO,MAAM,4CAAS;IACpB,CAAC,GAAG,EAAE,CAAA,GAAA,yBAAiB;IACvB,CAAC,GAAG,EAAE,CAAA,GAAA,sBAAc;AACtB;AAGO,MAAM,4CAAO;IAClB,CAAC,GAAG,EAAE,CAAA,GAAA,iBAAS;IACf,CAAC,GAAG,EAAE,CAAA,GAAA,iBAAS;IACf,CAAC,GAAG,EAAE,CAAA,GAAA,iBAAS;IACf,CAAC,GAAG,EAAE,CAAA,GAAA,sBAAc;IACpB,CAAC,GAAG,EAAE,CAAA,GAAA,yBAAiB;IACvB,CAAC,GAAG,EAAE,CAAA,GAAA,gBAAQ;IACd,CAAC,GAAG,EAAE;QAAC,CAAA,GAAA,eAAO;QAAG,CAAA,GAAA,eAAO;KAAE;IAC1B,CAAC,GAAG,EAAE,CAAA,GAAA,qBAAa;IACnB,CAAC,GAAG,EAAE;QAAC,CAAA,GAAA,sBAAc;QAAG,CAAA,GAAA,sBAAc;KAAE;IACxC,CAAC,GAAG,EAAE,CAAA,GAAA,eAAO;IACb,CAAC,GAAG,EAAE,CAAA,GAAA,gBAAQ;IACd,CAAC,GAAG,EAAE,CAAA,GAAA,eAAO;AACf;AAGO,MAAM,4CAAa;IACxB,MAAM;QAAC,CAAA,GAAA,gBAAQ;QAAG,CAAA,GAAA,eAAU;KAAE;AAChC;AAGO,MAAM,4CAAmB;IAC9B,MAAM;QAAC;QAAI;KAAG;AAChB;AAGO,MAAM,2CAAU;IACrB,MAAM,EAAE;AACV;;;;;;ACzGA;;;;;;;;;;;CAUC;;;;;AAMM,MAAM,4CAAY;IACvB,MAAM;IACN,UAAU;IACV,YAAY;AACd;AAEA;;;;CAIC,GACD,SAAS,0CAAoB,MAAM,EAAE,OAAO;IAC1C,IAAI,QAAQ;IACZ,mBAAmB,GACnB,IAAI;IACJ,kBAAkB,GAClB,IAAI;IACJ,kBAAkB,GAClB,IAAI;IACJ,kBAAkB,GAClB,IAAI;IACJ,kBAAkB,GAClB,IAAI;IACJ,mBAAmB,GACnB,IAAI;IACJ,yBAAyB,GACzB,IAAI;IACJ,mBAAmB,GACnB,IAAI;IAEJ,2BAA2B;IAC3B,EAAE;IACF,0EAA0E;IAC1E,oCAAoC;IACpC,MAAO,EAAE,QAAQ,OAAO,OACtB,+BAA+B;IAC/B,IACE,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,WACrB,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,uBAC1B,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,QACjB;QACA,OAAO;QAEP,mCAAmC;QACnC,MAAO,OACL,yCAAyC;QACzC,IACE,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,UACpB,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,uBACzB,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,SAChB,+BAA+B;QAC/B,QAAQ,eAAe,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,WAAW,OACjD,QAAQ,eAAe,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,WAAW,IACtD;YACA,oDAAoD;YACpD,mDAAmD;YACnD,sEAAsE;YACtE,oBAAoB;YACpB,IACE,AAAC,CAAA,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,KAAI,KAChD,AAAC,CAAA,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,SAAS,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,MAAK,IAAK,KAChE,CACE,CAAA,AAAC,CAAA,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,SACnB,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,SACtB,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,SACrB,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,MAAK,IAC9B,CAAA,GAGF;YAGF,8CAA8C;YAC9C,MACE,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,SAAS,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,SAAS,KAC5D,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,SAAS,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,SAAS,IAC1D,IACA;YACN,MAAM,QAAQ,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YAChD,MAAM,MAAM,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;YAC/C,gCAAU,OAAO,CAAC;YAClB,gCAAU,KAAK;YACf,kBAAkB;gBAChB,MAAM,MAAM,IAAI,mBAAmB;uBACnC;gBACA,KAAK,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YACzC;YACA,kBAAkB;gBAChB,MAAM,MAAM,IAAI,mBAAmB;gBACnC,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;qBAC1C;YACF;YACA,OAAO;gBACL,MAAM,MAAM,IAAI,eAAe;gBAC/B,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;gBACzC,KAAK,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;YAC1C;YACA,QAAQ;gBACN,MAAM,MAAM,IAAI,WAAW;gBAC3B,OAAO,OAAO,OAAO,CAAC,GAAG,gBAAgB;gBACzC,KAAK,OAAO,OAAO,CAAC,GAAG,gBAAgB;YACzC;YACA,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,OAAO,OAAO,CAAC,GAAG,gBAAgB;YACxD,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,OAAO,OAAO,CAAC,GAAG,gBAAgB;YAC3D,aAAa,EAAE;YAEf,6DAA6D;YAC7D,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,SAAS,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,QACrD,aAAa,CAAA,GAAA,WAAG,EAAE,YAAY;gBAC5B;oBAAC;oBAAS,MAAM,CAAC,KAAK,CAAC,EAAE;oBAAE;iBAAQ;gBACnC;oBAAC;oBAAQ,MAAM,CAAC,KAAK,CAAC,EAAE;oBAAE;iBAAQ;aACnC;YAGH,WAAW;YACX,aAAa,CAAA,GAAA,WAAG,EAAE,YAAY;gBAC5B;oBAAC;oBAAS;oBAAO;iBAAQ;gBACzB;oBAAC;oBAAS;oBAAiB;iBAAQ;gBACnC;oBAAC;oBAAQ;oBAAiB;iBAAQ;gBAClC;oBAAC;oBAAS;oBAAM;iBAAQ;aACzB;YAED,gCAAgC;YAEhC,WAAW;YACX,aAAa,CAAA,GAAA,WAAG,EACd,YACA,CAAA,GAAA,iBAAS,EACP,QAAQ,OAAO,WAAW,WAAW,MACrC,OAAO,MAAM,OAAO,GAAG,QACvB;YAIJ,WAAW;YACX,aAAa,CAAA,GAAA,WAAG,EAAE,YAAY;gBAC5B;oBAAC;oBAAQ;oBAAM;iBAAQ;gBACvB;oBAAC;oBAAS;oBAAiB;iBAAQ;gBACnC;oBAAC;oBAAQ;oBAAiB;iBAAQ;gBAClC;oBAAC;oBAAQ;oBAAO;iBAAQ;aACzB;YAED,4DAA4D;YAC5D,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,SAAS,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,QAAQ;gBAC/D,SAAS;gBACT,aAAa,CAAA,GAAA,WAAG,EAAE,YAAY;oBAC5B;wBAAC;wBAAS,MAAM,CAAC,MAAM,CAAC,EAAE;wBAAE;qBAAQ;oBACpC;wBAAC;wBAAQ,MAAM,CAAC,MAAM,CAAC,EAAE;wBAAE;qBAAQ;iBACpC;YACH,OACE,SAAS;YAEX,CAAA,GAAA,aAAK,EAAE,QAAQ,OAAO,GAAG,QAAQ,OAAO,GAAG;YAC3C,QAAQ,OAAO,WAAW,SAAS,SAAS;YAC5C;QACF;IAEJ;IAGF,8BAA8B;IAC9B,QAAQ;IACR,MAAO,EAAE,QAAQ,OAAO,OACtB,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,qBAC5B,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO;IAG5B,OAAO;AACT;AAEA;;;CAGC,GACD,SAAS,wCAAkB,OAAO,EAAE,EAAE;IACpC,MAAM,mBAAmB,IAAI,CAAC,OAAO,WAAW,iBAAiB;IACjE,MAAM,WAAW,IAAI,CAAC;IACtB,MAAM,SAAS,CAAA,GAAA,wBAAgB,EAAE;IAEjC,8BAA8B,GAC9B,IAAI;IACJ,OAAO;IAEP;;;;;;;;;GASC,GACD,SAAS,MAAM,IAAI;QACjB,SAAS;QACT,QAAQ,MAAM;QACd,OAAO,OAAO;IAChB;IAEA;;;;;;;;;GASC,GACD,SAAS,OAAO,IAAI;QAClB,IAAI,SAAS,QAAQ;YACnB,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,MAAM,QAAQ,QAAQ,KAAK;QAE3B,qEAAqE;QACrE,MAAM,QAAQ,CAAA,GAAA,wBAAgB,EAAE;QAEhC,gCAAgC;QAEhC,MAAM,OACJ,CAAC,SAAU,UAAU,KAAK,UAAW,iBAAiB,SAAS;QACjE,MAAM,QACJ,CAAC,UAAW,WAAW,KAAK,SAAU,iBAAiB,SAAS;QAClE,MAAM,QAAQ,QAAQ,WAAW,KAAK,OAAO,QAAS,CAAA,UAAU,CAAC,KAAI;QACrE,MAAM,SAAS,QAAQ,WAAW,KAAK,QAAQ,SAAU,CAAA,SAAS,CAAC,IAAG;QACtE,OAAO,GAAG;IACZ;AACF;AAEA;;;;;;;;;CASC,GACD,SAAS,gCAAU,KAAK,EAAE,MAAM;IAC9B,MAAM,UAAU;IAChB,MAAM,UAAU;IAChB,MAAM,gBAAgB;AACxB;;;;;;ACrQA;;;CAEC;AAqBM,SAAS,0CAAkB,IAAI;IACpC,IACE,SAAS,QACT,CAAA,GAAA,gCAAwB,EAAE,SAC1B,CAAA,GAAA,wBAAgB,EAAE,OAElB,OAAO;IAET,IAAI,CAAA,GAAA,yBAAiB,EAAE,OACrB,OAAO;AAEX;;;;;;;;AClCA;;;;;;CAKC;AASM,MAAM,4CAAW;IACtB,MAAM;IACN,UAAU;AACZ;AAEA;;;CAGC,GACD,SAAS,uCAAiB,OAAO,EAAE,EAAE,EAAE,GAAG;IACxC,IAAI,OAAO;IACX,OAAO;IAEP;;;;;;;;;;;GAWC,GACD,SAAS,MAAM,IAAI;QACjB,QAAQ,MAAM;QACd,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,QAAQ,MAAM;QACd,OAAO;IACT;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,KAAK,IAAI;QAChB,IAAI,CAAA,GAAA,iBAAS,EAAE,OAAO;YACpB,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,WAAW;IACpB;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,mBAAmB,IAAI;QAC9B,4CAA4C;QAC5C,IAAI,SAAS,MAAM,SAAS,MAAM,SAAS,MAAM,CAAA,GAAA,wBAAgB,EAAE,OAAO;YACxE,mDAAmD;YACnD,OAAO;YACP,OAAO,yBAAyB;QAClC;QACA,OAAO,WAAW;IACpB;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,yBAAyB,IAAI;QACpC,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;YACP,OAAO;QACT;QAEA,4CAA4C;QAC5C,IACE,AAAC,CAAA,SAAS,MAAM,SAAS,MAAM,SAAS,MAAM,CAAA,GAAA,wBAAgB,EAAE,KAAI,KACpE,SAAS,IACT;YACA,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO;QACP,OAAO,WAAW;IACpB;IAEA;;;;;;;;;GASC,GACD,SAAS,UAAU,IAAI;QACrB,IAAI,SAAS,IAAI;YACf,QAAQ,KAAK;YACb,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO;QACT;QAEA,gCAAgC;QAChC,IAAI,SAAS,QAAQ,SAAS,MAAM,SAAS,MAAM,CAAA,GAAA,mBAAW,EAAE,OAC9D,OAAO,IAAI;QAEb,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;GASC,GACD,SAAS,WAAW,IAAI;QACtB,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,CAAA,GAAA,iBAAS,EAAE,OAAO;YACpB,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,iBAAiB,IAAI;QAC5B,OAAO,CAAA,GAAA,wBAAgB,EAAE,QAAQ,WAAW,QAAQ,IAAI;IAC1D;IAEA;;;;;;;;;GASC,GACD,SAAS,WAAW,IAAI;QACtB,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;YACP,OAAO;QACT;QACA,IAAI,SAAS,IAAI;YACf,oCAAoC;YACpC,QAAQ,KAAK,oBAAoB,OAAO;YACxC,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO;QACT;QACA,OAAO,WAAW;IACpB;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,WAAW,IAAI;QACtB,6BAA6B;QAC7B,IAAI,AAAC,CAAA,SAAS,MAAM,CAAA,GAAA,wBAAgB,EAAE,KAAI,KAAM,SAAS,IAAI;YAC3D,MAAM,OAAO,SAAS,KAAK,aAAa;YACxC,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,IAAI;IACb;AACF;;;;;;;AC1OA;;;;;;;CAMC;;;AAKM,MAAM,4CAAa;IACxB,MAAM;IACN,UAAU;IACV,cAAc;QACZ,UAAU;IACZ;UACA;AACF;AAEA;;;CAGC,GACD,SAAS,8CAAwB,OAAO,EAAE,EAAE,EAAE,GAAG;IAC/C,MAAM,OAAO,IAAI;IACjB,OAAO;IAEP;;;;;;;;;GASC,GACD,SAAS,MAAM,IAAI;QACjB,IAAI,SAAS,IAAI;YACf,MAAM,QAAQ,KAAK;YACnB,IAAI,CAAC,MAAM,MAAM;gBACf,QAAQ,MAAM,cAAc;oBAC1B,YAAY;gBACd;gBACA,MAAM,OAAO;YACf;YACA,QAAQ,MAAM;YACd,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,MAAM,IAAI;QACjB,IAAI,CAAA,GAAA,oBAAY,EAAE,OAAO;YACvB,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO;QACT;QACA,QAAQ,KAAK;QACb,OAAO,GAAG;IACZ;AACF;AAEA;;;;;;;;;;;CAWC,GACD,SAAS,qDAA+B,OAAO,EAAE,EAAE,EAAE,GAAG;IACtD,MAAM,OAAO,IAAI;IACjB,OAAO;IAEP;;;;;;;;;;;;GAYC,GACD,SAAS,UAAU,IAAI;QACrB,IAAI,CAAA,GAAA,oBAAY,EAAE,OAChB,gCAAgC;QAEhC,OAAO,CAAA,GAAA,mBAAW,EAChB,SACA,YACA,cACA,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,kBACzC,YACA,GACJ;QAEJ,OAAO,WAAW;IACpB;IAEA;;;;;;;;;;;;GAYC,GACD,SAAS,WAAW,IAAI;QACtB,OAAO,QAAQ,QAAQ,2CAAY,IAAI,KAAK;IAC9C;AACF;AAEA,mBAAmB,GACnB,SAAS,2BAAK,OAAO;IACnB,QAAQ,KAAK;AACf;;;;;;;ACjJA;;;;;;CAKC;AAIM,MAAM,4CAAkB;IAC7B,MAAM;IACN,UAAU;AACZ;AAEA;;;CAGC,GACD,SAAS,8CAAwB,OAAO,EAAE,EAAE,EAAE,GAAG;IAC/C,OAAO;IAEP;;;;;;;;;GASC,GACD,SAAS,MAAM,IAAI;QACjB,QAAQ,MAAM;QACd,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,OAAO;IACT;IAEA;;;;;;;;;GASC,GACD,SAAS,OAAO,IAAI;QAClB,qBAAqB;QACrB,IAAI,CAAA,GAAA,uBAAe,EAAE,OAAO;YAC1B,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO;QACT;QACA,OAAO,IAAI;IACb;AACF;;;;;;;AC5DA;;;;;;;CAMC;;;AASM,MAAM,4CAAqB;IAChC,MAAM;IACN,UAAU;AACZ;AAEA;;;CAGC,GACD,SAAS,iDAA2B,OAAO,EAAE,EAAE,EAAE,GAAG;IAClD,MAAM,OAAO,IAAI;IACjB,IAAI,OAAO;IACX,mBAAmB,GACnB,IAAI;IACJ,oCAAoC,GACpC,IAAI;IACJ,OAAO;IAEP;;;;;;;;;;;;;GAaC,GACD,SAAS,MAAM,IAAI;QACjB,QAAQ,MAAM;QACd,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,OAAO;IACT;IAEA;;;;;;;;;;;;;;GAcC,GACD,SAAS,KAAK,IAAI;QAChB,IAAI,SAAS,IAAI;YACf,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,OAAO;QACT;QACA,QAAQ,MAAM;QACd,MAAM;QACN,OAAO,CAAA,GAAA,wBAAgB;QACvB,OAAO,MAAM;IACf;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,QAAQ,IAAI;QACnB,IAAI,SAAS,MAAM,SAAS,KAAK;YAC/B,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,QAAQ,MAAM;YACd,MAAM;YACN,OAAO,CAAA,GAAA,oBAAY;YACnB,OAAO;QACT;QACA,QAAQ,MAAM;QACd,MAAM;QACN,OAAO,CAAA,GAAA,iBAAS;QAChB,OAAO,MAAM;IACf;IAEA;;;;;;;;;;;;;;;;GAgBC,GACD,SAAS,MAAM,IAAI;QACjB,IAAI,SAAS,MAAM,MAAM;YACvB,MAAM,QAAQ,QAAQ,KAAK;YAC3B,IACE,SAAS,CAAA,GAAA,wBAAgB,KACzB,CAAC,CAAA,GAAA,oCAA4B,EAAE,KAAK,eAAe,SAEnD,OAAO,IAAI;YAGb,8CAA8C;YAC9C,kCAAkC;YAClC,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO;QACT;QACA,IAAI,KAAK,SAAS,SAAS,KAAK;YAC9B,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,IAAI;IACb;AACF;;;;;;;;ACtJA,MAAM,4BAAM,CAAC,EAAE;AAaR,SAAS,0CAA8B,KAAK;IACjD,OAAO,0BAAI,KAAK,CAAA,GAAA,wBAAgB,GAAG,SAAS,CAAA,GAAA,wBAAgB,CAAC,CAAC,MAAM,GAAG;AACzE;;;;;;ACjBA;;;;CAIC,GACM,MAAM,4CAAoB;IAC/B,OAAO;IACP,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,KAAK;IACL,KAAK;IACL,QAAQ;IACR,OAAO;IACP,OAAO;IACP,KAAK;IACL,OAAO;IACP,MAAM;IACN,eAAe;IACf,OAAO;IACP,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,WAAW;IACX,MAAM;IACN,QAAQ;IACR,KAAK;IACL,SAAS;IACT,YAAY;IACZ,MAAM;IACN,KAAK;IACL,MAAM;IACN,OAAO;IACP,MAAM;IACN,QAAQ;IACR,MAAM;IACN,MAAM;IACN,QAAQ;IACR,KAAK;IACL,sBAAsB;IACtB,SAAS;IACT,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,SAAS;IACT,MAAM;IACN,SAAS;IACT,WAAW;IACX,KAAK;IACL,KAAK;IACL,WAAW;IACX,aAAa;IACb,YAAY;IACZ,aAAa;IACb,0BAA0B;IAC1B,uBAAuB;IACvB,iBAAiB;IACjB,OAAO;IACP,QAAQ;IACR,WAAW;IACX,QAAQ;IACR,iBAAiB;IACjB,MAAM;IACN,WAAW;IACX,iCAAiC;IACjC,OAAO;IACP,MAAM;IACN,KAAK;IACL,QAAQ;IACR,IAAI;IACJ,UAAU;IACV,MAAM;IACN,MAAM;IACN,MAAM;IACN,QAAQ;IACR,MAAM;IACN,OAAO;IACP,QAAQ;IACR,KAAK;IACL,KAAK;IACL,OAAO;IACP,KAAK;IACL,kBAAkB;IAClB,gBAAgB;IAChB,wBAAwB;IACxB,kBAAkB;IAClB,kBAAkB;IAClB,SAAS;IACT,eAAe;IACf,MAAM;IACN,KAAK;IACL,QAAQ;IACR,UAAU;IACV,uBAAuB;IACvB,WAAW;IACX,iBAAiB;IACjB,iBAAiB;IACjB,sBAAsB;IACtB,eAAe;IACf,qBAAqB;IACrB,0BAA0B;IAC1B,sBAAsB;IACtB,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,mBAAmB;IACnB,mBAAmB;IACnB,WAAW;IACX,cAAc;IACd,kBAAkB;IAClB,WAAW;IACX,qBAAqB;IACrB,mBAAmB;IACnB,gBAAgB;IAChB,mBAAmB;IACnB,oBAAoB;IACpB,iBAAiB;IACjB,oBAAoB;IACpB,SAAS;IACT,cAAc;IACd,WAAW;IACX,MAAM;IACN,QAAQ;IACR,KAAK;IACL,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,KAAK;IACL,MAAM;IACN,KAAK;IACL,QAAQ;IACR,SAAS;IACT,OAAO;IACP,kBAAkB;IAClB,sBAAsB;IACtB,OAAO;IACP,MAAM;IACN,SAAS;IACT,OAAO;IACP,YAAY;IACZ,aAAa;IACb,MAAM;IACN,MAAM;IACN,KAAK;IACL,MAAM;IACN,QAAQ;IACR,cAAc;IACd,KAAK;IACL,KAAK;IACL,mBAAmB;IACnB,uBAAuB;IACvB,MAAM;IACN,QAAQ;IACR,YAAY;IACZ,MAAM;IACN,MAAM;IACN,IAAI;IACJ,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,KAAK;IACL,MAAM;IACN,KAAK;IACL,IAAI;IACJ,MAAM;IACN,cAAc;IACd,kBAAkB;IAClB,kBAAkB;IAClB,gBAAgB;IAChB,aAAa;IACb,mBAAmB;IACnB,cAAc;IACd,MAAM;IACN,IAAI;IACJ,QAAQ;IACR,OAAO;IACP,KAAK;IACL,OAAO;IACP,KAAK;IACL,cAAc;IACd,MAAM;IACN,gBAAgB;IAChB,MAAM;IACN,QAAQ;IACR,cAAc;IACd,WAAW;IACX,MAAM;IACN,OAAO;IACP,MAAM;IACN,QAAQ;IACR,OAAO;IACP,KAAK;IACL,MAAM;IACN,KAAK;IACL,QAAQ;IACR,IAAI;IACJ,OAAO;IACP,YAAY;IACZ,SAAS;IACT,KAAK;IACL,UAAU;IACV,cAAc;IACd,gBAAgB;IAChB,gBAAgB;IAChB,OAAO;IACP,MAAM;IACN,MAAM;IACN,MAAM;IACN,QAAQ;IACR,OAAO;IACP,MAAM;IACN,OAAO;IACP,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,QAAQ;IACR,OAAO;IACP,MAAM;IACN,MAAM;IACN,OAAO;IACP,QAAQ;IACR,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,IAAI;IACJ,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,YAAY;IACZ,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,kBAAkB;IAClB,WAAW;IACX,cAAc;IACd,qBAAqB;IACrB,aAAa;IACb,mBAAmB;IACnB,mBAAmB;IACnB,gBAAgB;IAChB,mBAAmB;IACnB,WAAW;IACX,gBAAgB;IAChB,iBAAiB;IACjB,SAAS;IACT,cAAc;IACd,eAAe;IACf,cAAc;IACd,iBAAiB;IACjB,mBAAmB;IACnB,kBAAkB;IAClB,iBAAiB;IACjB,cAAc;IACd,iBAAiB;IACjB,YAAY;IACZ,eAAe;IACf,WAAW;IACX,gBAAgB;IAChB,kBAAkB;IAClB,eAAe;IACf,aAAa;IACb,UAAU;IACV,gBAAgB;IAChB,WAAW;IACX,KAAK;IACL,IAAI;IACJ,YAAY;IACZ,QAAQ;IACR,eAAe;IACf,oBAAoB;IACpB,gBAAgB;IAChB,eAAe;IACf,oBAAoB;IACpB,gBAAgB;IAChB,MAAM;IACN,gBAAgB;IAChB,iBAAiB;IACjB,MAAM;IACN,KAAK;IACL,QAAQ;IACR,IAAI;IACJ,KAAK;IACL,KAAK;IACL,aAAa;IACb,WAAW;IACX,KAAK;IACL,WAAW;IACX,MAAM;IACN,MAAM;IACN,IAAI;IACJ,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,qBAAqB;IACrB,oBAAoB;IACpB,mBAAmB;IACnB,uBAAuB;IACvB,sBAAsB;IACtB,gBAAgB;IAChB,SAAS;IACT,KAAK;IACL,SAAS;IACT,kBAAkB;IAClB,MAAM;IACN,KAAK;IACL,cAAc;IACd,WAAW;IACX,sBAAsB;IACtB,YAAY;IACZ,UAAU;IACV,eAAe;IACf,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,qBAAqB;IACrB,mBAAmB;IACnB,gBAAgB;IAChB,sBAAsB;IACtB,iBAAiB;IACjB,iBAAiB;IACjB,cAAc;IACd,iBAAiB;IACjB,oBAAoB;IACpB,sBAAsB;IACtB,SAAS;IACT,cAAc;IACd,gBAAgB;IAChB,aAAa;IACb,mBAAmB;IACnB,cAAc;IACd,yBAAyB;IACzB,mBAAmB;IACnB,aAAa;IACb,kBAAkB;IAClB,uBAAuB;IACvB,mBAAmB;IACnB,kBAAkB;IAClB,qBAAqB;IACrB,uBAAuB;IACvB,iBAAiB;IACjB,sBAAsB;IACtB,mBAAmB;IACnB,wBAAwB;IACxB,WAAW;IACX,gBAAgB;IAChB,aAAa;IACb,kBAAkB;IAClB,uBAAuB;IACvB,kBAAkB;IAClB,aAAa;IACb,kBAAkB;IAClB,UAAU;IACV,eAAe;IACf,mBAAmB;IACnB,eAAe;IACf,gBAAgB;IAChB,MAAM;IACN,QAAQ;IACR,IAAI;IACJ,OAAO;IACP,QAAQ;IACR,OAAO;IACP,KAAK;IACL,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,OAAO;IACP,OAAO;IACP,SAAS;IACT,MAAM;IACN,sBAAsB;IACtB,gBAAgB;IAChB,IAAI;IACJ,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,SAAS;IACT,WAAW;IACX,aAAa;IACb,iBAAiB;IACjB,UAAU;IACV,KAAK;IACL,KAAK;IACL,KAAK;IACL,IAAI;IACJ,WAAW;IACX,eAAe;IACf,MAAM;IACN,IAAI;IACJ,UAAU;IACV,eAAe;IACf,oBAAoB;IACpB,eAAe;IACf,OAAO;IACP,SAAS;IACT,YAAY;IACZ,cAAc;IACd,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,MAAM;IACN,OAAO;IACP,KAAK;IACL,QAAQ;IACR,MAAM;IACN,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,IAAI;IACJ,gBAAgB;IAChB,oBAAoB;IACpB,sBAAsB;IACtB,KAAK;IACL,KAAK;IACL,mBAAmB;IACnB,YAAY;IACZ,eAAe;IACf,qBAAqB;IACrB,cAAc;IACd,oBAAoB;IACpB,oBAAoB;IACpB,iBAAiB;IACjB,oBAAoB;IACpB,YAAY;IACZ,UAAU;IACV,eAAe;IACf,gBAAgB;IAChB,eAAe;IACf,kBAAkB;IAClB,oBAAoB;IACpB,mBAAmB;IACnB,kBAAkB;IAClB,eAAe;IACf,kBAAkB;IAClB,aAAa;IACb,gBAAgB;IAChB,YAAY;IACZ,MAAM;IACN,cAAc;IACd,aAAa;IACb,MAAM;IACN,KAAK;IACL,aAAa;IACb,QAAQ;IACR,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,IAAI;IACJ,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,KAAK;IACL,KAAK;IACL,gBAAgB;IAChB,gBAAgB;IAChB,iBAAiB;IACjB,cAAc;IACd,OAAO;IACP,aAAa;IACb,MAAM;IACN,MAAM;IACN,QAAQ;IACR,oBAAoB;IACpB,cAAc;IACd,mBAAmB;IACnB,gBAAgB;IAChB,qBAAqB;IACrB,aAAa;IACb,MAAM;IACN,MAAM;IACN,KAAK;IACL,QAAQ;IACR,aAAa;IACb,UAAU;IACV,eAAe;IACf,oBAAoB;IACpB,eAAe;IACf,UAAU;IACV,KAAK;IACL,KAAK;IACL,UAAU;IACV,eAAe;IACf,QAAQ;IACR,OAAO;IACP,OAAO;IACP,OAAO;IACP,MAAM;IACN,KAAK;IACL,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,KAAK;IACL,WAAW;IACX,OAAO;IACP,YAAY;IACZ,WAAW;IACX,OAAO;IACP,YAAY;IACZ,gBAAgB;IAChB,YAAY;IACZ,MAAM;IACN,WAAW;IACX,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,UAAU;IACV,OAAO;IACP,QAAQ;IACR,OAAO;IACP,KAAK;IACL,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,OAAO;IACP,UAAU;IACV,YAAY;IACZ,cAAc;IACd,kBAAkB;IAClB,OAAO;IACP,WAAW;IACX,OAAO;IACP,MAAM;IACN,SAAS;IACT,YAAY;IACZ,kBAAkB;IAClB,aAAa;IACb,eAAe;IACf,OAAO;IACP,YAAY;IACZ,SAAS;IACT,aAAa;IACb,gBAAgB;IAChB,iBAAiB;IACjB,MAAM;IACN,SAAS;IACT,OAAO;IACP,MAAM;IACN,QAAQ;IACR,MAAM;IACN,OAAO;IACP,MAAM;IACN,KAAK;IACL,OAAO;IACP,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,MAAM;IACN,aAAa;IACb,cAAc;IACd,mBAAmB;IACnB,eAAe;IACf,eAAe;IACf,KAAK;IACL,MAAM;IACN,MAAM;IACN,QAAQ;IACR,OAAO;IACP,OAAO;IACP,KAAK;IACL,MAAM;IACN,MAAM;IACN,KAAK;IACL,IAAI;IACJ,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,QAAQ;IACR,OAAO;IACP,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,MAAM;IACN,gBAAgB;IAChB,MAAM;IACN,KAAK;IACL,MAAM;IACN,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,IAAI;IACJ,KAAK;IACL,KAAK;IACL,OAAO;IACP,OAAO;IACP,KAAK;IACL,OAAO;IACP,IAAI;IACJ,KAAK;IACL,QAAQ;IACR,SAAS;IACT,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,KAAK;IACL,KAAK;IACL,QAAQ;IACR,MAAM;IACN,UAAU;IACV,MAAM;IACN,KAAK;IACL,MAAM;IACN,OAAO;IACP,QAAQ;IACR,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,OAAO;IACP,SAAS;IACT,UAAU;IACV,QAAQ;IACR,OAAO;IACP,SAAS;IACT,OAAO;IACP,MAAM;IACN,IAAI;IACJ,KAAK;IACL,QAAQ;IACR,KAAK;IACL,MAAM;IACN,MAAM;IACN,QAAQ;IACR,UAAU;IACV,OAAO;IACP,MAAM;IACN,KAAK;IACL,OAAO;IACP,SAAS;IACT,QAAQ;IACR,MAAM;IACN,UAAU;IACV,OAAO;IACP,MAAM;IACN,UAAU;IACV,aAAa;IACb,WAAW;IACX,SAAS;IACT,WAAW;IACX,QAAQ;IACR,QAAQ;IACR,UAAU;IACV,MAAM;IACN,UAAU;IACV,OAAO;IACP,KAAK;IACL,OAAO;IACP,QAAQ;IACR,SAAS;IACT,SAAS;IACT,OAAO;IACP,QAAQ;IACR,MAAM;IACN,MAAM;IACN,SAAS;IACT,KAAK;IACL,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,SAAS;IACT,UAAU;IACV,WAAW;IACX,UAAU;IACV,SAAS;IACT,iBAAiB;IACjB,eAAe;IACf,UAAU;IACV,QAAQ;IACR,UAAU;IACV,QAAQ;IACR,cAAc;IACd,aAAa;IACb,eAAe;IACf,mBAAmB;IACnB,mBAAmB;IACnB,oBAAoB;IACpB,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,KAAK;IACL,SAAS;IACT,MAAM;IACN,MAAM;IACN,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,MAAM;IACN,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,MAAM;IACN,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,QAAQ;IACR,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,MAAM;IACN,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,UAAU;IACV,SAAS;IACT,UAAU;IACV,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,MAAM;IACN,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,MAAM;IACN,OAAO;IACP,MAAM;IACN,OAAO;IACP,MAAM;IACN,OAAO;IACP,UAAU;IACV,MAAM;IACN,QAAQ;IACR,MAAM;IACN,OAAO;IACP,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,UAAU;IACV,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,OAAO;IACP,OAAO;IACP,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,OAAO;IACP,SAAS;IACT,MAAM;IACN,OAAO;IACP,SAAS;IACT,MAAM;IACN,WAAW;IACX,KAAK;IACL,MAAM;IACN,OAAO;IACP,WAAW;IACX,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,QAAQ;IACR,iBAAiB;IACjB,kBAAkB;IAClB,UAAU;IACV,UAAU;IACV,YAAY;IACZ,aAAa;IACb,aAAa;IACb,MAAM;IACN,UAAU;IACV,QAAQ;IACR,SAAS;IACT,OAAO;IACP,UAAU;IACV,OAAO;IACP,QAAQ;IACR,SAAS;IACT,OAAO;IACP,QAAQ;IACR,MAAM;IACN,QAAQ;IACR,YAAY;IACZ,WAAW;IACX,MAAM;IACN,SAAS;IACT,QAAQ;IACR,MAAM;IACN,QAAQ;IACR,MAAM;IACN,QAAQ;IACR,OAAO;IACP,OAAO;IACP,MAAM;IACN,MAAM;IACN,OAAO;IACP,MAAM;IACN,OAAO;IACP,OAAO;IACP,SAAS;IACT,SAAS;IACT,OAAO;IACP,OAAO;IACP,QAAQ;IACR,SAAS;IACT,KAAK;IACL,UAAU;IACV,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,MAAM;IACN,QAAQ;IACR,SAAS;IACT,aAAa;IACb,aAAa;IACb,UAAU;IACV,YAAY;IACZ,QAAQ;IACR,gBAAgB;IAChB,iBAAiB;IACjB,OAAO;IACP,OAAO;IACP,UAAU;IACV,OAAO;IACP,QAAQ;IACR,MAAM;IACN,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,MAAM;IACN,OAAO;IACP,SAAS;IACT,OAAO;IACP,QAAQ;IACR,KAAK;IACL,IAAI;IACJ,SAAS;IACT,OAAO;IACP,SAAS;IACT,KAAK;IACL,OAAO;IACP,SAAS;IACT,QAAQ;IACR,KAAK;IACL,OAAO;IACP,OAAO;IACP,MAAM;IACN,SAAS;IACT,aAAa;IACb,OAAO;IACP,KAAK;IACL,SAAS;IACT,OAAO;IACP,KAAK;IACL,QAAQ;IACR,eAAe;IACf,QAAQ;IACR,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,KAAK;IACL,OAAO;IACP,UAAU;IACV,UAAU;IACV,SAAS;IACT,WAAW;IACX,gBAAgB;IAChB,WAAW;IACX,gBAAgB;IAChB,iBAAiB;IACjB,kBAAkB;IAClB,UAAU;IACV,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,MAAM;IACN,MAAM;IACN,QAAQ;IACR,OAAO;IACP,MAAM;IACN,OAAO;IACP,OAAO;IACP,OAAO;IACP,SAAS;IACT,MAAM;IACN,UAAU;IACV,OAAO;IACP,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,OAAO;IACP,QAAQ;IACR,KAAK;IACL,MAAM;IACN,IAAI;IACJ,OAAO;IACP,KAAK;IACL,IAAI;IACJ,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,IAAI;IACJ,UAAU;IACV,KAAK;IACL,KAAK;IACL,QAAQ;IACR,OAAO;IACP,OAAO;IACP,UAAU;IACV,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,KAAK;IACL,MAAM;IACN,OAAO;IACP,MAAM;IACN,MAAM;IACN,QAAQ;IACR,OAAO;IACP,MAAM;IACN,SAAS;IACT,OAAO;IACP,QAAQ;IACR,SAAS;IACT,OAAO;IACP,YAAY;IACZ,aAAa;IACb,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,SAAS;IACT,UAAU;IACV,OAAO;IACP,OAAO;IACP,MAAM;IACN,OAAO;IACP,MAAM;IACN,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,OAAO;IACP,aAAa;IACb,cAAc;IACd,eAAe;IACf,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,KAAK;IACL,OAAO;IACP,OAAO;IACP,MAAM;IACN,OAAO;IACP,OAAO;IACP,MAAM;IACN,MAAM;IACN,QAAQ;IACR,MAAM;IACN,OAAO;IACP,UAAU;IACV,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,OAAO;IACP,MAAM;IACN,IAAI;IACJ,KAAK;IACL,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,OAAO;IACP,KAAK;IACL,MAAM;IACN,IAAI;IACJ,KAAK;IACL,KAAK;IACL,MAAM;IACN,UAAU;IACV,KAAK;IACL,OAAO;IACP,QAAQ;IACR,SAAS;IACT,UAAU;IACV,MAAM;IACN,QAAQ;IACR,KAAK;IACL,IAAI;IACJ,KAAK;IACL,OAAO;IACP,MAAM;IACN,IAAI;IACJ,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,UAAU;IACV,KAAK;IACL,MAAM;IACN,OAAO;IACP,OAAO;IACP,MAAM;IACN,OAAO;IACP,MAAM;IACN,MAAM;IACN,OAAO;IACP,OAAO;IACP,IAAI;IACJ,MAAM;IACN,OAAO;IACP,OAAO;IACP,QAAQ;IACR,SAAS;IACT,WAAW;IACX,QAAQ;IACR,QAAQ;IACR,WAAW;IACX,YAAY;IACZ,SAAS;IACT,QAAQ;IACR,WAAW;IACX,MAAM;IACN,MAAM;IACN,QAAQ;IACR,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,SAAS;IACT,OAAO;IACP,MAAM;IACN,OAAO;IACP,QAAQ;IACR,WAAW;IACX,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,UAAU;IACV,UAAU;IACV,OAAO;IACP,QAAQ;IACR,eAAe;IACf,gBAAgB;IAChB,MAAM;IACN,QAAQ;IACR,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,IAAI;IACJ,OAAO;IACP,KAAK;IACL,MAAM;IACN,OAAO;IACP,KAAK;IACL,KAAK;IACL,QAAQ;IACR,IAAI;IACJ,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,UAAU;IACV,UAAU;IACV,OAAO;IACP,MAAM;IACN,OAAO;IACP,IAAI;IACJ,QAAQ;IACR,OAAO;IACP,UAAU;IACV,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,UAAU;IACV,UAAU;IACV,UAAU;IACV,SAAS;IACT,MAAM;IACN,OAAO;IACP,MAAM;IACN,MAAM;IACN,OAAO;IACP,QAAQ;IACR,MAAM;IACN,MAAM;IACN,OAAO;IACP,SAAS;IACT,OAAO;IACP,QAAQ;IACR,OAAO;IACP,IAAI;IACJ,QAAQ;IACR,OAAO;IACP,MAAM;IACN,OAAO;IACP,KAAK;IACL,KAAK;IACL,OAAO;IACP,MAAM;IACN,MAAM;IACN,QAAQ;IACR,OAAO;IACP,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,KAAK;IACL,QAAQ;IACR,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,OAAO;IACP,MAAM;IACN,QAAQ;IACR,OAAO;IACP,IAAI;IACJ,KAAK;IACL,MAAM;IACN,QAAQ;IACR,UAAU;IACV,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,OAAO;IACP,QAAQ;IACR,KAAK;IACL,OAAO;IACP,MAAM;IACN,OAAO;IACP,SAAS;IACT,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,MAAM;IACN,OAAO;IACP,OAAO;IACP,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,SAAS;IACT,SAAS;IACT,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,MAAM;IACN,KAAK;IACL,MAAM;IACN,OAAO;IACP,QAAQ;IACR,SAAS;IACT,UAAU;IACV,MAAM;IACN,IAAI;IACJ,WAAW;IACX,eAAe;IACf,iBAAiB;IACjB,eAAe;IACf,gBAAgB;IAChB,gBAAgB;IAChB,iBAAiB;IACjB,mBAAmB;IACnB,qBAAqB;IACrB,gBAAgB;IAChB,KAAK;IACL,KAAK;IACL,MAAM;IACN,UAAU;IACV,KAAK;IACL,OAAO;IACP,QAAQ;IACR,SAAS;IACT,UAAU;IACV,MAAM;IACN,QAAQ;IACR,YAAY;IACZ,SAAS;IACT,WAAW;IACX,YAAY;IACZ,SAAS;IACT,SAAS;IACT,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,IAAI;IACJ,KAAK;IACL,OAAO;IACP,OAAO;IACP,QAAQ;IACR,OAAO;IACP,MAAM;IACN,IAAI;IACJ,OAAO;IACP,UAAU;IACV,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,YAAY;IACZ,KAAK;IACL,MAAM;IACN,UAAU;IACV,KAAK;IACL,MAAM;IACN,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,eAAe;IACf,oBAAoB;IACpB,YAAY;IACZ,gBAAgB;IAChB,eAAe;IACf,gBAAgB;IAChB,OAAO;IACP,MAAM;IACN,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,SAAS;IACT,MAAM;IACN,MAAM;IACN,QAAQ;IACR,OAAO;IACP,UAAU;IACV,OAAO;IACP,QAAQ;IACR,KAAK;IACL,OAAO;IACP,QAAQ;IACR,MAAM;IACN,KAAK;IACL,MAAM;IACN,OAAO;IACP,OAAO;IACP,MAAM;IACN,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,IAAI;IACJ,MAAM;IACN,OAAO;IACP,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,MAAM;IACN,OAAO;IACP,OAAO;IACP,UAAU;IACV,SAAS;IACT,WAAW;IACX,MAAM;IACN,OAAO;IACP,MAAM;IACN,MAAM;IACN,MAAM;IACN,SAAS;IACT,KAAK;IACL,QAAQ;IACR,YAAY;IACZ,YAAY;IACZ,UAAU;IACV,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,OAAO;IACP,eAAe;IACf,KAAK;IACL,KAAK;IACL,OAAO;IACP,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,SAAS;IACT,MAAM;IACN,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,IAAI;IACJ,MAAM;IACN,QAAQ;IACR,IAAI;IACJ,UAAU;IACV,OAAO;IACP,KAAK;IACL,KAAK;IACL,MAAM;IACN,YAAY;IACZ,iBAAiB;IACjB,KAAK;IACL,KAAK;IACL,MAAM;IACN,aAAa;IACb,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,MAAM;IACN,KAAK;IACL,MAAM;IACN,OAAO;IACP,OAAO;IACP,SAAS;IACT,OAAO;IACP,SAAS;IACT,UAAU;IACV,MAAM;IACN,OAAO;IACP,QAAQ;IACR,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,UAAU;IACV,MAAM;IACN,KAAK;IACL,OAAO;IACP,IAAI;IACJ,OAAO;IACP,QAAQ;IACR,OAAO;IACP,SAAS;IACT,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,SAAS;IACT,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,OAAO;IACP,WAAW;IACX,MAAM;IACN,OAAO;IACP,KAAK;IACL,MAAM;IACN,OAAO;IACP,OAAO;IACP,OAAO;IACP,IAAI;IACJ,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,OAAO;IACP,KAAK;IACL,OAAO;IACP,MAAM;IACN,KAAK;IACL,YAAY;IACZ,iBAAiB;IACjB,MAAM;IACN,OAAO;IACP,WAAW;IACX,MAAM;IACN,OAAO;IACP,OAAO;IACP,KAAK;IACL,OAAO;IACP,QAAQ;IACR,MAAM;IACN,MAAM;IACN,KAAK;IACL,OAAO;IACP,QAAQ;IACR,UAAU;IACV,SAAS;IACT,SAAS;IACT,SAAS;IACT,OAAO;IACP,SAAS;IACT,SAAS;IACT,SAAS;IACT,MAAM;IACN,WAAW;IACX,QAAQ;IACR,OAAO;IACP,SAAS;IACT,KAAK;IACL,QAAQ;IACR,MAAM;IACN,OAAO;IACP,SAAS;IACT,OAAO;IACP,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,aAAa;IACb,OAAO;IACP,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,MAAM;IACN,MAAM;IACN,WAAW;IACX,gBAAgB;IAChB,MAAM;IACN,OAAO;IACP,QAAQ;IACR,OAAO;IACP,OAAO;IACP,SAAS;IACT,SAAS;IACT,MAAM;IACN,OAAO;IACP,OAAO;IACP,SAAS;IACT,WAAW;IACX,YAAY;IACZ,OAAO;IACP,SAAS;IACT,MAAM;IACN,OAAO;IACP,OAAO;IACP,SAAS;IACT,WAAW;IACX,YAAY;IACZ,MAAM;IACN,QAAQ;IACR,MAAM;IACN,eAAe;IACf,iBAAiB;IACjB,gBAAgB;IAChB,kBAAkB;IAClB,IAAI;IACJ,KAAK;IACL,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,QAAQ;IACR,MAAM;IACN,MAAM;IACN,SAAS;IACT,QAAQ;IACR,MAAM;IACN,MAAM;IACN,SAAS;IACT,QAAQ;IACR,SAAS;IACT,OAAO;IACP,OAAO;IACP,QAAQ;IACR,OAAO;IACP,SAAS;IACT,QAAQ;IACR,IAAI;IACJ,QAAQ;IACR,MAAM;IACN,MAAM;IACN,OAAO;IACP,KAAK;IACL,OAAO;IACP,QAAQ;IACR,MAAM;IACN,MAAM;IACN,QAAQ;IACR,OAAO;IACP,OAAO;IACP,KAAK;IACL,MAAM;IACN,QAAQ;IACR,KAAK;IACL,OAAO;IACP,KAAK;IACL,MAAM;IACN,OAAO;IACP,OAAO;IACP,SAAS;IACT,OAAO;IACP,KAAK;IACL,OAAO;IACP,OAAO;IACP,SAAS;IACT,MAAM;IACN,QAAQ;IACR,MAAM;IACN,MAAM;IACN,OAAO;IACP,OAAO;IACP,IAAI;IACJ,OAAO;IACP,KAAK;IACL,OAAO;IACP,SAAS;IACT,MAAM;IACN,MAAM;IACN,QAAQ;IACR,MAAM;IACN,SAAS;IACT,KAAK;IACL,MAAM;IACN,QAAQ;IACR,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,UAAU;IACV,MAAM;IACN,OAAO;IACP,KAAK;IACL,MAAM;IACN,UAAU;IACV,QAAQ;IACR,OAAO;IACP,MAAM;IACN,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,SAAS;IACT,KAAK;IACL,KAAK;IACL,MAAM;IACN,QAAQ;IACR,OAAO;IACP,IAAI;IACJ,WAAW;IACX,KAAK;IACL,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,MAAM;IACN,UAAU;IACV,OAAO;IACP,SAAS;IACT,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,SAAS;IACT,SAAS;IACT,IAAI;IACJ,UAAU;IACV,MAAM;IACN,OAAO;IACP,IAAI;IACJ,KAAK;IACL,MAAM;IACN,OAAO;IACP,KAAK;IACL,MAAM;IACN,YAAY;IACZ,aAAa;IACb,QAAQ;IACR,aAAa;IACb,UAAU;IACV,UAAU;IACV,SAAS;IACT,OAAO;IACP,QAAQ;IACR,MAAM;IACN,OAAO;IACP,QAAQ;IACR,MAAM;IACN,UAAU;IACV,UAAU;IACV,UAAU;IACV,MAAM;IACN,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,MAAM;IACN,KAAK;IACL,QAAQ;IACR,KAAK;IACL,MAAM;IACN,MAAM;IACN,QAAQ;IACR,MAAM;IACN,aAAa;IACb,SAAS;IACT,OAAO;IACP,SAAS;IACT,MAAM;IACN,OAAO;IACP,MAAM;IACN,QAAQ;IACR,OAAO;IACP,MAAM;IACN,MAAM;IACN,QAAQ;IACR,OAAO;IACP,UAAU;IACV,MAAM;IACN,OAAO;IACP,OAAO;IACP,QAAQ;IACR,OAAO;IACP,MAAM;IACN,QAAQ;IACR,OAAO;IACP,SAAS;IACT,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,OAAO;IACP,WAAW;IACX,OAAO;IACP,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,SAAS;IACT,SAAS;IACT,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,MAAM;IACN,KAAK;IACL,MAAM;IACN,SAAS;IACT,OAAO;IACP,QAAQ;IACR,MAAM;IACN,MAAM;IACN,SAAS;IACT,UAAU;IACV,OAAO;IACP,MAAM;IACN,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,OAAO;IACP,OAAO;IACP,QAAQ;IACR,KAAK;IACL,MAAM;IACN,YAAY;IACZ,gBAAgB;IAChB,kBAAkB;IAClB,gBAAgB;IAChB,iBAAiB;IACjB,mBAAmB;IACnB,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;IACjB,MAAM;IACN,cAAc;IACd,OAAO;IACP,OAAO;IACP,KAAK;IACL,QAAQ;IACR,YAAY;IACZ,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,MAAM;IACN,QAAQ;IACR,SAAS;IACT,MAAM;IACN,QAAQ;IACR,UAAU;IACV,OAAO;IACP,QAAQ;IACR,MAAM;IACN,KAAK;IACL,MAAM;IACN,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,OAAO;IACP,OAAO;IACP,UAAU;IACV,SAAS;IACT,IAAI;IACJ,QAAQ;IACR,OAAO;IACP,IAAI;IACJ,KAAK;IACL,MAAM;IACN,QAAQ;IACR,OAAO;IACP,KAAK;IACL,QAAQ;IACR,OAAO;IACP,MAAM;IACN,OAAO;IACP,QAAQ;IACR,UAAU;IACV,OAAO;IACP,KAAK;IACL,MAAM;IACN,OAAO;IACP,OAAO;IACP,OAAO;IACP,QAAQ;IACR,OAAO;IACP,SAAS;IACT,MAAM;IACN,MAAM;IACN,QAAQ;IACR,UAAU;IACV,OAAO;IACP,MAAM;IACN,KAAK;IACL,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,MAAM;IACN,UAAU;IACV,eAAe;IACf,KAAK;IACL,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,MAAM;IACN,OAAO;IACP,MAAM;IACN,OAAO;IACP,MAAM;IACN,OAAO;IACP,OAAO;IACP,SAAS;IACT,SAAS;IACT,OAAO;IACP,eAAe;IACf,QAAQ;IACR,UAAU;IACV,MAAM;IACN,OAAO;IACP,KAAK;IACL,MAAM;IACN,OAAO;IACP,QAAQ;IACR,KAAK;IACL,MAAM;IACN,QAAQ;IACR,MAAM;IACN,QAAQ;IACR,WAAW;IACX,MAAM;IACN,OAAO;IACP,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,UAAU;IACV,YAAY;IACZ,OAAO;IACP,QAAQ;IACR,UAAU;IACV,YAAY;IACZ,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,OAAO;IACP,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,OAAO;IACP,iBAAiB;IACjB,aAAa;IACb,OAAO;IACP,KAAK;IACL,MAAM;IACN,QAAQ;IACR,MAAM;IACN,SAAS;IACT,SAAS;IACT,OAAO;IACP,OAAO;IACP,SAAS;IACT,SAAS;IACT,QAAQ;IACR,UAAU;IACV,WAAW;IACX,WAAW;IACX,YAAY;IACZ,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,YAAY;IACZ,aAAa;IACb,QAAQ;IACR,aAAa;IACb,UAAU;IACV,UAAU;IACV,SAAS;IACT,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,KAAK;IACL,MAAM;IACN,QAAQ;IACR,SAAS;IACT,MAAM;IACN,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,OAAO;IACP,OAAO;IACP,SAAS;IACT,QAAQ;IACR,UAAU;IACV,WAAW;IACX,WAAW;IACX,YAAY;IACZ,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,OAAO;IACP,SAAS;IACT,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,KAAK;IACL,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,MAAM;IACN,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,WAAW;IACX,OAAO;IACP,UAAU;IACV,QAAQ;IACR,aAAa;IACb,UAAU;IACV,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,OAAO;IACP,OAAO;IACP,OAAO;IACP,QAAQ;IACR,UAAU;IACV,QAAQ;IACR,MAAM;IACN,MAAM;IACN,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,SAAS;IACT,MAAM;IACN,QAAQ;IACR,OAAO;IACP,UAAU;IACV,cAAc;IACd,cAAc;IACd,gBAAgB;IAChB,WAAW;IACX,eAAe;IACf,iBAAiB;IACjB,QAAQ;IACR,MAAM;IACN,UAAU;IACV,SAAS;IACT,OAAO;IACP,SAAS;IACT,UAAU;IACV,MAAM;IACN,MAAM;IACN,OAAO;IACP,QAAQ;IACR,OAAO;IACP,kBAAkB;IAClB,mBAAmB;IACnB,MAAM;IACN,MAAM;IACN,QAAQ;IACR,MAAM;IACN,OAAO;IACP,QAAQ;IACR,OAAO;IACP,KAAK;IACL,OAAO;IACP,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,OAAO;IACP,OAAO;IACP,OAAO;IACP,QAAQ;IACR,UAAU;IACV,QAAQ;IACR,OAAO;IACP,OAAO;IACP,KAAK;IACL,OAAO;IACP,MAAM;IACN,SAAS;IACT,aAAa;IACb,eAAe;IACf,gBAAgB;IAChB,OAAO;IACP,MAAM;IACN,OAAO;IACP,SAAS;IACT,YAAY;IACZ,QAAQ;IACR,UAAU;IACV,QAAQ;IACR,OAAO;IACP,OAAO;IACP,MAAM;IACN,OAAO;IACP,QAAQ;IACR,MAAM;IACN,OAAO;IACP,OAAO;IACP,MAAM;IACN,SAAS;IACT,MAAM;IACN,MAAM;IACN,OAAO;IACP,OAAO;IACP,QAAQ;IACR,YAAY;IACZ,UAAU;IACV,YAAY;IACZ,QAAQ;IACR,OAAO;IACP,WAAW;IACX,MAAM;IACN,QAAQ;IACR,UAAU;IACV,cAAc;IACd,eAAe;IACf,cAAc;IACd,eAAe;IACf,UAAU;IACV,iBAAiB;IACjB,kBAAkB;IAClB,KAAK;IACL,OAAO;IACP,KAAK;IACL,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,KAAK;IACL,OAAO;IACP,OAAO;IACP,OAAO;IACP,MAAM;IACN,OAAO;IACP,OAAO;IACP,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,SAAS;IACT,OAAO;IACP,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,MAAM;IACN,IAAI;IACJ,IAAI;IACJ,QAAQ;IACR,MAAM;IACN,MAAM;IACN,OAAO;IACP,MAAM;IACN,OAAO;IACP,KAAK;IACL,OAAO;IACP,OAAO;IACP,IAAI;IACJ,OAAO;IACP,OAAO;IACP,MAAM;IACN,MAAM;IACN,OAAO;IACP,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,OAAO;IACP,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,OAAO;IACP,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,MAAM;IACN,QAAQ;IACR,MAAM;IACN,KAAK;IACL,MAAM;IACN,SAAS;IACT,MAAM;IACN,MAAM;IACN,KAAK;IACL,MAAM;AACR;;;;;;;;;ACnlEA;;;;;;;CAMC;;;AAID,sBAAsB,GACtB,MAAM,4CAAsB;IAC1B,UAAU;IACV,SAAS;AACX;AAGO,MAAM,4CAAa;IACxB,MAAM;IACN,UAAU;IACV,UAAU;AACZ;AAEA;;;CAGC,GACD,SAAS,yCAAmB,OAAO,EAAE,EAAE,EAAE,GAAG;IAC1C,MAAM,OAAO,IAAI;IACjB,sBAAsB,GACtB,MAAM,aAAa;QACjB,UAAU;QACV,SAAS;IACX;IACA,IAAI,gBAAgB;IACpB,IAAI,WAAW;IACf,8BAA8B,GAC9B,IAAI;IACJ,OAAO;IAEP;;;;;;;;;;;GAWC,GACD,SAAS,MAAM,IAAI;QACjB,8CAA8C;QAC9C,OAAO,mBAAmB;IAC5B;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,mBAAmB,IAAI;QAC9B,MAAM,OAAO,KAAK,MAAM,CAAC,KAAK,OAAO,SAAS,EAAE;QAChD,gBACE,QAAQ,IAAI,CAAC,EAAE,CAAC,SAAS,eACrB,IAAI,CAAC,EAAE,CAAC,eAAe,IAAI,CAAC,EAAE,EAAE,MAAM,SACtC;QACN,SAAS;QACT,QAAQ,MAAM;QACd,QAAQ,MAAM;QACd,QAAQ,MAAM;QACd,OAAO,aAAa;IACtB;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,aAAa,IAAI;QACxB,IAAI,SAAS,QAAQ;YACnB;YACA,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,WAAW,GACb,OAAO,IAAI;QAEb,QAAQ,KAAK;QACb,OAAO,CAAA,GAAA,oBAAY,EAAE,QACjB,CAAA,GAAA,mBAAW,EAAE,SAAS,YAAY,cAAc,QAChD,WAAW;IACjB;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,WAAW,IAAI;QACtB,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC7C,QAAQ,KAAK;YACb,OAAO,KAAK,YACR,GAAG,QACH,QAAQ,MAAM,2CAAqB,gBAAgB,OAAO;QAChE;QACA,QAAQ,MAAM;QACd,QAAQ,MAAM,eAAe;YAC3B,aAAa;QACf;QACA,OAAO,KAAK;IACd;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,KAAK,IAAI;QAChB,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC7C,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO,WAAW;QACpB;QACA,IAAI,CAAA,GAAA,oBAAY,EAAE,OAAO;YACvB,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO,CAAA,GAAA,mBAAW,EAAE,SAAS,YAAY,cAAc;QACzD;QACA,IAAI,SAAS,MAAM,SAAS,QAC1B,OAAO,IAAI;QAEb,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,WAAW,IAAI;QACtB,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OACtC,OAAO,WAAW;QAEpB,QAAQ,MAAM;QACd,QAAQ,MAAM,eAAe;YAC3B,aAAa;QACf;QACA,OAAO,KAAK;IACd;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,KAAK,IAAI;QAChB,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC7C,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO,WAAW;QACpB;QACA,IAAI,SAAS,MAAM,SAAS,QAC1B,OAAO,IAAI;QAEb,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;;;;GAYC,GACD,SAAS,eAAe,IAAI;QAC1B,OAAO,QAAQ,QAAQ,YAAY,OAAO,eAAe;IAC3D;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,cAAc,IAAI;QACzB,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,OAAO;IACT;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,aAAa,IAAI;QACxB,OAAO,gBAAgB,KAAK,CAAA,GAAA,oBAAY,EAAE,QACtC,CAAA,GAAA,mBAAW,EACT,SACA,oBACA,cACA,gBAAgB,GAChB,QACF,mBAAmB;IACzB;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,mBAAmB,IAAI;QAC9B,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OACtC,OAAO,QAAQ,MAAM,2CAAqB,gBAAgB,OAAO;QAEnE,QAAQ,MAAM;QACd,OAAO,aAAa;IACtB;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,aAAa,IAAI;QACxB,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC7C,QAAQ,KAAK;YACb,OAAO,mBAAmB;QAC5B;QACA,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,MAAM,IAAI;QACjB,QAAQ,KAAK;QACb,OAAO,GAAG;IACZ;IAEA;;;GAGC,GACD,SAAS,mBAAmB,OAAO,EAAE,EAAE,EAAE,GAAG;QAC1C,IAAI,OAAO;QACX,OAAO;QAEP;;;;KAIC,GACD,SAAS,YAAY,IAAI;YACvB,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,OAAO;QACT;QAEA;;;;;;;;;;;KAWC,GACD,SAAS,MAAM,IAAI;YACjB,gCAAgC;YAEhC,wCAAwC;YACxC,QAAQ,MAAM;YACd,OAAO,CAAA,GAAA,oBAAY,EAAE,QACjB,CAAA,GAAA,mBAAW,EACT,SACA,qBACA,cACA,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,kBACzC,YACA,GACJ,QACF,oBAAoB;QAC1B;QAEA;;;;;;;;;;;KAWC,GACD,SAAS,oBAAoB,IAAI;YAC/B,IAAI,SAAS,QAAQ;gBACnB,QAAQ,MAAM;gBACd,OAAO,cAAc;YACvB;YACA,OAAO,IAAI;QACb;QAEA;;;;;;;;;;;KAWC,GACD,SAAS,cAAc,IAAI;YACzB,IAAI,SAAS,QAAQ;gBACnB;gBACA,QAAQ,QAAQ;gBAChB,OAAO;YACT;YACA,IAAI,QAAQ,UAAU;gBACpB,QAAQ,KAAK;gBACb,OAAO,CAAA,GAAA,oBAAY,EAAE,QACjB,CAAA,GAAA,mBAAW,EAAE,SAAS,oBAAoB,cAAc,QACxD,mBAAmB;YACzB;YACA,OAAO,IAAI;QACb;QAEA;;;;;;;;;;;KAWC,GACD,SAAS,mBAAmB,IAAI;YAC9B,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OAAO;gBAC7C,QAAQ,KAAK;gBACb,OAAO,GAAG;YACZ;YACA,OAAO,IAAI;QACb;IACF;AACF;AAEA;;;CAGC,GACD,SAAS,kDAA4B,OAAO,EAAE,EAAE,EAAE,GAAG;IACnD,MAAM,OAAO,IAAI;IACjB,OAAO;IAEP;;;;GAIC,GACD,SAAS,MAAM,IAAI;QACjB,IAAI,SAAS,MACX,OAAO,IAAI;QAEb,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,OAAO;IACT;IAEA;;;;GAIC,GACD,SAAS,UAAU,IAAI;QACrB,OAAO,KAAK,OAAO,IAAI,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI,QAAQ,GAAG;IAC5D;AACF;;;;;;;AC/dA;;;;;;CAKC;;;AAKM,MAAM,4CAAe;IAC1B,MAAM;IACN,UAAU;AACZ;AAEA,sBAAsB,GACtB,MAAM,qCAAe;IACnB,UAAU;IACV,SAAS;AACX;AAEA;;;CAGC,GACD,SAAS,2CAAqB,OAAO,EAAE,EAAE,EAAE,GAAG;IAC5C,MAAM,OAAO,IAAI;IACjB,OAAO;IAEP;;;;;;;;;;;;;GAaC,GACD,SAAS,MAAM,IAAI;QACjB,4DAA4D;QAE5D,QAAQ,MAAM;QACd,qEAAqE;QACrE,sCAAsC;QACtC,OAAO,CAAA,GAAA,mBAAW,EAAE,SAAS,aAAa,cAAc,GAAO;IACjE;IAEA;;;;;;;;;GASC,GACD,SAAS,YAAY,IAAI;QACvB,MAAM,OAAO,KAAK,MAAM,CAAC,KAAK,OAAO,SAAS,EAAE;QAChD,OAAO,QACL,IAAI,CAAC,EAAE,CAAC,SAAS,gBACjB,IAAI,CAAC,EAAE,CAAC,eAAe,IAAI,CAAC,EAAE,EAAE,MAAM,UAAU,IAC9C,QAAQ,QACR,IAAI;IACV;IAEA;;;;;;;;;GASC,GACD,SAAS,QAAQ,IAAI;QACnB,IAAI,SAAS,MACX,OAAO,MAAM;QAEf,IAAI,CAAA,GAAA,yBAAiB,EAAE,OACrB,OAAO,QAAQ,QAAQ,oCAAc,SAAS,OAAO;QAEvD,QAAQ,MAAM;QACd,OAAO,OAAO;IAChB;IAEA;;;;;;;;;GASC,GACD,SAAS,OAAO,IAAI;QAClB,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC7C,QAAQ,KAAK;YACb,OAAO,QAAQ;QACjB;QACA,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA,kBAAkB,GAClB,SAAS,MAAM,IAAI;QACjB,QAAQ,KAAK;QACb,gDAAgD;QAChD,0BAA0B;QAC1B,8BAA8B;QAC9B,OAAO,GAAG;IACZ;AACF;AAEA;;;CAGC,GACD,SAAS,2CAAqB,OAAO,EAAE,EAAE,EAAE,GAAG;IAC5C,MAAM,OAAO,IAAI;IACjB,OAAO;IAEP;;;;;;;;;;GAUC,GACD,SAAS,aAAa,IAAI;QACxB,6CAA6C;QAC7C,4CAA4C;QAC5C,IAAI,KAAK,OAAO,IAAI,CAAC,KAAK,MAAM,KAAK,EACnC,OAAO,IAAI;QAEb,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,OAAO;QACT;QAEA,iEAAiE;QACjE,qDAAqD;QACrD,gBAAgB;QAChB,EAAE;QACF,qEAAqE;QACrE,sCAAsC;QACtC,OAAO,CAAA,GAAA,mBAAW,EAAE,SAAS,aAAa,cAAc,GAAO;IACjE;IAEA;;;;;;;;;GASC,GACD,SAAS,YAAY,IAAI;QACvB,MAAM,OAAO,KAAK,MAAM,CAAC,KAAK,OAAO,SAAS,EAAE;QAChD,OAAO,QACL,IAAI,CAAC,EAAE,CAAC,SAAS,gBACjB,IAAI,CAAC,EAAE,CAAC,eAAe,IAAI,CAAC,EAAE,EAAE,MAAM,UAAU,IAC9C,GAAG,QACH,CAAA,GAAA,yBAAiB,EAAE,QACnB,aAAa,QACb,IAAI;IACV;AACF;;;;;;;ACtLA;;;;;;;;;CAQC;AAIM,MAAM,4CAAW;IACtB,MAAM;IACN,UAAU;IACV,SAAS;cACT;AACF;AAEA,wDAAwD;AACxD,qBAAqB,GACrB,SAAS,sCAAgB,MAAM;IAC7B,IAAI,gBAAgB,OAAO,SAAS;IACpC,IAAI,iBAAiB;IACrB,mBAAmB,GACnB,IAAI;IACJ,+BAA+B,GAC/B,IAAI;IAEJ,8CAA8C;IAC9C,IACE,AAAC,CAAA,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,SAAS,gBAClC,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,SAAS,OAAM,KAC1C,CAAA,MAAM,CAAC,cAAc,CAAC,EAAE,CAAC,SAAS,gBACjC,MAAM,CAAC,cAAc,CAAC,EAAE,CAAC,SAAS,OAAM,GAC1C;QACA,QAAQ;QAER,oBAAoB;QACpB,MAAO,EAAE,QAAQ,cACf,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,gBAAgB;YAC5C,wBAAwB;YACxB,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,OAAO;YACjC,MAAM,CAAC,cAAc,CAAC,EAAE,CAAC,OAAO;YAChC,kBAAkB;YAClB,iBAAiB;YACjB;QACF;IAEJ;IAEA,kCAAkC;IAClC,QAAQ,iBAAiB;IACzB;IACA,MAAO,EAAE,SAAS,cAAe;QAC/B,IAAI,UAAU,WACZ;YAAA,IAAI,UAAU,iBAAiB,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,cACvD,QAAQ;QACV,OACK,IACL,UAAU,iBACV,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,cAC1B;YACA,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO;YACxB,IAAI,UAAU,QAAQ,GAAG;gBACvB,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC;gBAC5C,OAAO,OAAO,QAAQ,GAAG,QAAQ,QAAQ;gBACzC,iBAAiB,QAAQ,QAAQ;gBACjC,QAAQ,QAAQ;YAClB;YACA,QAAQ;QACV;IACF;IACA,OAAO;AACT;AAEA;;;CAGC,GACD,SAAS,+BAAS,IAAI;IACpB,4DAA4D;IAC5D,OACE,SAAS,MACT,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,SAAS,EAAE,CAAC,EAAE,CAAC,SAAS;AAEpD;AAEA;;;CAGC,GACD,SAAS,uCAAiB,OAAO,EAAE,EAAE,EAAE,GAAG;IACxC,MAAM,OAAO,IAAI;IACjB,IAAI,WAAW;IACf,mBAAmB,GACnB,IAAI;IACJ,kBAAkB,GAClB,IAAI;IACJ,OAAO;IAEP;;;;;;;;;;;GAWC,GACD,SAAS,MAAM,IAAI;QACjB,QAAQ,MAAM;QACd,QAAQ,MAAM;QACd,OAAO,aAAa;IACtB;IAEA;;;;;;;;;GASC,GACD,SAAS,aAAa,IAAI;QACxB,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB;YACA,OAAO;QACT;QACA,QAAQ,KAAK;QACb,OAAO,QAAQ;IACjB;IAEA;;;;;;;;;GASC,GACD,SAAS,QAAQ,IAAI;QACnB,OAAO;QACP,IAAI,SAAS,MACX,OAAO,IAAI;QAGb,qEAAqE;QACrE,sBAAsB;QACtB,wDAAwD;QACxD,IAAI,SAAS,IAAI;YACf,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,OAAO;QACT;QAEA,qCAAqC;QACrC,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ,MAAM;YACtB,OAAO;YACP,OAAO,cAAc;QACvB;QACA,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,OAAO;QACT;QAEA,QAAQ;QACR,QAAQ,MAAM;QACd,OAAO,KAAK;IACd;IAEA;;;;;;;;;GASC,GACD,SAAS,KAAK,IAAI;QAChB,IACE,SAAS,QACT,SAAS,MACT,SAAS,MACT,CAAA,GAAA,yBAAiB,EAAE,OACnB;YACA,QAAQ,KAAK;YACb,OAAO,QAAQ;QACjB;QACA,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;GASC,GACD,SAAS,cAAc,IAAI;QACzB,QAAQ;QACR,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB;YACA,OAAO;QACT;QAEA,QAAQ;QACR,IAAI,SAAS,UAAU;YACrB,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO,GAAG;QACZ;QAEA,sCAAsC;QACtC,MAAM,OAAO;QACb,OAAO,KAAK;IACd;AACF;;;;;;;AC5OA;;;;;;CAKC;;;;;;;;;;;;;AAcM,MAAM,4CAAa;IACxB,MAAM;IACN,UAAU;AACZ;AAEA,sBAAsB,GACtB,MAAM,oCAAc;IAClB,UAAU;IACV,SAAS;AACX;AAEA;;;CAGC,GACD,SAAS,yCAAmB,OAAO,EAAE,EAAE,EAAE,GAAG;IAC1C,MAAM,OAAO,IAAI;IACjB,mBAAmB,GACnB,IAAI;IACJ,OAAO;IAEP;;;;;;;;;GASC,GACD,SAAS,MAAM,IAAI;QACjB,2DAA2D;QAC3D,oDAAoD;QACpD,sDAAsD;QACtD,QAAQ,MAAM;QACd,OAAO,OAAO;IAChB;IAEA;;;;;;;;;GASC,GACD,SAAS,OAAO,IAAI;QAClB,sDAAsD;QAEtD,OAAO,CAAA,GAAA,mBAAW,EAAE,KAClB,MACA,SACA,YACA,2DAA2D;QAC3D,KACA,mBACA,yBACA,yBACA;IACJ;IAEA;;;;;;;;;GASC,GACD,SAAS,WAAW,IAAI;QACtB,aAAa,CAAA,GAAA,0BAAkB,EAC7B,KAAK,eAAe,KAAK,MAAM,CAAC,KAAK,OAAO,SAAS,EAAE,CAAC,EAAE,EAAE,MAAM,GAAG;QAEvE,IAAI,SAAS,IAAI;YACf,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,YAAY,IAAI;QACvB,gCAAgC;QAChC,OAAO,CAAA,GAAA,gCAAwB,EAAE,QAC7B,CAAA,GAAA,wBAAgB,EAAE,SAAS,mBAAmB,QAC9C,kBAAkB;IACxB;IAEA;;;;;;;;;GASC,GACD,SAAS,kBAAkB,IAAI;QAC7B,OAAO,CAAA,GAAA,yBAAiB,EACtB,SACA,kBACA,2DAA2D;QAC3D,KACA,yBACA,gCACA,sCACA,4BACA,+BACA;IACJ;IAEA;;;;;;;;;GASC,GACD,SAAS,iBAAiB,IAAI;QAC5B,OAAO,QAAQ,QAAQ,mCAAa,OAAO,OAAO;IACpD;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,MAAM,IAAI;QACjB,OAAO,CAAA,GAAA,oBAAY,EAAE,QACjB,CAAA,GAAA,mBAAW,EAAE,SAAS,iBAAiB,cAAc,QACrD,gBAAgB;IACtB;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,gBAAgB,IAAI;QAC3B,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC7C,QAAQ,KAAK;YAEb,wCAAwC;YACxC,wDAAwD;YACxD,kDAAkD;YAClD,KAAK,OAAO,QAAQ,KAAK;YAEzB,kCAAkC;YAClC,4BAA4B;YAC5B,6BAA6B;YAC7B,OAAO,GAAG;QACZ;QACA,OAAO,IAAI;IACb;AACF;AAEA;;;CAGC,GACD,SAAS,0CAAoB,OAAO,EAAE,EAAE,EAAE,GAAG;IAC3C,OAAO;IAEP;;;;;;;;;;;GAWC,GACD,SAAS,YAAY,IAAI;QACvB,OAAO,CAAA,GAAA,gCAAwB,EAAE,QAC7B,CAAA,GAAA,wBAAgB,EAAE,SAAS,cAAc,QACzC,IAAI;IACV;IAEA;;;;;;;;;;GAUC,GACD,SAAS,aAAa,IAAI;QACxB,OAAO,CAAA,GAAA,mBAAW,EAChB,SACA,YACA,KACA,mBACA,yBACA,yBACA;IACJ;IAEA;;;;;;;;;GASC,GACD,SAAS,WAAW,IAAI;QACtB,OAAO,CAAA,GAAA,oBAAY,EAAE,QACjB,CAAA,GAAA,mBAAW,EAAE,SAAS,8BAA8B,cAAc,QAClE,6BAA6B;IACnC;IAEA;;;;;;;;;GASC,GACD,SAAS,6BAA6B,IAAI;QACxC,OAAO,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,QAAQ,GAAG,QAAQ,IAAI;IACpE;AACF;;;;;;AC7RA;;;;;CAIC;AA4CM,SAAS,0CACd,OAAO,EACP,EAAE,EACF,GAAG,EACH,IAAI,EACJ,WAAW,EACX,iBAAiB,EACjB,OAAO,EACP,UAAU,EACV,GAAG;IAEH,MAAM,QAAQ,OAAO,OAAO;IAC5B,IAAI,UAAU;IACd,OAAO;IAEP;;;;;;;;;;;GAWC,GACD,SAAS,MAAM,IAAI;QACjB,IAAI,SAAS,IAAI;YACf,QAAQ,MAAM;YACd,QAAQ,MAAM;YACd,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,OAAO;QACT;QAEA,uCAAuC;QACvC,IAAI,SAAS,QAAQ,SAAS,MAAM,SAAS,MAAM,CAAA,GAAA,mBAAW,EAAE,OAC9D,OAAO,IAAI;QAEb,QAAQ,MAAM;QACd,QAAQ,MAAM;QACd,QAAQ,MAAM;QACd,QAAQ,MAAM,eAAe;YAC3B,aAAa;QACf;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,eAAe,IAAI;QAC1B,IAAI,SAAS,IAAI;YACf,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO;QACT;QACA,QAAQ,MAAM;QACd,QAAQ,MAAM,eAAe;YAC3B,aAAa;QACf;QACA,OAAO,SAAS;IAClB;IAEA;;;;;;;;;GASC,GACD,SAAS,SAAS,IAAI;QACpB,IAAI,SAAS,IAAI;YACf,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO,eAAe;QACxB;QACA,IAAI,SAAS,QAAQ,SAAS,MAAM,CAAA,GAAA,yBAAiB,EAAE,OACrD,OAAO,IAAI;QAEb,QAAQ,QAAQ;QAChB,OAAO,SAAS,KAAK,iBAAiB;IACxC;IAEA;;;;;;;;;GASC,GACD,SAAS,eAAe,IAAI;QAC1B,IAAI,SAAS,MAAM,SAAS,MAAM,SAAS,IAAI;YAC7C,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,SAAS;IAClB;IAEA;;;;;;;;;GASC,GACD,SAAS,IAAI,IAAI;QACf,IACE,CAAC,WACA,CAAA,SAAS,QAAQ,SAAS,MAAM,CAAA,GAAA,gCAAwB,EAAE,KAAI,GAC/D;YACA,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO,GAAG;QACZ;QACA,IAAI,UAAU,SAAS,SAAS,IAAI;YAClC,QAAQ,QAAQ;YAChB;YACA,OAAO;QACT;QACA,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB;YACA,OAAO;QACT;QAEA,oDAAoD;QACpD,qEAAqE;QACrE,WAAW;QACX,IAAI,SAAS,QAAQ,SAAS,MAAM,SAAS,MAAM,CAAA,GAAA,mBAAW,EAAE,OAC9D,OAAO,IAAI;QAEb,QAAQ,QAAQ;QAChB,OAAO,SAAS,KAAK,YAAY;IACnC;IAEA;;;;;;;;;GASC,GACD,SAAS,UAAU,IAAI;QACrB,IAAI,SAAS,MAAM,SAAS,MAAM,SAAS,IAAI;YAC7C,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,IAAI;IACb;AACF;;;;;;;AChOA;;;;;;CAKC;AAkCM,SAAS,0CAAa,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU;IACzE,MAAM,OAAO,IAAI;IACjB,IAAI,OAAO;IACX,oBAAoB,GACpB,IAAI;IACJ,OAAO;IAEP;;;;;;;;;GASC,GACD,SAAS,MAAM,IAAI;QACjB,QAAQ,MAAM;QACd,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,QAAQ,MAAM;QACd,OAAO;IACT;IAEA;;;;;;;;;GASC,GACD,SAAS,QAAQ,IAAI;QACnB,IACE,OAAO,OACP,SAAS,QACT,SAAS,MACR,SAAS,MAAM,CAAC,QACjB,uDAAuD;QACvD,wEAAwE;QACxE,2BAA2B;QAC3B,yBAAyB;QACzB,oBAAoB,GACnB,SAAS,MACR,CAAC,QACD,4BAA4B,KAAK,OAAO,YAE1C,OAAO,IAAI;QAEb,IAAI,SAAS,IAAI;YACf,QAAQ,KAAK;YACb,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO;QACT;QAEA,gDAAgD;QAChD,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,OAAO;QACT;QACA,QAAQ,MAAM,eAAe;YAC3B,aAAa;QACf;QACA,OAAO,YAAY;IACrB;IAEA;;;;;;;;;GASC,GACD,SAAS,YAAY,IAAI;QACvB,IACE,SAAS,QACT,SAAS,MACT,SAAS,MACT,CAAA,GAAA,yBAAiB,EAAE,SACnB,SAAS,KACT;YACA,QAAQ,KAAK;YACb,OAAO,QAAQ;QACjB;QACA,QAAQ,QAAQ;QAChB,IAAI,CAAC,MAAM,OAAO,CAAC,CAAA,GAAA,oBAAY,EAAE;QACjC,OAAO,SAAS,KAAK,cAAc;IACrC;IAEA;;;;;;;;;GASC,GACD,SAAS,YAAY,IAAI;QACvB,IAAI,SAAS,MAAM,SAAS,MAAM,SAAS,IAAI;YAC7C,QAAQ,QAAQ;YAChB;YACA,OAAO;QACT;QACA,OAAO,YAAY;IACrB;AACF;;;;;;;AC9JA;;;;;;CAKC;;;AAmCM,SAAS,0CAAa,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU;IACzE,8BAA8B,GAC9B,IAAI;IACJ,OAAO;IAEP;;;;;;;;;GASC,GACD,SAAS,MAAM,IAAI;QACjB,IAAI,SAAS,MAAM,SAAS,MAAM,SAAS,IAAI;YAC7C,QAAQ,MAAM;YACd,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,SAAS,SAAS,KAAK,KAAK;YAC5B,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,MAAM,IAAI;QACjB,IAAI,SAAS,QAAQ;YACnB,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO;QACT;QACA,QAAQ,MAAM;QACd,OAAO,QAAQ;IACjB;IAEA;;;;;;;;;GASC,GACD,SAAS,QAAQ,IAAI;QACnB,IAAI,SAAS,QAAQ;YACnB,QAAQ,KAAK;YACb,OAAO,MAAM;QACf;QACA,IAAI,SAAS,MACX,OAAO,IAAI;QAGb,4CAA4C;QAC5C,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,uDAAuD;YACvD,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,OAAO,CAAA,GAAA,mBAAW,EAAE,SAAS,SAAS;QACxC;QACA,QAAQ,MAAM,eAAe;YAC3B,aAAa;QACf;QACA,OAAO,OAAO;IAChB;IAEA;;;;GAIC,GACD,SAAS,OAAO,IAAI;QAClB,IAAI,SAAS,UAAU,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAChE,QAAQ,KAAK;YACb,OAAO,QAAQ;QACjB;QACA,QAAQ,QAAQ;QAChB,OAAO,SAAS,KAAK,SAAS;IAChC;IAEA;;;;;;;;;GASC,GACD,SAAS,OAAO,IAAI;QAClB,IAAI,SAAS,UAAU,SAAS,IAAI;YAClC,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,OAAO;IAChB;AACF;;;;;;;AC3JA;;;;CAGC;;;AAsBM,SAAS,0CAAkB,OAAO,EAAE,EAAE;IAC3C,oBAAoB,GACpB,IAAI;IACJ,OAAO;IAEP,kBAAkB,GAClB,SAAS,MAAM,IAAI;QACjB,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,OAAO;YACP,OAAO;QACT;QACA,IAAI,CAAA,GAAA,oBAAY,EAAE,OAChB,OAAO,CAAA,GAAA,mBAAW,EAChB,SACA,OACA,OAAO,eAAe,cACtB;QAEJ,OAAO,GAAG;IACZ;AACF;;;;;;;AChDA;;;;;;;;;;;;;;;;;;CAkBC,GACM,SAAS,0CAAoB,KAAK;IACvC,OACE,KACE,gCAAgC;KAC/B,QAAQ,eAAe,IACxB,QAAQ;KACP,QAAQ,UAAU,GACnB,qEAAqE;IACrE,iEAAiE;IACjE,aAAa;IACb,iEAAiE;IACjE,uEAAuE;IACvE,mCAAmC;KAClC,cACA;AAEP;;;;;;;;ACnCA;;;;;;CAKC;AAIM,MAAM,4CAAkB;IAC7B,MAAM;IACN,UAAU;AACZ;AAEA;;;CAGC,GACD,SAAS,8CAAwB,OAAO,EAAE,EAAE,EAAE,GAAG;IAC/C,OAAO;IAEP;;;;;;;;;;GAUC,GACD,SAAS,MAAM,IAAI;QACjB,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;;GAUC,GACD,SAAS,MAAM,IAAI;QACjB,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,QAAQ,KAAK;YACb,OAAO,GAAG;QACZ;QACA,OAAO,IAAI;IACb;AACF;;;;;;;ACxDA;;;;;;;;CAOC;;;;;AAUM,MAAM,4CAAa;IACxB,MAAM;IACN,UAAU;IACV,SAAS;AACX;AAEA,qBAAqB,GACrB,SAAS,wCAAkB,MAAM,EAAE,OAAO;IACxC,IAAI,aAAa,OAAO,SAAS;IACjC,IAAI,eAAe;IACnB,kBAAkB,GAClB,IAAI;IACJ,kBAAkB,GAClB,IAAI;IAEJ,0CAA0C;IAC1C,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,SAAS,cACnC,gBAAgB;IAGlB,0CAA0C;IAC1C,IACE,aAAa,IAAI,gBACjB,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,cAE/B,cAAc;IAEhB,IACE,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,wBAC9B,CAAA,iBAAiB,aAAa,KAC5B,aAAa,IAAI,gBAChB,MAAM,CAAC,aAAa,EAAE,CAAC,EAAE,CAAC,SAAS,YAAY,GAEnD,cAAc,eAAe,MAAM,aAAa,IAAI;IAEtD,IAAI,aAAa,cAAc;QAC7B,UAAU;YACR,MAAM;YACN,OAAO,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;YAC/B,KAAK,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC;QAC7B;QACA,OAAO;YACL,MAAM;YACN,OAAO,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;YAC/B,KAAK,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC;YAC3B,aAAa;QACf;QACA,CAAA,GAAA,aAAK,EAAE,QAAQ,cAAc,aAAa,eAAe,GAAG;YAC1D;gBAAC;gBAAS;gBAAS;aAAQ;YAC3B;gBAAC;gBAAS;gBAAM;aAAQ;YACxB;gBAAC;gBAAQ;gBAAM;aAAQ;YACvB;gBAAC;gBAAQ;gBAAS;aAAQ;SAC3B;IACH;IACA,OAAO;AACT;AAEA;;;CAGC,GACD,SAAS,yCAAmB,OAAO,EAAE,EAAE,EAAE,GAAG;IAC1C,IAAI,OAAO;IACX,OAAO;IAEP;;;;;;;;;GASC,GACD,SAAS,MAAM,IAAI;QACjB,0CAA0C;QAC1C,QAAQ,MAAM;QACd,OAAO,OAAO;IAChB;IAEA;;;;;;;;;GASC,GACD,SAAS,OAAO,IAAI;QAClB,QAAQ,MAAM;QACd,OAAO,aAAa;IACtB;IAEA;;;;;;;;;GASC,GACD,SAAS,aAAa,IAAI;QACxB,IAAI,SAAS,MAAM,SAAS,GAAG;YAC7B,QAAQ,QAAQ;YAChB,OAAO;QACT;QAEA,2BAA2B;QAC3B,IAAI,SAAS,QAAQ,CAAA,GAAA,gCAAwB,EAAE,OAAO;YACpD,QAAQ,KAAK;YACb,OAAO,QAAQ;QACjB;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,QAAQ,IAAI;QACnB,IAAI,SAAS,IAAI;YACf,QAAQ,MAAM;YACd,OAAO,gBAAgB;QACzB;QACA,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC7C,QAAQ,KAAK;YACb,uCAAuC;YACvC,6BAA6B;YAC7B,8BAA8B;YAC9B,OAAO,GAAG;QACZ;QACA,IAAI,CAAA,GAAA,oBAAY,EAAE,OAChB,OAAO,CAAA,GAAA,mBAAW,EAAE,SAAS,SAAS,cAAc;QAGtD,6DAA6D;QAC7D,sCAAsC;QACtC,QAAQ,MAAM;QACd,OAAO,KAAK;IACd;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,gBAAgB,IAAI;QAC3B,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,QAAQ,KAAK;QACb,OAAO,QAAQ;IACjB;IAEA;;;;;;;;;GASC,GACD,SAAS,KAAK,IAAI;QAChB,IAAI,SAAS,QAAQ,SAAS,MAAM,CAAA,GAAA,gCAAwB,EAAE,OAAO;YACnE,QAAQ,KAAK;YACb,OAAO,QAAQ;QACjB;QACA,QAAQ,QAAQ;QAChB,OAAO;IACT;AACF;;;;;;;AChNA;;;;;;;;CAOC;;;;;AAaM,MAAM,4CAAW;IACtB,MAAM;IACN,UAAU;IACV,WAAW;IACX,UAAU;AACZ;AAEA,sBAAsB,GACtB,MAAM,wCAAkB;IACtB,UAAU;IACV,SAAS;AACX;AACA,MAAM,iDAA2B;IAC/B,UAAU;IACV,SAAS;AACX;AAEA,qBAAqB,GACrB,SAAS,wCAAkB,MAAM;IAC/B,IAAI,QAAQ,OAAO;IACnB,MAAO,QAAS;QACd,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,WAAW,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,YAC5D;IAEJ;IACA,IAAI,QAAQ,KAAK,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,SAAS,cAAc;QAC3D,0CAA0C;QAC1C,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC;QAC9C,+CAA+C;QAC/C,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,QAAQ,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC;QAClD,0BAA0B;QAC1B,OAAO,OAAO,QAAQ,GAAG;IAC3B;IACA,OAAO;AACT;AAEA;;;CAGC,GACD,SAAS,uCAAiB,OAAO,EAAE,EAAE,EAAE,GAAG;IACxC,MAAM,OAAO,IAAI;IACjB,mBAAmB,GACnB,IAAI;IACJ,oBAAoB,GACpB,IAAI;IACJ,mBAAmB,GACnB,IAAI;IACJ,mBAAmB,GACnB,IAAI;IACJ,iBAAiB,GACjB,IAAI;IACJ,OAAO;IAEP;;;;;;;;;GASC,GACD,SAAS,MAAM,IAAI;QACjB,0CAA0C;QAC1C,OAAO,OAAO;IAChB;IAEA;;;;;;;;;GASC,GACD,SAAS,OAAO,IAAI;QAClB,QAAQ,MAAM;QACd,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;;;;;GAaC,GACD,SAAS,KAAK,IAAI;QAChB,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,aAAa;YACb,OAAO;QACT;QACA,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,SAAS;YACT,SAAS;YACT,4BAA4B;YAC5B,4CAA4C;YAC5C,yEAAyE;YACzE,uEAAuE;YACvE,OAAO,KAAK,YAAY,KAAK;QAC/B;QAEA,sBAAsB;QACtB,IAAI,CAAA,GAAA,iBAAS,EAAE,OAAO;YACpB,QAAQ,QAAQ;YAChB,8BAA8B;YAC9B,SAAS,OAAO,aAAa;YAC7B,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;GAaC,GACD,SAAS,gBAAgB,IAAI;QAC3B,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,SAAS;YACT,OAAO;QACT;QACA,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,SAAS;YACT,QAAQ;YACR,OAAO;QACT;QAEA,sBAAsB;QACtB,IAAI,CAAA,GAAA,iBAAS,EAAE,OAAO;YACpB,QAAQ,QAAQ;YAChB,SAAS;YACT,6BAA6B;YAC7B,4BAA4B;YAC5B,OAAO,KAAK,YAAY,KAAK;QAC/B;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,kBAAkB,IAAI;QAC7B,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,6BAA6B;YAC7B,4BAA4B;YAC5B,OAAO,KAAK,YAAY,KAAK;QAC/B;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,gBAAgB,IAAI;QAC3B,MAAM,QAAQ;QACd,IAAI,SAAS,MAAM,WAAW,UAAU;YACtC,QAAQ,QAAQ;YAChB,IAAI,UAAU,MAAM,QAClB,6BAA6B;YAC7B,4BAA4B;YAC5B,OAAO,KAAK,YAAY,KAAK;YAE/B,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,cAAc,IAAI;QACzB,IAAI,CAAA,GAAA,iBAAS,EAAE,OAAO;YACpB,QAAQ,QAAQ;YAChB,8BAA8B;YAC9B,SAAS,OAAO,aAAa;YAC7B,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,QAAQ,IAAI;QACnB,IACE,SAAS,QACT,SAAS,MACT,SAAS,MACT,CAAA,GAAA,gCAAwB,EAAE,OAC1B;YACA,MAAM,QAAQ,SAAS;YACvB,MAAM,OAAO,OAAO;YACpB,IAAI,CAAC,SAAS,CAAC,cAAc,CAAA,GAAA,mBAAW,EAAE,SAAS,OAAO;gBACxD,SAAS;gBACT,6BAA6B;gBAC7B,4BAA4B;gBAC5B,OAAO,KAAK,YAAY,GAAG,QAAQ,aAAa;YAClD;YACA,IAAI,CAAA,GAAA,qBAAa,EAAE,SAAS,OAAO,gBAAgB;gBACjD,SAAS;gBACT,IAAI,OAAO;oBACT,QAAQ,QAAQ;oBAChB,OAAO;gBACT;gBAEA,6BAA6B;gBAC7B,4BAA4B;gBAC5B,OAAO,KAAK,YAAY,GAAG,QAAQ,aAAa;YAClD;YACA,SAAS;YACT,kDAAkD;YAClD,OAAO,KAAK,aAAa,CAAC,KAAK,OAAO,IAAI,CAAC,KAAK,MAAM,KAAK,GACvD,IAAI,QACJ,aACA,wBAAwB,QACxB,4BAA4B;QAClC;QAEA,gCAAgC;QAChC,IAAI,SAAS,MAAM,CAAA,GAAA,wBAAgB,EAAE,OAAO;YAC1C,QAAQ,QAAQ;YAChB,UAAU,OAAO,aAAa;YAC9B,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,iBAAiB,IAAI;QAC5B,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,6BAA6B;YAC7B,4BAA4B;YAC5B,OAAO,KAAK,YAAY,KAAK;QAC/B;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,wBAAwB,IAAI;QACnC,IAAI,CAAA,GAAA,oBAAY,EAAE,OAAO;YACvB,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,YAAY;IACrB;IAEA;;;;;;;;;;;;;;;;;;;;;;GAsBC,GACD,SAAS,4BAA4B,IAAI;QACvC,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QAEA,wCAAwC;QACxC,IAAI,SAAS,MAAM,SAAS,MAAM,CAAA,GAAA,iBAAS,EAAE,OAAO;YAClD,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,CAAA,GAAA,oBAAY,EAAE,OAAO;YACvB,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,YAAY;IACrB;IAEA;;;;;;;;;;;;;GAaC,GACD,SAAS,sBAAsB,IAAI;QACjC,mDAAmD;QACnD,IACE,SAAS,MACT,SAAS,MACT,SAAS,MACT,SAAS,MACT,CAAA,GAAA,wBAAgB,EAAE,OAClB;YACA,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,2BAA2B;IACpC;IAEA;;;;;;;;;;;;GAYC,GACD,SAAS,2BAA2B,IAAI;QACtC,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,CAAA,GAAA,oBAAY,EAAE,OAAO;YACvB,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,4BAA4B;IACrC;IAEA;;;;;;;;;;;;GAYC,GACD,SAAS,6BAA6B,IAAI;QACxC,IACE,SAAS,QACT,SAAS,MACT,SAAS,MACT,SAAS,MACT,SAAS,IAET,OAAO,IAAI;QAEb,IAAI,SAAS,MAAM,SAAS,IAAI;YAC9B,QAAQ,QAAQ;YAChB,UAAU;YACV,OAAO;QACT;QACA,IAAI,CAAA,GAAA,oBAAY,EAAE,OAAO;YACvB,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,+BAA+B;IACxC;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,6BAA6B,IAAI;QACxC,IAAI,SAAS,SAAS;YACpB,QAAQ,QAAQ;YAChB,UAAU;YACV,OAAO;QACT;QACA,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OACtC,OAAO,IAAI;QAEb,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;GASC,GACD,SAAS,+BAA+B,IAAI;QAC1C,IACE,SAAS,QACT,SAAS,MACT,SAAS,MACT,SAAS,MACT,SAAS,MACT,SAAS,MACT,SAAS,MACT,SAAS,MACT,CAAA,GAAA,gCAAwB,EAAE,OAE1B,OAAO,2BAA2B;QAEpC,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;;GAUC,GACD,SAAS,kCAAkC,IAAI;QAC7C,IAAI,SAAS,MAAM,SAAS,MAAM,CAAA,GAAA,oBAAY,EAAE,OAC9C,OAAO,4BAA4B;QAErC,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,YAAY,IAAI;QACvB,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,cAAc,IAAI;QACzB,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OACtC,6BAA6B;QAC7B,4BAA4B;QAC5B,OAAO,aAAa;QAEtB,IAAI,CAAA,GAAA,oBAAY,EAAE,OAAO;YACvB,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,aAAa,IAAI;QACxB,IAAI,SAAS,MAAM,WAAW,GAAG;YAC/B,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,SAAS,MAAM,WAAW,GAAG;YAC/B,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,SAAS,MAAM,WAAW,GAAG;YAC/B,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,SAAS,MAAM,WAAW,GAAG;YAC/B,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,SAAS,MAAM,WAAW,GAAG;YAC/B,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,CAAA,GAAA,yBAAiB,EAAE,SAAU,CAAA,WAAW,KAAK,WAAW,CAAA,GAAI;YAC9D,QAAQ,KAAK;YACb,OAAO,QAAQ,MACb,uCACA,mBACA,mBACA;QACJ;QACA,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC7C,QAAQ,KAAK;YACb,OAAO,kBAAkB;QAC3B;QACA,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;;GAUC,GACD,SAAS,kBAAkB,IAAI;QAC7B,OAAO,QAAQ,MACb,gDACA,0BACA,mBACA;IACJ;IAEA;;;;;;;;;;GAUC,GACD,SAAS,yBAAyB,IAAI;QACpC,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,OAAO;IACT;IAEA;;;;;;;;;;GAUC,GACD,SAAS,mBAAmB,IAAI;QAC9B,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OACtC,OAAO,kBAAkB;QAE3B,QAAQ,MAAM;QACd,OAAO,aAAa;IACtB;IAEA;;;;;;;;;GASC,GACD,SAAS,0BAA0B,IAAI;QACrC,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,aAAa;IACtB;IAEA;;;;;;;;;GASC,GACD,SAAS,uBAAuB,IAAI;QAClC,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,SAAS;YACT,OAAO;QACT;QACA,OAAO,aAAa;IACtB;IAEA;;;;;;;;;GASC,GACD,SAAS,sBAAsB,IAAI;QACjC,IAAI,SAAS,IAAI;YACf,MAAM,OAAO,OAAO;YACpB,IAAI,CAAA,GAAA,mBAAW,EAAE,SAAS,OAAO;gBAC/B,QAAQ,QAAQ;gBAChB,OAAO;YACT;YACA,OAAO,aAAa;QACtB;QACA,IAAI,CAAA,GAAA,iBAAS,EAAE,SAAS,OAAO,SAAS,GAAG;YACzC,QAAQ,QAAQ;YAChB,8BAA8B;YAC9B,UAAU,OAAO,aAAa;YAC9B,OAAO;QACT;QACA,OAAO,aAAa;IACtB;IAEA;;;;;;;;;GASC,GACD,SAAS,wBAAwB,IAAI;QACnC,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,aAAa;IACtB;IAEA;;;;;;;;;;;;;;;;;GAiBC,GACD,SAAS,8BAA8B,IAAI;QACzC,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QAEA,eAAe;QACf,IAAI,SAAS,MAAM,WAAW,GAAG;YAC/B,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,aAAa;IACtB;IAEA;;;;;;;;;GASC,GACD,SAAS,kBAAkB,IAAI;QAC7B,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC7C,QAAQ,KAAK;YACb,OAAO,kBAAkB;QAC3B;QACA,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;GASC,GACD,SAAS,kBAAkB,IAAI;QAC7B,QAAQ,KAAK;QACb,6BAA6B;QAC7B,8BAA8B;QAC9B,yBAAyB;QACzB,6BAA6B;QAC7B,OAAO,GAAG;IACZ;AACF;AAEA;;;CAGC,GACD,SAAS,uDAAiC,OAAO,EAAE,EAAE,EAAE,GAAG;IACxD,MAAM,OAAO,IAAI;IACjB,OAAO;IAEP;;;;;;;;;;GAUC,GACD,SAAS,MAAM,IAAI;QACjB,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;;GAUC,GACD,SAAS,MAAM,IAAI;QACjB,OAAO,KAAK,OAAO,IAAI,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI,QAAQ,GAAG;IAC5D;AACF;AAEA;;;CAGC,GACD,SAAS,8CAAwB,OAAO,EAAE,EAAE,EAAE,GAAG;IAC/C,OAAO;IAEP;;;;;;;;;;GAUC,GACD,SAAS,MAAM,IAAI;QACjB,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,OAAO,QAAQ,QAAQ,CAAA,GAAA,gBAAQ,GAAG,IAAI;IACxC;AACF;;;;;;;ACn5BA;;;;;;;;;;;;;;CAcC,GACM,MAAM,4CAAiB;IAC5B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAcM,MAAM,2CAAe;IAAC;IAAO;IAAU;IAAS;CAAW;;;;;;;;AC5FlE;;;;;;;CAMC;;;AAWM,MAAM,4CAAW;IACtB,MAAM;IACN,UAAU;AACZ;AAEA;;;CAGC,GACD,SAAS,uCAAiB,OAAO,EAAE,EAAE,EAAE,GAAG;IACxC,MAAM,OAAO,IAAI;IACjB,0CAA0C,GAC1C,IAAI;IACJ,mBAAmB,GACnB,IAAI;IACJ,kBAAkB,GAClB,IAAI;IACJ,OAAO;IAEP;;;;;;;;;GASC,GACD,SAAS,MAAM,IAAI;QACjB,QAAQ,MAAM;QACd,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;;;;;GAaC,GACD,SAAS,KAAK,IAAI;QAChB,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QAEA,sBAAsB;QACtB,IAAI,CAAA,GAAA,iBAAS,EAAE,OAAO;YACpB,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;GAaC,GACD,SAAS,gBAAgB,IAAI;QAC3B,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,QAAQ;YACR,OAAO;QACT;QACA,IAAI,CAAA,GAAA,iBAAS,EAAE,OAAO;YACpB,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,kBAAkB,IAAI;QAC7B,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,QAAQ,IAAI;QACnB,IAAI,SAAS,MACX,OAAO,IAAI;QAEb,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,cAAc;YACd,OAAO,iBAAiB;QAC1B;QACA,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;GASC,GACD,SAAS,aAAa,IAAI;QACxB,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,QAAQ;IACjB;IAEA;;;;;;;;;GASC,GACD,SAAS,WAAW,IAAI;QACtB,OAAO,SAAS,KACZ,IAAI,QACJ,SAAS,KACT,aAAa,QACb,QAAQ;IACd;IAEA;;;;;;;;;GASC,GACD,SAAS,gBAAgB,IAAI;QAC3B,MAAM,QAAQ;QACd,IAAI,SAAS,MAAM,WAAW,UAAU;YACtC,QAAQ,QAAQ;YAChB,OAAO,UAAU,MAAM,SAAS,QAAQ;QAC1C;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,MAAM,IAAI;QACjB,IAAI,SAAS,MACX,OAAO,IAAI;QAEb,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,cAAc;YACd,OAAO,iBAAiB;QAC1B;QACA,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;GASC,GACD,SAAS,WAAW,IAAI;QACtB,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,MAAM;IACf;IAEA;;;;;;;;;GASC,GACD,SAAS,SAAS,IAAI;QACpB,IAAI,SAAS,IACX,OAAO,IAAI;QAEb,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,MAAM;IACf;IAEA;;;;;;;;;GASC,GACD,SAAS,YAAY,IAAI;QACvB,IAAI,SAAS,QAAQ,SAAS,IAC5B,OAAO,IAAI;QAEb,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,cAAc;YACd,OAAO,iBAAiB;QAC1B;QACA,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;GASC,GACD,SAAS,YAAY,IAAI;QACvB,IAAI,SAAS,MACX,OAAO,IAAI;QAEb,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,cAAc;YACd,OAAO,iBAAiB;QAC1B;QACA,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;GASC,GACD,SAAS,iBAAiB,IAAI;QAC5B,OAAO,SAAS,KAAK,IAAI,QAAQ,YAAY;IAC/C;IAEA;;;;;;;;;GASC,GACD,SAAS,cAAc,IAAI;QACzB,sBAAsB;QACtB,IAAI,CAAA,GAAA,iBAAS,EAAE,OAAO;YACpB,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,SAAS,IAAI;QACpB,gCAAgC;QAChC,IAAI,SAAS,MAAM,CAAA,GAAA,wBAAgB,EAAE,OAAO;YAC1C,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,gBAAgB;IACzB;IAEA;;;;;;;;;GASC,GACD,SAAS,gBAAgB,IAAI;QAC3B,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,cAAc;YACd,OAAO,iBAAiB;QAC1B;QACA,IAAI,CAAA,GAAA,oBAAY,EAAE,OAAO;YACvB,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,QAAQ,IAAI;QACnB,gCAAgC;QAChC,IAAI,SAAS,MAAM,CAAA,GAAA,wBAAgB,EAAE,OAAO;YAC1C,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,SAAS,MAAM,SAAS,MAAM,CAAA,GAAA,gCAAwB,EAAE,OAC1D,OAAO,eAAe;QAExB,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,eAAe,IAAI;QAC1B,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QAEA,sCAAsC;QACtC,IAAI,SAAS,MAAM,SAAS,MAAM,CAAA,GAAA,iBAAS,EAAE,OAAO;YAClD,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,cAAc;YACd,OAAO,iBAAiB;QAC1B;QACA,IAAI,CAAA,GAAA,oBAAY,EAAE,OAAO;YACvB,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,qBAAqB,IAAI;QAChC,iDAAiD;QACjD,IACE,SAAS,MACT,SAAS,MACT,SAAS,MACT,SAAS,MACT,CAAA,GAAA,wBAAgB,EAAE,OAClB;YACA,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,0BAA0B;IACnC;IAEA;;;;;;;;;;GAUC,GACD,SAAS,0BAA0B,IAAI;QACrC,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,cAAc;YACd,OAAO,iBAAiB;QAC1B;QACA,IAAI,CAAA,GAAA,oBAAY,EAAE,OAAO;YACvB,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,OAAO,eAAe;IACxB;IAEA;;;;;;;;;;GAUC,GACD,SAAS,4BAA4B,IAAI;QACvC,IACE,SAAS,QACT,SAAS,MACT,SAAS,MACT,SAAS,MACT,SAAS,IAET,OAAO,IAAI;QAEb,IAAI,SAAS,MAAM,SAAS,IAAI;YAC9B,QAAQ,QAAQ;YAChB,SAAS;YACT,OAAO;QACT;QACA,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,cAAc;YACd,OAAO,iBAAiB;QAC1B;QACA,IAAI,CAAA,GAAA,oBAAY,EAAE,OAAO;YACvB,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;GASC,GACD,SAAS,4BAA4B,IAAI;QACvC,IAAI,SAAS,QAAQ;YACnB,QAAQ,QAAQ;YAChB,SAAS;YACT,OAAO;QACT;QACA,IAAI,SAAS,MACX,OAAO,IAAI;QAEb,IAAI,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC5B,cAAc;YACd,OAAO,iBAAiB;QAC1B;QACA,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;GASC,GACD,SAAS,8BAA8B,IAAI;QACzC,IACE,SAAS,QACT,SAAS,MACT,SAAS,MACT,SAAS,MACT,SAAS,MACT,SAAS,IAET,OAAO,IAAI;QAEb,IAAI,SAAS,MAAM,SAAS,MAAM,CAAA,GAAA,gCAAwB,EAAE,OAC1D,OAAO,eAAe;QAExB,QAAQ,QAAQ;QAChB,OAAO;IACT;IAEA;;;;;;;;;;GAUC,GACD,SAAS,iCAAiC,IAAI;QAC5C,IAAI,SAAS,MAAM,SAAS,MAAM,CAAA,GAAA,gCAAwB,EAAE,OAC1D,OAAO,eAAe;QAExB,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,IAAI,IAAI;QACf,IAAI,SAAS,IAAI;YACf,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;GAaC,GACD,SAAS,iBAAiB,IAAI;QAC5B,QAAQ,KAAK;QACb,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,OAAO;IACT;IAEA;;;;;;;;;;;;;GAaC,GACD,SAAS,gBAAgB,IAAI;QAC3B,gCAAgC;QAEhC,OAAO,CAAA,GAAA,oBAAY,EAAE,QACjB,CAAA,GAAA,mBAAW,EACT,SACA,uBACA,cACA,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,kBACzC,YACA,GACJ,QACF,sBAAsB;IAC5B;IAEA;;;;;;;;;;;;;GAaC,GACD,SAAS,sBAAsB,IAAI;QACjC,QAAQ,MAAM;QACd,OAAO,YAAY;IACrB;AACF;;;;;;;ACxsBA;;;;;;;;;CAQC;;;;;;;;;;;;;;;AAWM,MAAM,4CAAW;IACtB,MAAM;IACN,UAAU;IACV,WAAW;IACX,YAAY;AACd;AAEA,sBAAsB,GACtB,MAAM,0CAAoB;IACxB,UAAU;AACZ;AACA,sBAAsB,GACtB,MAAM,+CAAyB;IAC7B,UAAU;AACZ;AACA,sBAAsB,GACtB,MAAM,oDAA8B;IAClC,UAAU;AACZ;AAEA,qBAAqB,GACrB,SAAS,yCAAmB,MAAM;IAChC,IAAI,QAAQ;IACZ,MAAO,EAAE,QAAQ,OAAO,OAAQ;QAC9B,MAAM,QAAQ,MAAM,CAAC,MAAM,CAAC,EAAE;QAC9B,IACE,MAAM,SAAS,gBACf,MAAM,SAAS,eACf,MAAM,SAAS,YACf;YACA,qBAAqB;YACrB,OAAO,OAAO,QAAQ,GAAG,MAAM,SAAS,eAAe,IAAI;YAC3D,MAAM,OAAO;YACb;QACF;IACF;IACA,OAAO;AACT;AAEA,qBAAqB,GACrB,SAAS,wCAAkB,MAAM,EAAE,OAAO;IACxC,IAAI,QAAQ,OAAO;IACnB,IAAI,SAAS;IACb,kBAAkB,GAClB,IAAI;IACJ,+BAA+B,GAC/B,IAAI;IACJ,+BAA+B,GAC/B,IAAI;IACJ,yBAAyB,GACzB,IAAI;IAEJ,mBAAmB;IACnB,MAAO,QAAS;QACd,QAAQ,MAAM,CAAC,MAAM,CAAC,EAAE;QACxB,IAAI,MAAM;YACR,0EAA0E;YAC1E,IACE,MAAM,SAAS,UACd,MAAM,SAAS,eAAe,MAAM,WAErC;YAGF,kEAAkE;YAClE,SAAS;YACT,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,WAAW,MAAM,SAAS,aACjD,MAAM,YAAY;QAEtB,OAAO,IAAI,OACT;YAAA,IACE,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,WACpB,CAAA,MAAM,SAAS,gBAAgB,MAAM,SAAS,WAAU,KACzD,CAAC,MAAM,WACP;gBACA,OAAO;gBACP,IAAI,MAAM,SAAS,aAAa;oBAC9B,SAAS;oBACT;gBACF;YACF;QAAA,OACK,IAAI,MAAM,SAAS,YACxB,QAAQ;IAEZ;IACA,MAAM,QAAQ;QACZ,MAAM,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,cAAc,SAAS;QACtD,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;QACzC,KAAK,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,OAAO,SAAS,EAAE,CAAC,EAAE,CAAC;IACtD;IACA,MAAM,QAAQ;QACZ,MAAM;QACN,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;QACzC,KAAK,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;IAC1C;IACA,MAAM,OAAO;QACX,MAAM;QACN,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,OAAO,SAAS,EAAE,CAAC,EAAE,CAAC;QACtD,KAAK,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC;IAC9C;IACA,QAAQ;QACN;YAAC;YAAS;YAAO;SAAQ;QACzB;YAAC;YAAS;YAAO;SAAQ;KAC1B;IAED,kBAAkB;IAClB,QAAQ,CAAA,GAAA,WAAG,EAAE,OAAO,OAAO,MAAM,OAAO,GAAG,OAAO,SAAS;IAE3D,aAAa;IACb,QAAQ,CAAA,GAAA,WAAG,EAAE,OAAO;QAAC;YAAC;YAAS;YAAM;SAAQ;KAAC;IAE9C,gCAAgC;IAEhC,WAAW;IACX,QAAQ,CAAA,GAAA,WAAG,EACT,OACA,CAAA,GAAA,iBAAS,EACP,QAAQ,OAAO,WAAW,WAAW,MACrC,OAAO,MAAM,OAAO,SAAS,GAAG,QAAQ,IACxC;IAIJ,yCAAyC;IACzC,QAAQ,CAAA,GAAA,WAAG,EAAE,OAAO;QAClB;YAAC;YAAQ;YAAM;SAAQ;QACvB,MAAM,CAAC,QAAQ,EAAE;QACjB,MAAM,CAAC,QAAQ,EAAE;QACjB;YAAC;YAAQ;YAAO;SAAQ;KACzB;IAED,8BAA8B;IAC9B,QAAQ,CAAA,GAAA,WAAG,EAAE,OAAO,OAAO,MAAM,QAAQ;IAEzC,eAAe;IACf,QAAQ,CAAA,GAAA,WAAG,EAAE,OAAO;QAAC;YAAC;YAAQ;YAAO;SAAQ;KAAC;IAC9C,CAAA,GAAA,aAAK,EAAE,QAAQ,MAAM,OAAO,QAAQ;IACpC,OAAO;AACT;AAEA;;;CAGC,GACD,SAAS,uCAAiB,OAAO,EAAE,EAAE,EAAE,GAAG;IACxC,MAAM,OAAO,IAAI;IACjB,IAAI,QAAQ,KAAK,OAAO;IACxB,kBAAkB,GAClB,IAAI;IACJ,oBAAoB,GACpB,IAAI;IAEJ,mBAAmB;IACnB,MAAO,QACL,IACE,AAAC,CAAA,KAAK,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,gBAC9B,KAAK,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,WAAU,KAC3C,CAAC,KAAK,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,WACvB;QACA,aAAa,KAAK,MAAM,CAAC,MAAM,CAAC,EAAE;QAClC;IACF;IAEF,OAAO;IAEP;;;;;;;;;;;;;;GAcC,GACD,SAAS,MAAM,IAAI;QACjB,mCAAmC;QACnC,IAAI,CAAC,YACH,OAAO,IAAI;QAGb,iEAAiE;QACjE,+CAA+C;QAC/C,EAAE;QACF,cAAc;QACd,2BAA2B;QAC3B,qBAAqB;QACrB,MAAM;QACN,EAAE;QACF,sDAAsD;QACtD,IAAI,WAAW,WACb,OAAO,YAAY;QAErB,UAAU,KAAK,OAAO,QAAQ,SAC5B,CAAA,GAAA,0BAAkB,EAChB,KAAK,eAAe;YAClB,OAAO,WAAW;YAClB,KAAK,KAAK;QACZ;QAGJ,QAAQ,MAAM;QACd,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,QAAQ,KAAK;QACb,OAAO;IACT;IAEA;;;;;;;;;;;;;;;GAeC,GACD,SAAS,MAAM,IAAI;QACjB,yEAAyE;QACzE,gBAAgB;QAEhB,2BAA2B;QAC3B,IAAI,SAAS,IACX,OAAO,QAAQ,QACb,yCACA,YACA,UAAU,aAAa,aACvB;QAGJ,0DAA0D;QAC1D,IAAI,SAAS,IACX,OAAO,QAAQ,QACb,8CACA,YACA,UAAU,mBAAmB,aAC7B;QAGJ,gCAAgC;QAChC,OAAO,UAAU,WAAW,QAAQ,YAAY;IAClD;IAEA;;;;;;;;;;;;;GAaC,GACD,SAAS,iBAAiB,IAAI;QAC5B,OAAO,QAAQ,QACb,mDACA,YACA,aACA;IACJ;IAEA;;;;;;;;;;;;;;;GAeC,GACD,SAAS,WAAW,IAAI;QACtB,kDAAkD;QAClD,OAAO,GAAG;IACZ;IAEA;;;;;;;;;;;;;;;GAeC,GACD,SAAS,YAAY,IAAI;QACvB,WAAW,YAAY;QACvB,OAAO,IAAI;IACb;AACF;AAEA;;;CAGC,GACD,SAAS,uCAAiB,OAAO,EAAE,EAAE,EAAE,GAAG;IACxC,OAAO;IAEP;;;;;;;;;GASC,GACD,SAAS,cAAc,IAAI;QACzB,QAAQ,MAAM;QACd,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,OAAO;IACT;IAEA;;;;;;;;;GASC,GACD,SAAS,eAAe,IAAI;QAC1B,OAAO,CAAA,GAAA,gCAAwB,EAAE,QAC7B,CAAA,GAAA,wBAAgB,EAAE,SAAS,cAAc,QACzC,aAAa;IACnB;IAEA;;;;;;;;;GASC,GACD,SAAS,aAAa,IAAI;QACxB,IAAI,SAAS,IACX,OAAO,YAAY;QAErB,OAAO,CAAA,GAAA,yBAAiB,EACtB,SACA,0BACA,4BACA,uBACA,8BACA,oCACA,0BACA,6BACA,IACA;IACJ;IAEA;;;;;;;;;GASC,GACD,SAAS,yBAAyB,IAAI;QACpC,OAAO,CAAA,GAAA,gCAAwB,EAAE,QAC7B,CAAA,GAAA,wBAAgB,EAAE,SAAS,iBAAiB,QAC5C,YAAY;IAClB;IAEA;;;;;;;;;GASC,GACD,SAAS,2BAA2B,IAAI;QACtC,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,gBAAgB,IAAI;QAC3B,IAAI,SAAS,MAAM,SAAS,MAAM,SAAS,IACzC,OAAO,CAAA,GAAA,mBAAW,EAChB,SACA,oBACA,KACA,iBACA,uBACA,uBACA;QAEJ,OAAO,YAAY;IACrB;IAEA;;;;;;;;;GASC,GACD,SAAS,mBAAmB,IAAI;QAC9B,OAAO,CAAA,GAAA,gCAAwB,EAAE,QAC7B,CAAA,GAAA,wBAAgB,EAAE,SAAS,aAAa,QACxC,YAAY;IAClB;IAEA;;;;;;;;;GASC,GACD,SAAS,YAAY,IAAI;QACvB,IAAI,SAAS,IAAI;YACf,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO;QACT;QACA,OAAO,IAAI;IACb;AACF;AAEA;;;CAGC,GACD,SAAS,4CAAsB,OAAO,EAAE,EAAE,EAAE,GAAG;IAC7C,MAAM,OAAO,IAAI;IACjB,OAAO;IAEP;;;;;;;;;GASC,GACD,SAAS,cAAc,IAAI;QACzB,OAAO,CAAA,GAAA,mBAAW,EAAE,KAClB,MACA,SACA,oBACA,sBACA,aACA,mBACA,mBACA;IACJ;IAEA;;;;;;;;;GASC,GACD,SAAS,mBAAmB,IAAI;QAC9B,OAAO,KAAK,OAAO,QAAQ,SACzB,CAAA,GAAA,0BAAkB,EAChB,KAAK,eAAe,KAAK,MAAM,CAAC,KAAK,OAAO,SAAS,EAAE,CAAC,EAAE,EAAE,MAAM,GAAG,QAGrE,GAAG,QACH,IAAI;IACV;IAEA;;;;;;;;;GASC,GACD,SAAS,qBAAqB,IAAI;QAChC,OAAO,IAAI;IACb;AACF;AAEA;;;CAGC,GACD,SAAS,iDAA2B,OAAO,EAAE,EAAE,EAAE,GAAG;IAClD,OAAO;IAEP;;;;;;;;;;;GAWC,GACD,SAAS,wBAAwB,IAAI;QACnC,sDAAsD;QAEtD,QAAQ,MAAM;QACd,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,OAAO;IACT;IAEA;;;;;;;;;;;GAWC,GACD,SAAS,uBAAuB,IAAI;QAClC,IAAI,SAAS,IAAI;YACf,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO;QACT;QACA,OAAO,IAAI;IACb;AACF;;;;;;;ACxmBA;;;;;;CAKC;AAKM,MAAM,4CAAkB;IAC7B,MAAM;IACN,UAAU;IACV,YAAY,CAAA,GAAA,eAAO,EAAE;AACvB;AAEA;;;CAGC,GACD,SAAS,8CAAwB,OAAO,EAAE,EAAE,EAAE,GAAG;IAC/C,MAAM,OAAO,IAAI;IACjB,OAAO;IAEP;;;;;;;;;GASC,GACD,SAAS,MAAM,IAAI;QACjB,QAAQ,MAAM;QACd,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,OAAO;IACT;IAEA;;;;;;;;;GASC,GACD,SAAS,KAAK,IAAI;QAChB,IAAI,SAAS,IAAI;YACf,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,QAAQ,KAAK;YACb,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BC,GACD,SAAS,MAAM,IAAI;QACjB,8DAA8D;QAC9D,iEAAiE;QACjE,kBAAkB;QAClB,yBAAyB;QACzB,oBAAoB,GACpB,OAAO,SAAS,MAAM,4BAA4B,KAAK,OAAO,aAC1D,IAAI,QACJ,GAAG;IACT;AACF;;;;;;;ACpGA;;;;;;CAKC;AAKM,MAAM,4CAAiB;IAC5B,MAAM;IACN,UAAU;IACV,YAAY,CAAA,GAAA,eAAO,EAAE;AACvB;AAEA;;;CAGC,GACD,SAAS,6CAAuB,OAAO,EAAE,EAAE,EAAE,GAAG;IAC9C,MAAM,OAAO,IAAI;IACjB,OAAO;IAEP;;;;;;;;;GASC,GACD,SAAS,MAAM,IAAI;QACjB,QAAQ,MAAM;QACd,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,QAAQ,KAAK;QACb,OAAO;IACT;IAEA,kBAAkB,GAClB,SAAS,MAAM,IAAI;QACjB,kEAAkE;QAClE,UAAU;QACV,yBAAyB;QACzB,oBAAoB,GACpB,OAAO,SAAS,MAAM,4BAA4B,KAAK,OAAO,aAC1D,IAAI,QACJ,GAAG;IACT;AACF;;;;;;;ACrDA;;;;;;CAKC;;AAKM,MAAM,2CAAa;IACxB,MAAM;IACN,UAAU;AACZ;AAEA;;;CAGC,GACD,SAAS,yCAAmB,OAAO,EAAE,EAAE;IACrC,OAAO;IAEP,kBAAkB,GAClB,SAAS,MAAM,IAAI;QACjB,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,OAAO,CAAA,GAAA,mBAAW,EAAE,SAAS,IAAI;IACnC;AACF;;;;;;;AC7BA;;;;;;;;;CAQC;;;;;;;AAQM,MAAM,4CAAO;IAClB,MAAM;IACN,UAAU;IACV,cAAc;QACZ,UAAU;IACZ;IACA,MAAM;AACR;AAEA,sBAAsB,GACtB,MAAM,0DAAoC;IACxC,UAAU;IACV,SAAS;AACX;AAEA,sBAAsB,GACtB,MAAM,wCAAkB;IACtB,UAAU;IACV,SAAS;AACX;AAEA,8EAA8E;AAC9E,YAAY;AAEZ;;;CAGC,GACD,SAAS,wCAAkB,OAAO,EAAE,EAAE,EAAE,GAAG;IACzC,MAAM,OAAO,IAAI;IACjB,MAAM,OAAO,KAAK,MAAM,CAAC,KAAK,OAAO,SAAS,EAAE;IAChD,IAAI,cACF,QAAQ,IAAI,CAAC,EAAE,CAAC,SAAS,eACrB,IAAI,CAAC,EAAE,CAAC,eAAe,IAAI,CAAC,EAAE,EAAE,MAAM,SACtC;IACN,IAAI,OAAO;IACX,OAAO;IAEP,kBAAkB,GAClB,SAAS,MAAM,IAAI;QACjB,MAAM,OACJ,KAAK,eAAe,QACnB,CAAA,SAAS,MAAM,SAAS,MAAM,SAAS,KACpC,kBACA,aAAY;QAClB,IACE,SAAS,kBACL,CAAC,KAAK,eAAe,UAAU,SAAS,KAAK,eAAe,SAC5D,CAAA,GAAA,iBAAS,EAAE,OACf;YACA,IAAI,CAAC,KAAK,eAAe,MAAM;gBAC7B,KAAK,eAAe,OAAO;gBAC3B,QAAQ,MAAM,MAAM;oBAClB,YAAY;gBACd;YACF;YACA,IAAI,SAAS,iBAAiB;gBAC5B,QAAQ,MAAM;gBACd,OAAO,SAAS,MAAM,SAAS,KAC3B,QAAQ,MAAM,CAAA,GAAA,oBAAY,GAAG,KAAK,UAAU,QAC5C,SAAS;YACf;YACA,IAAI,CAAC,KAAK,aAAa,SAAS,IAAI;gBAClC,QAAQ,MAAM;gBACd,QAAQ,MAAM;gBACd,OAAO,OAAO;YAChB;QACF;QACA,OAAO,IAAI;IACb;IAEA,kBAAkB,GAClB,SAAS,OAAO,IAAI;QAClB,IAAI,CAAA,GAAA,iBAAS,EAAE,SAAS,EAAE,OAAO,IAAI;YACnC,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,IACE,AAAC,CAAA,CAAC,KAAK,aAAa,OAAO,CAAA,KAC1B,CAAA,KAAK,eAAe,SACjB,SAAS,KAAK,eAAe,SAC7B,SAAS,MAAM,SAAS,EAAC,GAC7B;YACA,QAAQ,KAAK;YACb,OAAO,SAAS;QAClB;QACA,OAAO,IAAI;IACb;IAEA;;IAEE,GACF,SAAS,SAAS,IAAI;QACpB,QAAQ,MAAM;QACd,QAAQ,QAAQ;QAChB,QAAQ,KAAK;QACb,KAAK,eAAe,SAAS,KAAK,eAAe,UAAU;QAC3D,OAAO,QAAQ,MACb,CAAA,GAAA,gBAAQ,GACR,oCAAoC;QACpC,KAAK,YAAY,MAAM,SACvB,QAAQ,QACN,yDACA,aACA;IAGN;IAEA,kBAAkB,GAClB,SAAS,QAAQ,IAAI;QACnB,KAAK,eAAe,mBAAmB;QACvC;QACA,OAAO,YAAY;IACrB;IAEA,kBAAkB,GAClB,SAAS,YAAY,IAAI;QACvB,IAAI,CAAA,GAAA,oBAAY,EAAE,OAAO;YACvB,QAAQ,MAAM;YACd,QAAQ,QAAQ;YAChB,QAAQ,KAAK;YACb,OAAO;QACT;QACA,OAAO,IAAI;IACb;IAEA,kBAAkB,GAClB,SAAS,YAAY,IAAI;QACvB,KAAK,eAAe,OAClB,cACA,KAAK,eAAe,QAAQ,KAAK,mBAAmB,MAAM;QAC5D,OAAO,GAAG;IACZ;AACF;AAEA;;;CAGC,GACD,SAAS,+CAAyB,OAAO,EAAE,EAAE,EAAE,GAAG;IAChD,MAAM,OAAO,IAAI;IACjB,KAAK,eAAe,aAAa;IACjC,OAAO,QAAQ,MAAM,CAAA,GAAA,gBAAQ,GAAG,SAAS;IAEzC,kBAAkB,GAClB,SAAS,QAAQ,IAAI;QACnB,KAAK,eAAe,oBAClB,KAAK,eAAe,qBACpB,KAAK,eAAe;QAEtB,wBAAwB;QACxB,gDAAgD;QAChD,OAAO,CAAA,GAAA,mBAAW,EAChB,SACA,IACA,kBACA,KAAK,eAAe,OAAO,GAC3B;IACJ;IAEA,kBAAkB,GAClB,SAAS,SAAS,IAAI;QACpB,IAAI,KAAK,eAAe,qBAAqB,CAAC,CAAA,GAAA,oBAAY,EAAE,OAAO;YACjE,KAAK,eAAe,oBAAoB;YACxC,KAAK,eAAe,mBAAmB;YACvC,OAAO,iBAAiB;QAC1B;QACA,KAAK,eAAe,oBAAoB;QACxC,KAAK,eAAe,mBAAmB;QACvC,OAAO,QAAQ,QAAQ,uCAAiB,IAAI,kBAAkB;IAChE;IAEA,kBAAkB,GAClB,SAAS,iBAAiB,IAAI;QAC5B,kEAAkE;QAClE,KAAK,eAAe,aAAa;QACjC,uDAAuD;QACvD,KAAK,YAAY;QACjB,gCAAgC;QAEhC,OAAO,CAAA,GAAA,mBAAW,EAChB,SACA,QAAQ,QAAQ,2CAAM,IAAI,MAC1B,cACA,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,kBACzC,YACA,GACJ;IACJ;AACF;AAEA;;;CAGC,GACD,SAAS,qCAAe,OAAO,EAAE,EAAE,EAAE,GAAG;IACtC,MAAM,OAAO,IAAI;IACjB,OAAO,CAAA,GAAA,mBAAW,EAChB,SACA,aACA,kBACA,KAAK,eAAe,OAAO;IAG7B,kBAAkB,GAClB,SAAS,YAAY,IAAI;QACvB,MAAM,OAAO,KAAK,MAAM,CAAC,KAAK,OAAO,SAAS,EAAE;QAChD,OAAO,QACL,IAAI,CAAC,EAAE,CAAC,SAAS,oBACjB,IAAI,CAAC,EAAE,CAAC,eAAe,IAAI,CAAC,EAAE,EAAE,MAAM,WAAW,KAAK,eAAe,OACnE,GAAG,QACH,IAAI;IACV;AACF;AAEA;;;CAGC,GACD,SAAS,sCAAgB,OAAO;IAC9B,QAAQ,KAAK,IAAI,CAAC,eAAe;AACnC;AAEA;;;CAGC,GACD,SAAS,uDAAiC,OAAO,EAAE,EAAE,EAAE,GAAG;IACxD,MAAM,OAAO,IAAI;IAEjB,gCAAgC;IAEhC,OAAO,CAAA,GAAA,mBAAW,EAChB,SACA,aACA,4BACA,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,kBACzC,YACA;IAGN,kBAAkB,GAClB,SAAS,YAAY,IAAI;QACvB,MAAM,OAAO,KAAK,MAAM,CAAC,KAAK,OAAO,SAAS,EAAE;QAChD,OAAO,CAAC,CAAA,GAAA,oBAAY,EAAE,SACpB,QACA,IAAI,CAAC,EAAE,CAAC,SAAS,6BACf,GAAG,QACH,IAAI;IACV;AACF;;;;;;AC3QA;;;;;;;CAMC;;;AAKM,MAAM,4CAAgB;IAC3B,MAAM;IACN,UAAU;AACZ;AAEA;;;CAGC,GACD,SAAS,4CAAsB,OAAO,EAAE,EAAE,EAAE,GAAG;IAC7C,IAAI,OAAO;IACX,8BAA8B,GAC9B,IAAI;IACJ,OAAO;IAEP;;;;;;;;;GASC,GACD,SAAS,MAAM,IAAI;QACjB,QAAQ,MAAM;QACd,0CAA0C;QAC1C,OAAO,OAAO;IAChB;IAEA;;;;;;;;;GASC,GACD,SAAS,OAAO,IAAI;QAClB,SAAS;QACT,OAAO,QAAQ;IACjB;IAEA;;;;;;;;;GASC,GACD,SAAS,QAAQ,IAAI;QACnB,IAAI,SAAS,QAAQ;YACnB,QAAQ,MAAM;YACd,OAAO,SAAS;QAClB;QACA,IAAI,QAAQ,KAAM,CAAA,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,KAAI,GAAI;YAC5D,QAAQ,KAAK;YACb,OAAO,GAAG;QACZ;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;GASC,GACD,SAAS,SAAS,IAAI;QACpB,IAAI,SAAS,QAAQ;YACnB,QAAQ,QAAQ;YAChB;YACA,OAAO;QACT;QACA,QAAQ,KAAK;QACb,OAAO,CAAA,GAAA,oBAAY,EAAE,QACjB,CAAA,GAAA,mBAAW,EAAE,SAAS,SAAS,cAAc,QAC7C,QAAQ;IACd;AACF;;;;;;;;ACpGA;;;;;;;;CAOC;;;AAKM,MAAM,4CAAkB;IAC7B,MAAM;IACN,UAAU;IACV,WAAW;AACb;AAEA,qBAAqB,GACrB,SAAS,+CAAyB,MAAM,EAAE,OAAO;IAC/C,qCAAqC;IACrC,IAAI,QAAQ,OAAO;IACnB,+BAA+B,GAC/B,IAAI;IACJ,+BAA+B,GAC/B,IAAI;IACJ,+BAA+B,GAC/B,IAAI;IAEJ,mCAAmC;IACnC,2DAA2D;IAC3D,MAAO,QACL,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,SAAS;QAChC,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,WAAW;YACvC,UAAU;YACV;QACF;QACA,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,aAC5B,OAAO;IAEX,OAEK;QACH,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,WAC5B,wDAAwD;QACxD,OAAO,OAAO,OAAO;QAEvB,IAAI,CAAC,cAAc,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,cAC3C,aAAa;IAEjB;IAEF,MAAM,UAAU;QACd,MAAM;QACN,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;QACzC,KAAK,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,OAAO,SAAS,EAAE,CAAC,EAAE,CAAC;IACtD;IAEA,+CAA+C;IAC/C,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO;IAEvB,uEAAuE;IACvE,uBAAuB;IACvB,IAAI,YAAY;QACd,OAAO,OAAO,MAAM,GAAG;YAAC;YAAS;YAAS;SAAQ;QAClD,OAAO,OAAO,aAAa,GAAG,GAAG;YAAC;YAAQ,MAAM,CAAC,QAAQ,CAAC,EAAE;YAAE;SAAQ;QACtE,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC;IACnE,OACE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG;IAGvB,mCAAmC;IACnC,OAAO,KAAK;QAAC;QAAQ;QAAS;KAAQ;IACtC,OAAO;AACT;AAEA;;;CAGC,GACD,SAAS,8CAAwB,OAAO,EAAE,EAAE,EAAE,GAAG;IAC/C,MAAM,OAAO,IAAI;IACjB,8BAA8B,GAC9B,IAAI;IACJ,OAAO;IAEP;;;;;;;;;;GAUC,GACD,SAAS,MAAM,IAAI;QACjB,IAAI,QAAQ,KAAK,OAAO;QACxB,gCAAgC,GAChC,IAAI;QACJ,mBAAmB;QACnB,MAAO,QACL,4DAA4D;QAC5D,sDAAsD;QACtD,IACE,KAAK,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,gBAC/B,KAAK,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,gBAC/B,KAAK,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,WAC/B;YACA,YAAY,KAAK,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS;YAC3C;QACF;QAGF,gDAAgD;QAChD,0CAA0C;QAC1C,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,KAAK,MAAM,KAAK,IAAK,CAAA,KAAK,aAAa,SAAQ,GAAI;YACvE,QAAQ,MAAM;YACd,SAAS;YACT,OAAO,OAAO;QAChB;QACA,OAAO,IAAI;IACb;IAEA;;;;;;;;;;GAUC,GACD,SAAS,OAAO,IAAI;QAClB,QAAQ,MAAM;QACd,OAAO,OAAO;IAChB;IAEA;;;;;;;;;;GAUC,GACD,SAAS,OAAO,IAAI;QAClB,IAAI,SAAS,QAAQ;YACnB,QAAQ,QAAQ;YAChB,OAAO;QACT;QACA,QAAQ,KAAK;QACb,OAAO,CAAA,GAAA,oBAAY,EAAE,QACjB,CAAA,GAAA,mBAAW,EAAE,SAAS,OAAO,cAAc,QAC3C,MAAM;IACZ;IAEA;;;;;;;;;;GAUC,GACD,SAAS,MAAM,IAAI;QACjB,IAAI,SAAS,QAAQ,CAAA,GAAA,yBAAiB,EAAE,OAAO;YAC7C,QAAQ,KAAK;YACb,OAAO,GAAG;QACZ;QACA,OAAO,IAAI;IACb;AACF;;;;;;;;;ACrLA;;;;;CAKC,GAED;;;;;;CAMC,GAED,MAAM,+BAAS;AAKR,SAAS;IACd,IAAI,SAAS;IACb,IAAI,SAAS;IACb,gCAAgC,GAChC,IAAI,QAAQ;IACZ,gCAAgC,GAChC,IAAI;IACJ,OAAO;IAEP,yBAAyB,GACzB,SAAS,aAAa,KAAK,EAAE,QAAQ,EAAE,GAAG;QACxC,yBAAyB,GACzB,MAAM,SAAS,EAAE;QACjB,oCAAoC,GACpC,IAAI;QACJ,mBAAmB,GACnB,IAAI;QACJ,mBAAmB,GACnB,IAAI;QACJ,mBAAmB,GACnB,IAAI;QACJ,iBAAiB,GACjB,IAAI;QAEJ,oDAAoD;QACpD,QAAQ,SAAS,MAAM,SAAS;QAChC,gBAAgB;QAChB,SAAS;QACT,IAAI,OAAO;YACT,+DAA+D;YAC/D,IAAI,MAAM,WAAW,OAAO,OAC1B;YAEF,QAAQ;QACV;QACA,MAAO,gBAAgB,MAAM,OAAQ;YACnC,6BAAO,YAAY;YACnB,QAAQ,6BAAO,KAAK;YACpB,cACE,SAAS,MAAM,UAAU,YAAY,MAAM,QAAQ,MAAM;YAC3D,OAAO,MAAM,WAAW;YACxB,IAAI,CAAC,OAAO;gBACV,SAAS,MAAM,MAAM;gBACrB;YACF;YACA,IAAI,SAAS,MAAM,kBAAkB,eAAe,kBAAkB;gBACpE,OAAO,KAAK;gBACZ,mBAAmB;YACrB,OAAO;gBACL,IAAI,kBAAkB;oBACpB,OAAO,KAAK;oBACZ,mBAAmB;gBACrB;gBACA,IAAI,gBAAgB,aAAa;oBAC/B,OAAO,KAAK,MAAM,MAAM,eAAe;oBACvC,UAAU,cAAc;gBAC1B;gBACA,OAAQ;oBACN,KAAK;wBACH,OAAO,KAAK;wBACZ;wBACA;oBAEF,KAAK;wBACH,OAAO,KAAK,KAAK,SAAS,KAAK;wBAC/B,OAAO,KAAK;wBACZ,MAAO,WAAW,KAAM,OAAO,KAAK;wBACpC;oBAEF,KAAK;wBACH,OAAO,KAAK;wBACZ,SAAS;wBACT;oBAEF;wBACE,mBAAmB;wBACnB,SAAS;gBAEb;YACF;YACA,gBAAgB,cAAc;QAChC;QACA,IAAI,KAAK;YACP,IAAI,kBAAkB,OAAO,KAAK;YAClC,IAAI,QAAQ,OAAO,KAAK;YACxB,OAAO,KAAK;QACd;QACA,OAAO;IACT;AACF;;;;;;;AC7GA;;;CAEC;AAQM,SAAS,0CAAY,MAAM;IAChC,MAAO,CAAC,CAAA,GAAA,kBAAU,EAAE;IAGpB,OAAO;AACT;;;;;;;ACfA;;;;;;;;;;;;;CAaC,GACM,SAAS,0CAAgC,KAAK,EAAE,IAAI;IACzD,MAAM,OAAO,OAAO,SAAS,OAAO;IACpC,IACE,uCAAuC;IACvC,OAAO,KACP,SAAS,MACR,OAAO,MAAM,OAAO,MACrB,kDAAkD;IACjD,OAAO,OAAO,OAAO,OACtB,2CAA2C;IAC1C,OAAO,SAAS,OAAO,SACxB,iBAAiB;IAChB,OAAO,SAAS,OAAO,SACxB,AAAC,CAAA,OAAO,KAAI,MAAO,SACnB,AAAC,CAAA,OAAO,KAAI,MAAO,MAAM,4BAA4B,OACrD,eAAe;IACf,OAAO,SAEP,OAAO;IAET,OAAO,OAAO,aAAa;AAC7B;;;;;;;;;;;ACjCA,MAAM,mDACJ;AAcK,SAAS,0CAAa,KAAK;IAChC,OAAO,MAAM,QAAQ,kDAA4B;AACnD;AAEA;;;;;CAKC,GACD,SAAS,6BAAO,EAAE,EAAE,EAAE,EAAE,EAAE;IACxB,IAAI,IACF,UAAU;IACV,OAAO;IAGT,aAAa;IACb,MAAM,OAAO,GAAG,WAAW;IAC3B,IAAI,SAAS,IAAI;QACf,MAAM,OAAO,GAAG,WAAW;QAC3B,MAAM,MAAM,SAAS,OAAO,SAAS;QACrC,OAAO,CAAA,GAAA,sCAA8B,EAAE,GAAG,MAAM,MAAM,IAAI,IAAI,MAAM,KAAK;IAC3E;IACA,OAAO,CAAA,GAAA,oCAA4B,EAAE,OAAO;AAC9C;;;;;;;ACzCA;;;;CAIC,GAED;;;;;;;;;;;;;CAaC,GAED;;;;;;;;;;;;;;CAcC,GACM,SAAS,0CAAkB,KAAK;IACrC,WAAW;IACX,IAAI,CAAC,SAAS,OAAO,UAAU,UAC7B,OAAO;IAGT,QAAQ;IACR,IAAI,cAAc,SAAS,UAAU,OACnC,OAAO,+BAAS,MAAM;IAGxB,YAAY;IACZ,IAAI,WAAW,SAAS,SAAS,OAC/B,OAAO,+BAAS;IAGlB,SAAS;IACT,IAAI,UAAU,SAAS,YAAY,OACjC,OAAO,4BAAM;IAGf,IAAI;IACJ,OAAO;AACT;AAEA;;;CAGC,GACD,SAAS,4BAAM,KAAK;IAClB,OAAO,4BAAM,SAAS,MAAM,QAAQ,MAAM,4BAAM,SAAS,MAAM;AACjE;AAEA;;;CAGC,GACD,SAAS,+BAAS,GAAG;IACnB,OAAO,4BAAM,OAAO,IAAI,SAAS,MAAM,4BAAM,OAAO,IAAI;AAC1D;AAEA;;;CAGC,GACD,SAAS,4BAAM,KAAK;IAClB,OAAO,SAAS,OAAO,UAAU,WAAW,QAAQ;AACtD","sources":["node_modules/mermaid/dist/createText-3df630b5.js","node_modules/mdast-util-from-markdown/lib/index.js","node_modules/mdast-util-to-string/lib/index.js","node_modules/micromark/lib/parse.js","node_modules/micromark-util-combine-extensions/index.js","node_modules/micromark-util-chunked/index.js","node_modules/micromark/lib/initialize/content.js","node_modules/micromark-factory-space/index.js","node_modules/micromark-util-character/index.js","node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","node_modules/micromark/lib/initialize/document.js","node_modules/micromark/lib/initialize/flow.js","node_modules/micromark-core-commonmark/lib/blank-line.js","node_modules/micromark-core-commonmark/lib/content.js","node_modules/micromark-util-subtokenize/index.js","node_modules/micromark/lib/initialize/text.js","node_modules/micromark/lib/create-tokenizer.js","node_modules/micromark-util-resolve-all/index.js","node_modules/micromark/lib/constructs.js","node_modules/micromark-core-commonmark/lib/attention.js","node_modules/micromark-util-classify-character/index.js","node_modules/micromark-core-commonmark/lib/autolink.js","node_modules/micromark-core-commonmark/lib/block-quote.js","node_modules/micromark-core-commonmark/lib/character-escape.js","node_modules/micromark-core-commonmark/lib/character-reference.js","node_modules/decode-named-character-reference/index.js","node_modules/character-entities/index.js","node_modules/micromark-core-commonmark/lib/code-fenced.js","node_modules/micromark-core-commonmark/lib/code-indented.js","node_modules/micromark-core-commonmark/lib/code-text.js","node_modules/micromark-core-commonmark/lib/definition.js","node_modules/micromark-factory-destination/index.js","node_modules/micromark-factory-label/index.js","node_modules/micromark-factory-title/index.js","node_modules/micromark-factory-whitespace/index.js","node_modules/micromark-util-normalize-identifier/index.js","node_modules/micromark-core-commonmark/lib/hard-break-escape.js","node_modules/micromark-core-commonmark/lib/heading-atx.js","node_modules/micromark-core-commonmark/lib/html-flow.js","node_modules/micromark-util-html-tag-name/index.js","node_modules/micromark-core-commonmark/lib/html-text.js","node_modules/micromark-core-commonmark/lib/label-end.js","node_modules/micromark-core-commonmark/lib/label-start-image.js","node_modules/micromark-core-commonmark/lib/label-start-link.js","node_modules/micromark-core-commonmark/lib/line-ending.js","node_modules/micromark-core-commonmark/lib/list.js","node_modules/micromark-core-commonmark/lib/thematic-break.js","node_modules/micromark-core-commonmark/lib/setext-underline.js","node_modules/micromark/lib/preprocess.js","node_modules/micromark/lib/postprocess.js","node_modules/micromark-util-decode-numeric-character-reference/index.js","node_modules/micromark-util-decode-string/index.js","node_modules/unist-util-stringify-position/lib/index.js"],"sourcesContent":["import { l as log, H as decodeEntities } from \"./mermaid-b0ad2de1.js\";\nimport { fromMarkdown } from \"mdast-util-from-markdown\";\nimport { dedent } from \"ts-dedent\";\nfunction preprocessMarkdown(markdown) {\n  const withoutMultipleNewlines = markdown.replace(/\\n{2,}/g, \"\\n\");\n  const withoutExtraSpaces = dedent(withoutMultipleNewlines);\n  return withoutExtraSpaces;\n}\nfunction markdownToLines(markdown) {\n  const preprocessedMarkdown = preprocessMarkdown(markdown);\n  const { children } = fromMarkdown(preprocessedMarkdown);\n  const lines = [[]];\n  let currentLine = 0;\n  function processNode(node, parentType = \"normal\") {\n    if (node.type === \"text\") {\n      const textLines = node.value.split(\"\\n\");\n      textLines.forEach((textLine, index) => {\n        if (index !== 0) {\n          currentLine++;\n          lines.push([]);\n        }\n        textLine.split(\" \").forEach((word) => {\n          if (word) {\n            lines[currentLine].push({ content: word, type: parentType });\n          }\n        });\n      });\n    } else if (node.type === \"strong\" || node.type === \"emphasis\") {\n      node.children.forEach((contentNode) => {\n        processNode(contentNode, node.type);\n      });\n    }\n  }\n  children.forEach((treeNode) => {\n    if (treeNode.type === \"paragraph\") {\n      treeNode.children.forEach((contentNode) => {\n        processNode(contentNode);\n      });\n    }\n  });\n  return lines;\n}\nfunction markdownToHTML(markdown) {\n  const { children } = fromMarkdown(markdown);\n  function output(node) {\n    if (node.type === \"text\") {\n      return node.value.replace(/\\n/g, \"<br/>\");\n    } else if (node.type === \"strong\") {\n      return `<strong>${node.children.map(output).join(\"\")}</strong>`;\n    } else if (node.type === \"emphasis\") {\n      return `<em>${node.children.map(output).join(\"\")}</em>`;\n    } else if (node.type === \"paragraph\") {\n      return `<p>${node.children.map(output).join(\"\")}</p>`;\n    }\n    return `Unsupported markdown: ${node.type}`;\n  }\n  return children.map(output).join(\"\");\n}\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\nfunction addHtmlSpan(element, node, width, classes, addBackground = false) {\n  const fo = element.append(\"foreignObject\");\n  const div = fo.append(\"xhtml:div\");\n  const label = node.label;\n  const labelClass = node.isNode ? \"nodeLabel\" : \"edgeLabel\";\n  div.html(\n    `\n    <span class=\"${labelClass} ${classes}\" ` + (node.labelStyle ? 'style=\"' + node.labelStyle + '\"' : \"\") + \">\" + label + \"</span>\"\n  );\n  applyStyle(div, node.labelStyle);\n  div.style(\"display\", \"table-cell\");\n  div.style(\"white-space\", \"nowrap\");\n  div.style(\"max-width\", width + \"px\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n  if (addBackground) {\n    div.attr(\"class\", \"labelBkg\");\n  }\n  let bbox = div.node().getBoundingClientRect();\n  if (bbox.width === width) {\n    div.style(\"display\", \"table\");\n    div.style(\"white-space\", \"break-spaces\");\n    div.style(\"width\", width + \"px\");\n    bbox = div.node().getBoundingClientRect();\n  }\n  fo.style(\"width\", bbox.width);\n  fo.style(\"height\", bbox.height);\n  return fo.node();\n}\nfunction createTspan(textElement, lineIndex, lineHeight) {\n  return textElement.append(\"tspan\").attr(\"class\", \"text-outer-tspan\").attr(\"x\", 0).attr(\"y\", lineIndex * lineHeight - 0.1 + \"em\").attr(\"dy\", lineHeight + \"em\");\n}\nfunction computeWidthOfText(parentNode, lineHeight, text) {\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, [{ content: text, type: \"normal\" }]);\n  const textLength = testSpan.node().getComputedTextLength();\n  testElement.remove();\n  return textLength;\n}\nfunction createFormattedText(width, g, structuredText, addBackground = false) {\n  const lineHeight = 1.1;\n  const labelGroup = g.append(\"g\");\n  let bkg = labelGroup.insert(\"rect\").attr(\"class\", \"background\");\n  const textElement = labelGroup.append(\"text\").attr(\"y\", \"-10.1\");\n  let lineIndex = 0;\n  structuredText.forEach((line) => {\n    let fullStr = line.map((data) => data.content).join(\" \");\n    let tempStr = \"\";\n    let linesUnderWidth = [];\n    let prevIndex = 0;\n    if (computeWidthOfText(labelGroup, lineHeight, fullStr) <= width) {\n      linesUnderWidth.push(fullStr);\n    } else {\n      for (let i = 0; i <= fullStr.length; i++) {\n        tempStr = fullStr.slice(prevIndex, i);\n        log.info(tempStr, prevIndex, i);\n        if (computeWidthOfText(labelGroup, lineHeight, tempStr) > width) {\n          const subStr = fullStr.slice(prevIndex, i);\n          const lastSpaceIndex = subStr.lastIndexOf(\" \");\n          if (lastSpaceIndex > -1) {\n            i = prevIndex + lastSpaceIndex + 1;\n          }\n          linesUnderWidth.push(fullStr.slice(prevIndex, i).trim());\n          prevIndex = i;\n          tempStr = null;\n        }\n      }\n      if (tempStr != null) {\n        linesUnderWidth.push(tempStr);\n      }\n    }\n    const preparedLines = linesUnderWidth.map((w) => ({ content: w, type: line.type }));\n    for (const preparedLine of preparedLines) {\n      let tspan = createTspan(textElement, lineIndex, lineHeight);\n      updateTextContentAndStyles(tspan, [preparedLine]);\n      lineIndex++;\n    }\n  });\n  if (addBackground) {\n    const bbox = textElement.node().getBBox();\n    const padding = 2;\n    bkg.attr(\"x\", -padding).attr(\"y\", -padding).attr(\"width\", bbox.width + 2 * padding).attr(\"height\", bbox.height + 2 * padding);\n    return labelGroup.node();\n  } else {\n    return textElement.node();\n  }\n}\nfunction updateTextContentAndStyles(tspan, wrappedLine) {\n  tspan.text(\"\");\n  wrappedLine.forEach((word, index) => {\n    const innerTspan = tspan.append(\"tspan\").attr(\"font-style\", word.type === \"em\" ? \"italic\" : \"normal\").attr(\"class\", \"text-inner-tspan\").attr(\"font-weight\", word.type === \"strong\" ? \"bold\" : \"normal\");\n    if (index === 0) {\n      innerTspan.text(word.content);\n    } else {\n      innerTspan.text(\" \" + word.content);\n    }\n  });\n}\nconst createText = (el, text = \"\", {\n  style = \"\",\n  isTitle = false,\n  classes = \"\",\n  useHtmlLabels = true,\n  isNode = true,\n  width,\n  addSvgBackground = false\n} = {}) => {\n  log.info(\"createText\", text, style, isTitle, classes, useHtmlLabels, isNode, addSvgBackground);\n  if (useHtmlLabels) {\n    const htmlText = markdownToHTML(text);\n    const node = {\n      isNode,\n      label: decodeEntities(htmlText).replace(\n        /fa[blrs]?:fa-[\\w-]+/g,\n        (s) => `<i class='${s.replace(\":\", \" \")}'></i>`\n      ),\n      labelStyle: style.replace(\"fill:\", \"color:\")\n    };\n    let vertexNode = addHtmlSpan(el, node, width, classes, addSvgBackground);\n    return vertexNode;\n  } else {\n    const structuredText = markdownToLines(text);\n    const svgLabel = createFormattedText(width, el, structuredText, addSvgBackground);\n    return svgLabel;\n  }\n};\nexport {\n  createText as c\n};\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","import {characterEntities} from 'character-entities'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Decode a single character reference (without the `&` or `;`).\n * You probably only need this when you’re building parsers yourself that follow\n * different rules compared to HTML.\n * This is optimized to be tiny in browsers.\n *\n * @param {string} value\n *   `notin` (named), `#123` (deci), `#x123` (hexa).\n * @returns {string|false}\n *   Decoded reference.\n */\nexport function decodeNamedCharacterReference(value) {\n  return own.call(characterEntities, value) ? characterEntities[value] : false\n}\n","/**\n * Map of named character references.\n *\n * @type {Record<string, string>}\n */\nexport const characterEntities = {\n  AElig: 'Æ',\n  AMP: '&',\n  Aacute: 'Á',\n  Abreve: 'Ă',\n  Acirc: 'Â',\n  Acy: 'А',\n  Afr: '𝔄',\n  Agrave: 'À',\n  Alpha: 'Α',\n  Amacr: 'Ā',\n  And: '⩓',\n  Aogon: 'Ą',\n  Aopf: '𝔸',\n  ApplyFunction: '⁡',\n  Aring: 'Å',\n  Ascr: '𝒜',\n  Assign: '≔',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Backslash: '∖',\n  Barv: '⫧',\n  Barwed: '⌆',\n  Bcy: 'Б',\n  Because: '∵',\n  Bernoullis: 'ℬ',\n  Beta: 'Β',\n  Bfr: '𝔅',\n  Bopf: '𝔹',\n  Breve: '˘',\n  Bscr: 'ℬ',\n  Bumpeq: '≎',\n  CHcy: 'Ч',\n  COPY: '©',\n  Cacute: 'Ć',\n  Cap: '⋒',\n  CapitalDifferentialD: 'ⅅ',\n  Cayleys: 'ℭ',\n  Ccaron: 'Č',\n  Ccedil: 'Ç',\n  Ccirc: 'Ĉ',\n  Cconint: '∰',\n  Cdot: 'Ċ',\n  Cedilla: '¸',\n  CenterDot: '·',\n  Cfr: 'ℭ',\n  Chi: 'Χ',\n  CircleDot: '⊙',\n  CircleMinus: '⊖',\n  CirclePlus: '⊕',\n  CircleTimes: '⊗',\n  ClockwiseContourIntegral: '∲',\n  CloseCurlyDoubleQuote: '”',\n  CloseCurlyQuote: '’',\n  Colon: '∷',\n  Colone: '⩴',\n  Congruent: '≡',\n  Conint: '∯',\n  ContourIntegral: '∮',\n  Copf: 'ℂ',\n  Coproduct: '∐',\n  CounterClockwiseContourIntegral: '∳',\n  Cross: '⨯',\n  Cscr: '𝒞',\n  Cup: '⋓',\n  CupCap: '≍',\n  DD: 'ⅅ',\n  DDotrahd: '⤑',\n  DJcy: 'Ђ',\n  DScy: 'Ѕ',\n  DZcy: 'Џ',\n  Dagger: '‡',\n  Darr: '↡',\n  Dashv: '⫤',\n  Dcaron: 'Ď',\n  Dcy: 'Д',\n  Del: '∇',\n  Delta: 'Δ',\n  Dfr: '𝔇',\n  DiacriticalAcute: '´',\n  DiacriticalDot: '˙',\n  DiacriticalDoubleAcute: '˝',\n  DiacriticalGrave: '`',\n  DiacriticalTilde: '˜',\n  Diamond: '⋄',\n  DifferentialD: 'ⅆ',\n  Dopf: '𝔻',\n  Dot: '¨',\n  DotDot: '⃜',\n  DotEqual: '≐',\n  DoubleContourIntegral: '∯',\n  DoubleDot: '¨',\n  DoubleDownArrow: '⇓',\n  DoubleLeftArrow: '⇐',\n  DoubleLeftRightArrow: '⇔',\n  DoubleLeftTee: '⫤',\n  DoubleLongLeftArrow: '⟸',\n  DoubleLongLeftRightArrow: '⟺',\n  DoubleLongRightArrow: '⟹',\n  DoubleRightArrow: '⇒',\n  DoubleRightTee: '⊨',\n  DoubleUpArrow: '⇑',\n  DoubleUpDownArrow: '⇕',\n  DoubleVerticalBar: '∥',\n  DownArrow: '↓',\n  DownArrowBar: '⤓',\n  DownArrowUpArrow: '⇵',\n  DownBreve: '̑',\n  DownLeftRightVector: '⥐',\n  DownLeftTeeVector: '⥞',\n  DownLeftVector: '↽',\n  DownLeftVectorBar: '⥖',\n  DownRightTeeVector: '⥟',\n  DownRightVector: '⇁',\n  DownRightVectorBar: '⥗',\n  DownTee: '⊤',\n  DownTeeArrow: '↧',\n  Downarrow: '⇓',\n  Dscr: '𝒟',\n  Dstrok: 'Đ',\n  ENG: 'Ŋ',\n  ETH: 'Ð',\n  Eacute: 'É',\n  Ecaron: 'Ě',\n  Ecirc: 'Ê',\n  Ecy: 'Э',\n  Edot: 'Ė',\n  Efr: '𝔈',\n  Egrave: 'È',\n  Element: '∈',\n  Emacr: 'Ē',\n  EmptySmallSquare: '◻',\n  EmptyVerySmallSquare: '▫',\n  Eogon: 'Ę',\n  Eopf: '𝔼',\n  Epsilon: 'Ε',\n  Equal: '⩵',\n  EqualTilde: '≂',\n  Equilibrium: '⇌',\n  Escr: 'ℰ',\n  Esim: '⩳',\n  Eta: 'Η',\n  Euml: 'Ë',\n  Exists: '∃',\n  ExponentialE: 'ⅇ',\n  Fcy: 'Ф',\n  Ffr: '𝔉',\n  FilledSmallSquare: '◼',\n  FilledVerySmallSquare: '▪',\n  Fopf: '𝔽',\n  ForAll: '∀',\n  Fouriertrf: 'ℱ',\n  Fscr: 'ℱ',\n  GJcy: 'Ѓ',\n  GT: '>',\n  Gamma: 'Γ',\n  Gammad: 'Ϝ',\n  Gbreve: 'Ğ',\n  Gcedil: 'Ģ',\n  Gcirc: 'Ĝ',\n  Gcy: 'Г',\n  Gdot: 'Ġ',\n  Gfr: '𝔊',\n  Gg: '⋙',\n  Gopf: '𝔾',\n  GreaterEqual: '≥',\n  GreaterEqualLess: '⋛',\n  GreaterFullEqual: '≧',\n  GreaterGreater: '⪢',\n  GreaterLess: '≷',\n  GreaterSlantEqual: '⩾',\n  GreaterTilde: '≳',\n  Gscr: '𝒢',\n  Gt: '≫',\n  HARDcy: 'Ъ',\n  Hacek: 'ˇ',\n  Hat: '^',\n  Hcirc: 'Ĥ',\n  Hfr: 'ℌ',\n  HilbertSpace: 'ℋ',\n  Hopf: 'ℍ',\n  HorizontalLine: '─',\n  Hscr: 'ℋ',\n  Hstrok: 'Ħ',\n  HumpDownHump: '≎',\n  HumpEqual: '≏',\n  IEcy: 'Е',\n  IJlig: 'Ĳ',\n  IOcy: 'Ё',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Icy: 'И',\n  Idot: 'İ',\n  Ifr: 'ℑ',\n  Igrave: 'Ì',\n  Im: 'ℑ',\n  Imacr: 'Ī',\n  ImaginaryI: 'ⅈ',\n  Implies: '⇒',\n  Int: '∬',\n  Integral: '∫',\n  Intersection: '⋂',\n  InvisibleComma: '⁣',\n  InvisibleTimes: '⁢',\n  Iogon: 'Į',\n  Iopf: '𝕀',\n  Iota: 'Ι',\n  Iscr: 'ℐ',\n  Itilde: 'Ĩ',\n  Iukcy: 'І',\n  Iuml: 'Ï',\n  Jcirc: 'Ĵ',\n  Jcy: 'Й',\n  Jfr: '𝔍',\n  Jopf: '𝕁',\n  Jscr: '𝒥',\n  Jsercy: 'Ј',\n  Jukcy: 'Є',\n  KHcy: 'Х',\n  KJcy: 'Ќ',\n  Kappa: 'Κ',\n  Kcedil: 'Ķ',\n  Kcy: 'К',\n  Kfr: '𝔎',\n  Kopf: '𝕂',\n  Kscr: '𝒦',\n  LJcy: 'Љ',\n  LT: '<',\n  Lacute: 'Ĺ',\n  Lambda: 'Λ',\n  Lang: '⟪',\n  Laplacetrf: 'ℒ',\n  Larr: '↞',\n  Lcaron: 'Ľ',\n  Lcedil: 'Ļ',\n  Lcy: 'Л',\n  LeftAngleBracket: '⟨',\n  LeftArrow: '←',\n  LeftArrowBar: '⇤',\n  LeftArrowRightArrow: '⇆',\n  LeftCeiling: '⌈',\n  LeftDoubleBracket: '⟦',\n  LeftDownTeeVector: '⥡',\n  LeftDownVector: '⇃',\n  LeftDownVectorBar: '⥙',\n  LeftFloor: '⌊',\n  LeftRightArrow: '↔',\n  LeftRightVector: '⥎',\n  LeftTee: '⊣',\n  LeftTeeArrow: '↤',\n  LeftTeeVector: '⥚',\n  LeftTriangle: '⊲',\n  LeftTriangleBar: '⧏',\n  LeftTriangleEqual: '⊴',\n  LeftUpDownVector: '⥑',\n  LeftUpTeeVector: '⥠',\n  LeftUpVector: '↿',\n  LeftUpVectorBar: '⥘',\n  LeftVector: '↼',\n  LeftVectorBar: '⥒',\n  Leftarrow: '⇐',\n  Leftrightarrow: '⇔',\n  LessEqualGreater: '⋚',\n  LessFullEqual: '≦',\n  LessGreater: '≶',\n  LessLess: '⪡',\n  LessSlantEqual: '⩽',\n  LessTilde: '≲',\n  Lfr: '𝔏',\n  Ll: '⋘',\n  Lleftarrow: '⇚',\n  Lmidot: 'Ŀ',\n  LongLeftArrow: '⟵',\n  LongLeftRightArrow: '⟷',\n  LongRightArrow: '⟶',\n  Longleftarrow: '⟸',\n  Longleftrightarrow: '⟺',\n  Longrightarrow: '⟹',\n  Lopf: '𝕃',\n  LowerLeftArrow: '↙',\n  LowerRightArrow: '↘',\n  Lscr: 'ℒ',\n  Lsh: '↰',\n  Lstrok: 'Ł',\n  Lt: '≪',\n  Map: '⤅',\n  Mcy: 'М',\n  MediumSpace: ' ',\n  Mellintrf: 'ℳ',\n  Mfr: '𝔐',\n  MinusPlus: '∓',\n  Mopf: '𝕄',\n  Mscr: 'ℳ',\n  Mu: 'Μ',\n  NJcy: 'Њ',\n  Nacute: 'Ń',\n  Ncaron: 'Ň',\n  Ncedil: 'Ņ',\n  Ncy: 'Н',\n  NegativeMediumSpace: '​',\n  NegativeThickSpace: '​',\n  NegativeThinSpace: '​',\n  NegativeVeryThinSpace: '​',\n  NestedGreaterGreater: '≫',\n  NestedLessLess: '≪',\n  NewLine: '\\n',\n  Nfr: '𝔑',\n  NoBreak: '⁠',\n  NonBreakingSpace: ' ',\n  Nopf: 'ℕ',\n  Not: '⫬',\n  NotCongruent: '≢',\n  NotCupCap: '≭',\n  NotDoubleVerticalBar: '∦',\n  NotElement: '∉',\n  NotEqual: '≠',\n  NotEqualTilde: '≂̸',\n  NotExists: '∄',\n  NotGreater: '≯',\n  NotGreaterEqual: '≱',\n  NotGreaterFullEqual: '≧̸',\n  NotGreaterGreater: '≫̸',\n  NotGreaterLess: '≹',\n  NotGreaterSlantEqual: '⩾̸',\n  NotGreaterTilde: '≵',\n  NotHumpDownHump: '≎̸',\n  NotHumpEqual: '≏̸',\n  NotLeftTriangle: '⋪',\n  NotLeftTriangleBar: '⧏̸',\n  NotLeftTriangleEqual: '⋬',\n  NotLess: '≮',\n  NotLessEqual: '≰',\n  NotLessGreater: '≸',\n  NotLessLess: '≪̸',\n  NotLessSlantEqual: '⩽̸',\n  NotLessTilde: '≴',\n  NotNestedGreaterGreater: '⪢̸',\n  NotNestedLessLess: '⪡̸',\n  NotPrecedes: '⊀',\n  NotPrecedesEqual: '⪯̸',\n  NotPrecedesSlantEqual: '⋠',\n  NotReverseElement: '∌',\n  NotRightTriangle: '⋫',\n  NotRightTriangleBar: '⧐̸',\n  NotRightTriangleEqual: '⋭',\n  NotSquareSubset: '⊏̸',\n  NotSquareSubsetEqual: '⋢',\n  NotSquareSuperset: '⊐̸',\n  NotSquareSupersetEqual: '⋣',\n  NotSubset: '⊂⃒',\n  NotSubsetEqual: '⊈',\n  NotSucceeds: '⊁',\n  NotSucceedsEqual: '⪰̸',\n  NotSucceedsSlantEqual: '⋡',\n  NotSucceedsTilde: '≿̸',\n  NotSuperset: '⊃⃒',\n  NotSupersetEqual: '⊉',\n  NotTilde: '≁',\n  NotTildeEqual: '≄',\n  NotTildeFullEqual: '≇',\n  NotTildeTilde: '≉',\n  NotVerticalBar: '∤',\n  Nscr: '𝒩',\n  Ntilde: 'Ñ',\n  Nu: 'Ν',\n  OElig: 'Œ',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Ocy: 'О',\n  Odblac: 'Ő',\n  Ofr: '𝔒',\n  Ograve: 'Ò',\n  Omacr: 'Ō',\n  Omega: 'Ω',\n  Omicron: 'Ο',\n  Oopf: '𝕆',\n  OpenCurlyDoubleQuote: '“',\n  OpenCurlyQuote: '‘',\n  Or: '⩔',\n  Oscr: '𝒪',\n  Oslash: 'Ø',\n  Otilde: 'Õ',\n  Otimes: '⨷',\n  Ouml: 'Ö',\n  OverBar: '‾',\n  OverBrace: '⏞',\n  OverBracket: '⎴',\n  OverParenthesis: '⏜',\n  PartialD: '∂',\n  Pcy: 'П',\n  Pfr: '𝔓',\n  Phi: 'Φ',\n  Pi: 'Π',\n  PlusMinus: '±',\n  Poincareplane: 'ℌ',\n  Popf: 'ℙ',\n  Pr: '⪻',\n  Precedes: '≺',\n  PrecedesEqual: '⪯',\n  PrecedesSlantEqual: '≼',\n  PrecedesTilde: '≾',\n  Prime: '″',\n  Product: '∏',\n  Proportion: '∷',\n  Proportional: '∝',\n  Pscr: '𝒫',\n  Psi: 'Ψ',\n  QUOT: '\"',\n  Qfr: '𝔔',\n  Qopf: 'ℚ',\n  Qscr: '𝒬',\n  RBarr: '⤐',\n  REG: '®',\n  Racute: 'Ŕ',\n  Rang: '⟫',\n  Rarr: '↠',\n  Rarrtl: '⤖',\n  Rcaron: 'Ř',\n  Rcedil: 'Ŗ',\n  Rcy: 'Р',\n  Re: 'ℜ',\n  ReverseElement: '∋',\n  ReverseEquilibrium: '⇋',\n  ReverseUpEquilibrium: '⥯',\n  Rfr: 'ℜ',\n  Rho: 'Ρ',\n  RightAngleBracket: '⟩',\n  RightArrow: '→',\n  RightArrowBar: '⇥',\n  RightArrowLeftArrow: '⇄',\n  RightCeiling: '⌉',\n  RightDoubleBracket: '⟧',\n  RightDownTeeVector: '⥝',\n  RightDownVector: '⇂',\n  RightDownVectorBar: '⥕',\n  RightFloor: '⌋',\n  RightTee: '⊢',\n  RightTeeArrow: '↦',\n  RightTeeVector: '⥛',\n  RightTriangle: '⊳',\n  RightTriangleBar: '⧐',\n  RightTriangleEqual: '⊵',\n  RightUpDownVector: '⥏',\n  RightUpTeeVector: '⥜',\n  RightUpVector: '↾',\n  RightUpVectorBar: '⥔',\n  RightVector: '⇀',\n  RightVectorBar: '⥓',\n  Rightarrow: '⇒',\n  Ropf: 'ℝ',\n  RoundImplies: '⥰',\n  Rrightarrow: '⇛',\n  Rscr: 'ℛ',\n  Rsh: '↱',\n  RuleDelayed: '⧴',\n  SHCHcy: 'Щ',\n  SHcy: 'Ш',\n  SOFTcy: 'Ь',\n  Sacute: 'Ś',\n  Sc: '⪼',\n  Scaron: 'Š',\n  Scedil: 'Ş',\n  Scirc: 'Ŝ',\n  Scy: 'С',\n  Sfr: '𝔖',\n  ShortDownArrow: '↓',\n  ShortLeftArrow: '←',\n  ShortRightArrow: '→',\n  ShortUpArrow: '↑',\n  Sigma: 'Σ',\n  SmallCircle: '∘',\n  Sopf: '𝕊',\n  Sqrt: '√',\n  Square: '□',\n  SquareIntersection: '⊓',\n  SquareSubset: '⊏',\n  SquareSubsetEqual: '⊑',\n  SquareSuperset: '⊐',\n  SquareSupersetEqual: '⊒',\n  SquareUnion: '⊔',\n  Sscr: '𝒮',\n  Star: '⋆',\n  Sub: '⋐',\n  Subset: '⋐',\n  SubsetEqual: '⊆',\n  Succeeds: '≻',\n  SucceedsEqual: '⪰',\n  SucceedsSlantEqual: '≽',\n  SucceedsTilde: '≿',\n  SuchThat: '∋',\n  Sum: '∑',\n  Sup: '⋑',\n  Superset: '⊃',\n  SupersetEqual: '⊇',\n  Supset: '⋑',\n  THORN: 'Þ',\n  TRADE: '™',\n  TSHcy: 'Ћ',\n  TScy: 'Ц',\n  Tab: '\\t',\n  Tau: 'Τ',\n  Tcaron: 'Ť',\n  Tcedil: 'Ţ',\n  Tcy: 'Т',\n  Tfr: '𝔗',\n  Therefore: '∴',\n  Theta: 'Θ',\n  ThickSpace: '  ',\n  ThinSpace: ' ',\n  Tilde: '∼',\n  TildeEqual: '≃',\n  TildeFullEqual: '≅',\n  TildeTilde: '≈',\n  Topf: '𝕋',\n  TripleDot: '⃛',\n  Tscr: '𝒯',\n  Tstrok: 'Ŧ',\n  Uacute: 'Ú',\n  Uarr: '↟',\n  Uarrocir: '⥉',\n  Ubrcy: 'Ў',\n  Ubreve: 'Ŭ',\n  Ucirc: 'Û',\n  Ucy: 'У',\n  Udblac: 'Ű',\n  Ufr: '𝔘',\n  Ugrave: 'Ù',\n  Umacr: 'Ū',\n  UnderBar: '_',\n  UnderBrace: '⏟',\n  UnderBracket: '⎵',\n  UnderParenthesis: '⏝',\n  Union: '⋃',\n  UnionPlus: '⊎',\n  Uogon: 'Ų',\n  Uopf: '𝕌',\n  UpArrow: '↑',\n  UpArrowBar: '⤒',\n  UpArrowDownArrow: '⇅',\n  UpDownArrow: '↕',\n  UpEquilibrium: '⥮',\n  UpTee: '⊥',\n  UpTeeArrow: '↥',\n  Uparrow: '⇑',\n  Updownarrow: '⇕',\n  UpperLeftArrow: '↖',\n  UpperRightArrow: '↗',\n  Upsi: 'ϒ',\n  Upsilon: 'Υ',\n  Uring: 'Ů',\n  Uscr: '𝒰',\n  Utilde: 'Ũ',\n  Uuml: 'Ü',\n  VDash: '⊫',\n  Vbar: '⫫',\n  Vcy: 'В',\n  Vdash: '⊩',\n  Vdashl: '⫦',\n  Vee: '⋁',\n  Verbar: '‖',\n  Vert: '‖',\n  VerticalBar: '∣',\n  VerticalLine: '|',\n  VerticalSeparator: '❘',\n  VerticalTilde: '≀',\n  VeryThinSpace: ' ',\n  Vfr: '𝔙',\n  Vopf: '𝕍',\n  Vscr: '𝒱',\n  Vvdash: '⊪',\n  Wcirc: 'Ŵ',\n  Wedge: '⋀',\n  Wfr: '𝔚',\n  Wopf: '𝕎',\n  Wscr: '𝒲',\n  Xfr: '𝔛',\n  Xi: 'Ξ',\n  Xopf: '𝕏',\n  Xscr: '𝒳',\n  YAcy: 'Я',\n  YIcy: 'Ї',\n  YUcy: 'Ю',\n  Yacute: 'Ý',\n  Ycirc: 'Ŷ',\n  Ycy: 'Ы',\n  Yfr: '𝔜',\n  Yopf: '𝕐',\n  Yscr: '𝒴',\n  Yuml: 'Ÿ',\n  ZHcy: 'Ж',\n  Zacute: 'Ź',\n  Zcaron: 'Ž',\n  Zcy: 'З',\n  Zdot: 'Ż',\n  ZeroWidthSpace: '​',\n  Zeta: 'Ζ',\n  Zfr: 'ℨ',\n  Zopf: 'ℤ',\n  Zscr: '𝒵',\n  aacute: 'á',\n  abreve: 'ă',\n  ac: '∾',\n  acE: '∾̳',\n  acd: '∿',\n  acirc: 'â',\n  acute: '´',\n  acy: 'а',\n  aelig: 'æ',\n  af: '⁡',\n  afr: '𝔞',\n  agrave: 'à',\n  alefsym: 'ℵ',\n  aleph: 'ℵ',\n  alpha: 'α',\n  amacr: 'ā',\n  amalg: '⨿',\n  amp: '&',\n  and: '∧',\n  andand: '⩕',\n  andd: '⩜',\n  andslope: '⩘',\n  andv: '⩚',\n  ang: '∠',\n  ange: '⦤',\n  angle: '∠',\n  angmsd: '∡',\n  angmsdaa: '⦨',\n  angmsdab: '⦩',\n  angmsdac: '⦪',\n  angmsdad: '⦫',\n  angmsdae: '⦬',\n  angmsdaf: '⦭',\n  angmsdag: '⦮',\n  angmsdah: '⦯',\n  angrt: '∟',\n  angrtvb: '⊾',\n  angrtvbd: '⦝',\n  angsph: '∢',\n  angst: 'Å',\n  angzarr: '⍼',\n  aogon: 'ą',\n  aopf: '𝕒',\n  ap: '≈',\n  apE: '⩰',\n  apacir: '⩯',\n  ape: '≊',\n  apid: '≋',\n  apos: \"'\",\n  approx: '≈',\n  approxeq: '≊',\n  aring: 'å',\n  ascr: '𝒶',\n  ast: '*',\n  asymp: '≈',\n  asympeq: '≍',\n  atilde: 'ã',\n  auml: 'ä',\n  awconint: '∳',\n  awint: '⨑',\n  bNot: '⫭',\n  backcong: '≌',\n  backepsilon: '϶',\n  backprime: '‵',\n  backsim: '∽',\n  backsimeq: '⋍',\n  barvee: '⊽',\n  barwed: '⌅',\n  barwedge: '⌅',\n  bbrk: '⎵',\n  bbrktbrk: '⎶',\n  bcong: '≌',\n  bcy: 'б',\n  bdquo: '„',\n  becaus: '∵',\n  because: '∵',\n  bemptyv: '⦰',\n  bepsi: '϶',\n  bernou: 'ℬ',\n  beta: 'β',\n  beth: 'ℶ',\n  between: '≬',\n  bfr: '𝔟',\n  bigcap: '⋂',\n  bigcirc: '◯',\n  bigcup: '⋃',\n  bigodot: '⨀',\n  bigoplus: '⨁',\n  bigotimes: '⨂',\n  bigsqcup: '⨆',\n  bigstar: '★',\n  bigtriangledown: '▽',\n  bigtriangleup: '△',\n  biguplus: '⨄',\n  bigvee: '⋁',\n  bigwedge: '⋀',\n  bkarow: '⤍',\n  blacklozenge: '⧫',\n  blacksquare: '▪',\n  blacktriangle: '▴',\n  blacktriangledown: '▾',\n  blacktriangleleft: '◂',\n  blacktriangleright: '▸',\n  blank: '␣',\n  blk12: '▒',\n  blk14: '░',\n  blk34: '▓',\n  block: '█',\n  bne: '=⃥',\n  bnequiv: '≡⃥',\n  bnot: '⌐',\n  bopf: '𝕓',\n  bot: '⊥',\n  bottom: '⊥',\n  bowtie: '⋈',\n  boxDL: '╗',\n  boxDR: '╔',\n  boxDl: '╖',\n  boxDr: '╓',\n  boxH: '═',\n  boxHD: '╦',\n  boxHU: '╩',\n  boxHd: '╤',\n  boxHu: '╧',\n  boxUL: '╝',\n  boxUR: '╚',\n  boxUl: '╜',\n  boxUr: '╙',\n  boxV: '║',\n  boxVH: '╬',\n  boxVL: '╣',\n  boxVR: '╠',\n  boxVh: '╫',\n  boxVl: '╢',\n  boxVr: '╟',\n  boxbox: '⧉',\n  boxdL: '╕',\n  boxdR: '╒',\n  boxdl: '┐',\n  boxdr: '┌',\n  boxh: '─',\n  boxhD: '╥',\n  boxhU: '╨',\n  boxhd: '┬',\n  boxhu: '┴',\n  boxminus: '⊟',\n  boxplus: '⊞',\n  boxtimes: '⊠',\n  boxuL: '╛',\n  boxuR: '╘',\n  boxul: '┘',\n  boxur: '└',\n  boxv: '│',\n  boxvH: '╪',\n  boxvL: '╡',\n  boxvR: '╞',\n  boxvh: '┼',\n  boxvl: '┤',\n  boxvr: '├',\n  bprime: '‵',\n  breve: '˘',\n  brvbar: '¦',\n  bscr: '𝒷',\n  bsemi: '⁏',\n  bsim: '∽',\n  bsime: '⋍',\n  bsol: '\\\\',\n  bsolb: '⧅',\n  bsolhsub: '⟈',\n  bull: '•',\n  bullet: '•',\n  bump: '≎',\n  bumpE: '⪮',\n  bumpe: '≏',\n  bumpeq: '≏',\n  cacute: 'ć',\n  cap: '∩',\n  capand: '⩄',\n  capbrcup: '⩉',\n  capcap: '⩋',\n  capcup: '⩇',\n  capdot: '⩀',\n  caps: '∩︀',\n  caret: '⁁',\n  caron: 'ˇ',\n  ccaps: '⩍',\n  ccaron: 'č',\n  ccedil: 'ç',\n  ccirc: 'ĉ',\n  ccups: '⩌',\n  ccupssm: '⩐',\n  cdot: 'ċ',\n  cedil: '¸',\n  cemptyv: '⦲',\n  cent: '¢',\n  centerdot: '·',\n  cfr: '𝔠',\n  chcy: 'ч',\n  check: '✓',\n  checkmark: '✓',\n  chi: 'χ',\n  cir: '○',\n  cirE: '⧃',\n  circ: 'ˆ',\n  circeq: '≗',\n  circlearrowleft: '↺',\n  circlearrowright: '↻',\n  circledR: '®',\n  circledS: 'Ⓢ',\n  circledast: '⊛',\n  circledcirc: '⊚',\n  circleddash: '⊝',\n  cire: '≗',\n  cirfnint: '⨐',\n  cirmid: '⫯',\n  cirscir: '⧂',\n  clubs: '♣',\n  clubsuit: '♣',\n  colon: ':',\n  colone: '≔',\n  coloneq: '≔',\n  comma: ',',\n  commat: '@',\n  comp: '∁',\n  compfn: '∘',\n  complement: '∁',\n  complexes: 'ℂ',\n  cong: '≅',\n  congdot: '⩭',\n  conint: '∮',\n  copf: '𝕔',\n  coprod: '∐',\n  copy: '©',\n  copysr: '℗',\n  crarr: '↵',\n  cross: '✗',\n  cscr: '𝒸',\n  csub: '⫏',\n  csube: '⫑',\n  csup: '⫐',\n  csupe: '⫒',\n  ctdot: '⋯',\n  cudarrl: '⤸',\n  cudarrr: '⤵',\n  cuepr: '⋞',\n  cuesc: '⋟',\n  cularr: '↶',\n  cularrp: '⤽',\n  cup: '∪',\n  cupbrcap: '⩈',\n  cupcap: '⩆',\n  cupcup: '⩊',\n  cupdot: '⊍',\n  cupor: '⩅',\n  cups: '∪︀',\n  curarr: '↷',\n  curarrm: '⤼',\n  curlyeqprec: '⋞',\n  curlyeqsucc: '⋟',\n  curlyvee: '⋎',\n  curlywedge: '⋏',\n  curren: '¤',\n  curvearrowleft: '↶',\n  curvearrowright: '↷',\n  cuvee: '⋎',\n  cuwed: '⋏',\n  cwconint: '∲',\n  cwint: '∱',\n  cylcty: '⌭',\n  dArr: '⇓',\n  dHar: '⥥',\n  dagger: '†',\n  daleth: 'ℸ',\n  darr: '↓',\n  dash: '‐',\n  dashv: '⊣',\n  dbkarow: '⤏',\n  dblac: '˝',\n  dcaron: 'ď',\n  dcy: 'д',\n  dd: 'ⅆ',\n  ddagger: '‡',\n  ddarr: '⇊',\n  ddotseq: '⩷',\n  deg: '°',\n  delta: 'δ',\n  demptyv: '⦱',\n  dfisht: '⥿',\n  dfr: '𝔡',\n  dharl: '⇃',\n  dharr: '⇂',\n  diam: '⋄',\n  diamond: '⋄',\n  diamondsuit: '♦',\n  diams: '♦',\n  die: '¨',\n  digamma: 'ϝ',\n  disin: '⋲',\n  div: '÷',\n  divide: '÷',\n  divideontimes: '⋇',\n  divonx: '⋇',\n  djcy: 'ђ',\n  dlcorn: '⌞',\n  dlcrop: '⌍',\n  dollar: '$',\n  dopf: '𝕕',\n  dot: '˙',\n  doteq: '≐',\n  doteqdot: '≑',\n  dotminus: '∸',\n  dotplus: '∔',\n  dotsquare: '⊡',\n  doublebarwedge: '⌆',\n  downarrow: '↓',\n  downdownarrows: '⇊',\n  downharpoonleft: '⇃',\n  downharpoonright: '⇂',\n  drbkarow: '⤐',\n  drcorn: '⌟',\n  drcrop: '⌌',\n  dscr: '𝒹',\n  dscy: 'ѕ',\n  dsol: '⧶',\n  dstrok: 'đ',\n  dtdot: '⋱',\n  dtri: '▿',\n  dtrif: '▾',\n  duarr: '⇵',\n  duhar: '⥯',\n  dwangle: '⦦',\n  dzcy: 'џ',\n  dzigrarr: '⟿',\n  eDDot: '⩷',\n  eDot: '≑',\n  eacute: 'é',\n  easter: '⩮',\n  ecaron: 'ě',\n  ecir: '≖',\n  ecirc: 'ê',\n  ecolon: '≕',\n  ecy: 'э',\n  edot: 'ė',\n  ee: 'ⅇ',\n  efDot: '≒',\n  efr: '𝔢',\n  eg: '⪚',\n  egrave: 'è',\n  egs: '⪖',\n  egsdot: '⪘',\n  el: '⪙',\n  elinters: '⏧',\n  ell: 'ℓ',\n  els: '⪕',\n  elsdot: '⪗',\n  emacr: 'ē',\n  empty: '∅',\n  emptyset: '∅',\n  emptyv: '∅',\n  emsp13: ' ',\n  emsp14: ' ',\n  emsp: ' ',\n  eng: 'ŋ',\n  ensp: ' ',\n  eogon: 'ę',\n  eopf: '𝕖',\n  epar: '⋕',\n  eparsl: '⧣',\n  eplus: '⩱',\n  epsi: 'ε',\n  epsilon: 'ε',\n  epsiv: 'ϵ',\n  eqcirc: '≖',\n  eqcolon: '≕',\n  eqsim: '≂',\n  eqslantgtr: '⪖',\n  eqslantless: '⪕',\n  equals: '=',\n  equest: '≟',\n  equiv: '≡',\n  equivDD: '⩸',\n  eqvparsl: '⧥',\n  erDot: '≓',\n  erarr: '⥱',\n  escr: 'ℯ',\n  esdot: '≐',\n  esim: '≂',\n  eta: 'η',\n  eth: 'ð',\n  euml: 'ë',\n  euro: '€',\n  excl: '!',\n  exist: '∃',\n  expectation: 'ℰ',\n  exponentiale: 'ⅇ',\n  fallingdotseq: '≒',\n  fcy: 'ф',\n  female: '♀',\n  ffilig: 'ﬃ',\n  fflig: 'ﬀ',\n  ffllig: 'ﬄ',\n  ffr: '𝔣',\n  filig: 'ﬁ',\n  fjlig: 'fj',\n  flat: '♭',\n  fllig: 'ﬂ',\n  fltns: '▱',\n  fnof: 'ƒ',\n  fopf: '𝕗',\n  forall: '∀',\n  fork: '⋔',\n  forkv: '⫙',\n  fpartint: '⨍',\n  frac12: '½',\n  frac13: '⅓',\n  frac14: '¼',\n  frac15: '⅕',\n  frac16: '⅙',\n  frac18: '⅛',\n  frac23: '⅔',\n  frac25: '⅖',\n  frac34: '¾',\n  frac35: '⅗',\n  frac38: '⅜',\n  frac45: '⅘',\n  frac56: '⅚',\n  frac58: '⅝',\n  frac78: '⅞',\n  frasl: '⁄',\n  frown: '⌢',\n  fscr: '𝒻',\n  gE: '≧',\n  gEl: '⪌',\n  gacute: 'ǵ',\n  gamma: 'γ',\n  gammad: 'ϝ',\n  gap: '⪆',\n  gbreve: 'ğ',\n  gcirc: 'ĝ',\n  gcy: 'г',\n  gdot: 'ġ',\n  ge: '≥',\n  gel: '⋛',\n  geq: '≥',\n  geqq: '≧',\n  geqslant: '⩾',\n  ges: '⩾',\n  gescc: '⪩',\n  gesdot: '⪀',\n  gesdoto: '⪂',\n  gesdotol: '⪄',\n  gesl: '⋛︀',\n  gesles: '⪔',\n  gfr: '𝔤',\n  gg: '≫',\n  ggg: '⋙',\n  gimel: 'ℷ',\n  gjcy: 'ѓ',\n  gl: '≷',\n  glE: '⪒',\n  gla: '⪥',\n  glj: '⪤',\n  gnE: '≩',\n  gnap: '⪊',\n  gnapprox: '⪊',\n  gne: '⪈',\n  gneq: '⪈',\n  gneqq: '≩',\n  gnsim: '⋧',\n  gopf: '𝕘',\n  grave: '`',\n  gscr: 'ℊ',\n  gsim: '≳',\n  gsime: '⪎',\n  gsiml: '⪐',\n  gt: '>',\n  gtcc: '⪧',\n  gtcir: '⩺',\n  gtdot: '⋗',\n  gtlPar: '⦕',\n  gtquest: '⩼',\n  gtrapprox: '⪆',\n  gtrarr: '⥸',\n  gtrdot: '⋗',\n  gtreqless: '⋛',\n  gtreqqless: '⪌',\n  gtrless: '≷',\n  gtrsim: '≳',\n  gvertneqq: '≩︀',\n  gvnE: '≩︀',\n  hArr: '⇔',\n  hairsp: ' ',\n  half: '½',\n  hamilt: 'ℋ',\n  hardcy: 'ъ',\n  harr: '↔',\n  harrcir: '⥈',\n  harrw: '↭',\n  hbar: 'ℏ',\n  hcirc: 'ĥ',\n  hearts: '♥',\n  heartsuit: '♥',\n  hellip: '…',\n  hercon: '⊹',\n  hfr: '𝔥',\n  hksearow: '⤥',\n  hkswarow: '⤦',\n  hoarr: '⇿',\n  homtht: '∻',\n  hookleftarrow: '↩',\n  hookrightarrow: '↪',\n  hopf: '𝕙',\n  horbar: '―',\n  hscr: '𝒽',\n  hslash: 'ℏ',\n  hstrok: 'ħ',\n  hybull: '⁃',\n  hyphen: '‐',\n  iacute: 'í',\n  ic: '⁣',\n  icirc: 'î',\n  icy: 'и',\n  iecy: 'е',\n  iexcl: '¡',\n  iff: '⇔',\n  ifr: '𝔦',\n  igrave: 'ì',\n  ii: 'ⅈ',\n  iiiint: '⨌',\n  iiint: '∭',\n  iinfin: '⧜',\n  iiota: '℩',\n  ijlig: 'ĳ',\n  imacr: 'ī',\n  image: 'ℑ',\n  imagline: 'ℐ',\n  imagpart: 'ℑ',\n  imath: 'ı',\n  imof: '⊷',\n  imped: 'Ƶ',\n  in: '∈',\n  incare: '℅',\n  infin: '∞',\n  infintie: '⧝',\n  inodot: 'ı',\n  int: '∫',\n  intcal: '⊺',\n  integers: 'ℤ',\n  intercal: '⊺',\n  intlarhk: '⨗',\n  intprod: '⨼',\n  iocy: 'ё',\n  iogon: 'į',\n  iopf: '𝕚',\n  iota: 'ι',\n  iprod: '⨼',\n  iquest: '¿',\n  iscr: '𝒾',\n  isin: '∈',\n  isinE: '⋹',\n  isindot: '⋵',\n  isins: '⋴',\n  isinsv: '⋳',\n  isinv: '∈',\n  it: '⁢',\n  itilde: 'ĩ',\n  iukcy: 'і',\n  iuml: 'ï',\n  jcirc: 'ĵ',\n  jcy: 'й',\n  jfr: '𝔧',\n  jmath: 'ȷ',\n  jopf: '𝕛',\n  jscr: '𝒿',\n  jsercy: 'ј',\n  jukcy: 'є',\n  kappa: 'κ',\n  kappav: 'ϰ',\n  kcedil: 'ķ',\n  kcy: 'к',\n  kfr: '𝔨',\n  kgreen: 'ĸ',\n  khcy: 'х',\n  kjcy: 'ќ',\n  kopf: '𝕜',\n  kscr: '𝓀',\n  lAarr: '⇚',\n  lArr: '⇐',\n  lAtail: '⤛',\n  lBarr: '⤎',\n  lE: '≦',\n  lEg: '⪋',\n  lHar: '⥢',\n  lacute: 'ĺ',\n  laemptyv: '⦴',\n  lagran: 'ℒ',\n  lambda: 'λ',\n  lang: '⟨',\n  langd: '⦑',\n  langle: '⟨',\n  lap: '⪅',\n  laquo: '«',\n  larr: '←',\n  larrb: '⇤',\n  larrbfs: '⤟',\n  larrfs: '⤝',\n  larrhk: '↩',\n  larrlp: '↫',\n  larrpl: '⤹',\n  larrsim: '⥳',\n  larrtl: '↢',\n  lat: '⪫',\n  latail: '⤙',\n  late: '⪭',\n  lates: '⪭︀',\n  lbarr: '⤌',\n  lbbrk: '❲',\n  lbrace: '{',\n  lbrack: '[',\n  lbrke: '⦋',\n  lbrksld: '⦏',\n  lbrkslu: '⦍',\n  lcaron: 'ľ',\n  lcedil: 'ļ',\n  lceil: '⌈',\n  lcub: '{',\n  lcy: 'л',\n  ldca: '⤶',\n  ldquo: '“',\n  ldquor: '„',\n  ldrdhar: '⥧',\n  ldrushar: '⥋',\n  ldsh: '↲',\n  le: '≤',\n  leftarrow: '←',\n  leftarrowtail: '↢',\n  leftharpoondown: '↽',\n  leftharpoonup: '↼',\n  leftleftarrows: '⇇',\n  leftrightarrow: '↔',\n  leftrightarrows: '⇆',\n  leftrightharpoons: '⇋',\n  leftrightsquigarrow: '↭',\n  leftthreetimes: '⋋',\n  leg: '⋚',\n  leq: '≤',\n  leqq: '≦',\n  leqslant: '⩽',\n  les: '⩽',\n  lescc: '⪨',\n  lesdot: '⩿',\n  lesdoto: '⪁',\n  lesdotor: '⪃',\n  lesg: '⋚︀',\n  lesges: '⪓',\n  lessapprox: '⪅',\n  lessdot: '⋖',\n  lesseqgtr: '⋚',\n  lesseqqgtr: '⪋',\n  lessgtr: '≶',\n  lesssim: '≲',\n  lfisht: '⥼',\n  lfloor: '⌊',\n  lfr: '𝔩',\n  lg: '≶',\n  lgE: '⪑',\n  lhard: '↽',\n  lharu: '↼',\n  lharul: '⥪',\n  lhblk: '▄',\n  ljcy: 'љ',\n  ll: '≪',\n  llarr: '⇇',\n  llcorner: '⌞',\n  llhard: '⥫',\n  lltri: '◺',\n  lmidot: 'ŀ',\n  lmoust: '⎰',\n  lmoustache: '⎰',\n  lnE: '≨',\n  lnap: '⪉',\n  lnapprox: '⪉',\n  lne: '⪇',\n  lneq: '⪇',\n  lneqq: '≨',\n  lnsim: '⋦',\n  loang: '⟬',\n  loarr: '⇽',\n  lobrk: '⟦',\n  longleftarrow: '⟵',\n  longleftrightarrow: '⟷',\n  longmapsto: '⟼',\n  longrightarrow: '⟶',\n  looparrowleft: '↫',\n  looparrowright: '↬',\n  lopar: '⦅',\n  lopf: '𝕝',\n  loplus: '⨭',\n  lotimes: '⨴',\n  lowast: '∗',\n  lowbar: '_',\n  loz: '◊',\n  lozenge: '◊',\n  lozf: '⧫',\n  lpar: '(',\n  lparlt: '⦓',\n  lrarr: '⇆',\n  lrcorner: '⌟',\n  lrhar: '⇋',\n  lrhard: '⥭',\n  lrm: '‎',\n  lrtri: '⊿',\n  lsaquo: '‹',\n  lscr: '𝓁',\n  lsh: '↰',\n  lsim: '≲',\n  lsime: '⪍',\n  lsimg: '⪏',\n  lsqb: '[',\n  lsquo: '‘',\n  lsquor: '‚',\n  lstrok: 'ł',\n  lt: '<',\n  ltcc: '⪦',\n  ltcir: '⩹',\n  ltdot: '⋖',\n  lthree: '⋋',\n  ltimes: '⋉',\n  ltlarr: '⥶',\n  ltquest: '⩻',\n  ltrPar: '⦖',\n  ltri: '◃',\n  ltrie: '⊴',\n  ltrif: '◂',\n  lurdshar: '⥊',\n  luruhar: '⥦',\n  lvertneqq: '≨︀',\n  lvnE: '≨︀',\n  mDDot: '∺',\n  macr: '¯',\n  male: '♂',\n  malt: '✠',\n  maltese: '✠',\n  map: '↦',\n  mapsto: '↦',\n  mapstodown: '↧',\n  mapstoleft: '↤',\n  mapstoup: '↥',\n  marker: '▮',\n  mcomma: '⨩',\n  mcy: 'м',\n  mdash: '—',\n  measuredangle: '∡',\n  mfr: '𝔪',\n  mho: '℧',\n  micro: 'µ',\n  mid: '∣',\n  midast: '*',\n  midcir: '⫰',\n  middot: '·',\n  minus: '−',\n  minusb: '⊟',\n  minusd: '∸',\n  minusdu: '⨪',\n  mlcp: '⫛',\n  mldr: '…',\n  mnplus: '∓',\n  models: '⊧',\n  mopf: '𝕞',\n  mp: '∓',\n  mscr: '𝓂',\n  mstpos: '∾',\n  mu: 'μ',\n  multimap: '⊸',\n  mumap: '⊸',\n  nGg: '⋙̸',\n  nGt: '≫⃒',\n  nGtv: '≫̸',\n  nLeftarrow: '⇍',\n  nLeftrightarrow: '⇎',\n  nLl: '⋘̸',\n  nLt: '≪⃒',\n  nLtv: '≪̸',\n  nRightarrow: '⇏',\n  nVDash: '⊯',\n  nVdash: '⊮',\n  nabla: '∇',\n  nacute: 'ń',\n  nang: '∠⃒',\n  nap: '≉',\n  napE: '⩰̸',\n  napid: '≋̸',\n  napos: 'ŉ',\n  napprox: '≉',\n  natur: '♮',\n  natural: '♮',\n  naturals: 'ℕ',\n  nbsp: ' ',\n  nbump: '≎̸',\n  nbumpe: '≏̸',\n  ncap: '⩃',\n  ncaron: 'ň',\n  ncedil: 'ņ',\n  ncong: '≇',\n  ncongdot: '⩭̸',\n  ncup: '⩂',\n  ncy: 'н',\n  ndash: '–',\n  ne: '≠',\n  neArr: '⇗',\n  nearhk: '⤤',\n  nearr: '↗',\n  nearrow: '↗',\n  nedot: '≐̸',\n  nequiv: '≢',\n  nesear: '⤨',\n  nesim: '≂̸',\n  nexist: '∄',\n  nexists: '∄',\n  nfr: '𝔫',\n  ngE: '≧̸',\n  nge: '≱',\n  ngeq: '≱',\n  ngeqq: '≧̸',\n  ngeqslant: '⩾̸',\n  nges: '⩾̸',\n  ngsim: '≵',\n  ngt: '≯',\n  ngtr: '≯',\n  nhArr: '⇎',\n  nharr: '↮',\n  nhpar: '⫲',\n  ni: '∋',\n  nis: '⋼',\n  nisd: '⋺',\n  niv: '∋',\n  njcy: 'њ',\n  nlArr: '⇍',\n  nlE: '≦̸',\n  nlarr: '↚',\n  nldr: '‥',\n  nle: '≰',\n  nleftarrow: '↚',\n  nleftrightarrow: '↮',\n  nleq: '≰',\n  nleqq: '≦̸',\n  nleqslant: '⩽̸',\n  nles: '⩽̸',\n  nless: '≮',\n  nlsim: '≴',\n  nlt: '≮',\n  nltri: '⋪',\n  nltrie: '⋬',\n  nmid: '∤',\n  nopf: '𝕟',\n  not: '¬',\n  notin: '∉',\n  notinE: '⋹̸',\n  notindot: '⋵̸',\n  notinva: '∉',\n  notinvb: '⋷',\n  notinvc: '⋶',\n  notni: '∌',\n  notniva: '∌',\n  notnivb: '⋾',\n  notnivc: '⋽',\n  npar: '∦',\n  nparallel: '∦',\n  nparsl: '⫽⃥',\n  npart: '∂̸',\n  npolint: '⨔',\n  npr: '⊀',\n  nprcue: '⋠',\n  npre: '⪯̸',\n  nprec: '⊀',\n  npreceq: '⪯̸',\n  nrArr: '⇏',\n  nrarr: '↛',\n  nrarrc: '⤳̸',\n  nrarrw: '↝̸',\n  nrightarrow: '↛',\n  nrtri: '⋫',\n  nrtrie: '⋭',\n  nsc: '⊁',\n  nsccue: '⋡',\n  nsce: '⪰̸',\n  nscr: '𝓃',\n  nshortmid: '∤',\n  nshortparallel: '∦',\n  nsim: '≁',\n  nsime: '≄',\n  nsimeq: '≄',\n  nsmid: '∤',\n  nspar: '∦',\n  nsqsube: '⋢',\n  nsqsupe: '⋣',\n  nsub: '⊄',\n  nsubE: '⫅̸',\n  nsube: '⊈',\n  nsubset: '⊂⃒',\n  nsubseteq: '⊈',\n  nsubseteqq: '⫅̸',\n  nsucc: '⊁',\n  nsucceq: '⪰̸',\n  nsup: '⊅',\n  nsupE: '⫆̸',\n  nsupe: '⊉',\n  nsupset: '⊃⃒',\n  nsupseteq: '⊉',\n  nsupseteqq: '⫆̸',\n  ntgl: '≹',\n  ntilde: 'ñ',\n  ntlg: '≸',\n  ntriangleleft: '⋪',\n  ntrianglelefteq: '⋬',\n  ntriangleright: '⋫',\n  ntrianglerighteq: '⋭',\n  nu: 'ν',\n  num: '#',\n  numero: '№',\n  numsp: ' ',\n  nvDash: '⊭',\n  nvHarr: '⤄',\n  nvap: '≍⃒',\n  nvdash: '⊬',\n  nvge: '≥⃒',\n  nvgt: '>⃒',\n  nvinfin: '⧞',\n  nvlArr: '⤂',\n  nvle: '≤⃒',\n  nvlt: '<⃒',\n  nvltrie: '⊴⃒',\n  nvrArr: '⤃',\n  nvrtrie: '⊵⃒',\n  nvsim: '∼⃒',\n  nwArr: '⇖',\n  nwarhk: '⤣',\n  nwarr: '↖',\n  nwarrow: '↖',\n  nwnear: '⤧',\n  oS: 'Ⓢ',\n  oacute: 'ó',\n  oast: '⊛',\n  ocir: '⊚',\n  ocirc: 'ô',\n  ocy: 'о',\n  odash: '⊝',\n  odblac: 'ő',\n  odiv: '⨸',\n  odot: '⊙',\n  odsold: '⦼',\n  oelig: 'œ',\n  ofcir: '⦿',\n  ofr: '𝔬',\n  ogon: '˛',\n  ograve: 'ò',\n  ogt: '⧁',\n  ohbar: '⦵',\n  ohm: 'Ω',\n  oint: '∮',\n  olarr: '↺',\n  olcir: '⦾',\n  olcross: '⦻',\n  oline: '‾',\n  olt: '⧀',\n  omacr: 'ō',\n  omega: 'ω',\n  omicron: 'ο',\n  omid: '⦶',\n  ominus: '⊖',\n  oopf: '𝕠',\n  opar: '⦷',\n  operp: '⦹',\n  oplus: '⊕',\n  or: '∨',\n  orarr: '↻',\n  ord: '⩝',\n  order: 'ℴ',\n  orderof: 'ℴ',\n  ordf: 'ª',\n  ordm: 'º',\n  origof: '⊶',\n  oror: '⩖',\n  orslope: '⩗',\n  orv: '⩛',\n  oscr: 'ℴ',\n  oslash: 'ø',\n  osol: '⊘',\n  otilde: 'õ',\n  otimes: '⊗',\n  otimesas: '⨶',\n  ouml: 'ö',\n  ovbar: '⌽',\n  par: '∥',\n  para: '¶',\n  parallel: '∥',\n  parsim: '⫳',\n  parsl: '⫽',\n  part: '∂',\n  pcy: 'п',\n  percnt: '%',\n  period: '.',\n  permil: '‰',\n  perp: '⊥',\n  pertenk: '‱',\n  pfr: '𝔭',\n  phi: 'φ',\n  phiv: 'ϕ',\n  phmmat: 'ℳ',\n  phone: '☎',\n  pi: 'π',\n  pitchfork: '⋔',\n  piv: 'ϖ',\n  planck: 'ℏ',\n  planckh: 'ℎ',\n  plankv: 'ℏ',\n  plus: '+',\n  plusacir: '⨣',\n  plusb: '⊞',\n  pluscir: '⨢',\n  plusdo: '∔',\n  plusdu: '⨥',\n  pluse: '⩲',\n  plusmn: '±',\n  plussim: '⨦',\n  plustwo: '⨧',\n  pm: '±',\n  pointint: '⨕',\n  popf: '𝕡',\n  pound: '£',\n  pr: '≺',\n  prE: '⪳',\n  prap: '⪷',\n  prcue: '≼',\n  pre: '⪯',\n  prec: '≺',\n  precapprox: '⪷',\n  preccurlyeq: '≼',\n  preceq: '⪯',\n  precnapprox: '⪹',\n  precneqq: '⪵',\n  precnsim: '⋨',\n  precsim: '≾',\n  prime: '′',\n  primes: 'ℙ',\n  prnE: '⪵',\n  prnap: '⪹',\n  prnsim: '⋨',\n  prod: '∏',\n  profalar: '⌮',\n  profline: '⌒',\n  profsurf: '⌓',\n  prop: '∝',\n  propto: '∝',\n  prsim: '≾',\n  prurel: '⊰',\n  pscr: '𝓅',\n  psi: 'ψ',\n  puncsp: ' ',\n  qfr: '𝔮',\n  qint: '⨌',\n  qopf: '𝕢',\n  qprime: '⁗',\n  qscr: '𝓆',\n  quaternions: 'ℍ',\n  quatint: '⨖',\n  quest: '?',\n  questeq: '≟',\n  quot: '\"',\n  rAarr: '⇛',\n  rArr: '⇒',\n  rAtail: '⤜',\n  rBarr: '⤏',\n  rHar: '⥤',\n  race: '∽̱',\n  racute: 'ŕ',\n  radic: '√',\n  raemptyv: '⦳',\n  rang: '⟩',\n  rangd: '⦒',\n  range: '⦥',\n  rangle: '⟩',\n  raquo: '»',\n  rarr: '→',\n  rarrap: '⥵',\n  rarrb: '⇥',\n  rarrbfs: '⤠',\n  rarrc: '⤳',\n  rarrfs: '⤞',\n  rarrhk: '↪',\n  rarrlp: '↬',\n  rarrpl: '⥅',\n  rarrsim: '⥴',\n  rarrtl: '↣',\n  rarrw: '↝',\n  ratail: '⤚',\n  ratio: '∶',\n  rationals: 'ℚ',\n  rbarr: '⤍',\n  rbbrk: '❳',\n  rbrace: '}',\n  rbrack: ']',\n  rbrke: '⦌',\n  rbrksld: '⦎',\n  rbrkslu: '⦐',\n  rcaron: 'ř',\n  rcedil: 'ŗ',\n  rceil: '⌉',\n  rcub: '}',\n  rcy: 'р',\n  rdca: '⤷',\n  rdldhar: '⥩',\n  rdquo: '”',\n  rdquor: '”',\n  rdsh: '↳',\n  real: 'ℜ',\n  realine: 'ℛ',\n  realpart: 'ℜ',\n  reals: 'ℝ',\n  rect: '▭',\n  reg: '®',\n  rfisht: '⥽',\n  rfloor: '⌋',\n  rfr: '𝔯',\n  rhard: '⇁',\n  rharu: '⇀',\n  rharul: '⥬',\n  rho: 'ρ',\n  rhov: 'ϱ',\n  rightarrow: '→',\n  rightarrowtail: '↣',\n  rightharpoondown: '⇁',\n  rightharpoonup: '⇀',\n  rightleftarrows: '⇄',\n  rightleftharpoons: '⇌',\n  rightrightarrows: '⇉',\n  rightsquigarrow: '↝',\n  rightthreetimes: '⋌',\n  ring: '˚',\n  risingdotseq: '≓',\n  rlarr: '⇄',\n  rlhar: '⇌',\n  rlm: '‏',\n  rmoust: '⎱',\n  rmoustache: '⎱',\n  rnmid: '⫮',\n  roang: '⟭',\n  roarr: '⇾',\n  robrk: '⟧',\n  ropar: '⦆',\n  ropf: '𝕣',\n  roplus: '⨮',\n  rotimes: '⨵',\n  rpar: ')',\n  rpargt: '⦔',\n  rppolint: '⨒',\n  rrarr: '⇉',\n  rsaquo: '›',\n  rscr: '𝓇',\n  rsh: '↱',\n  rsqb: ']',\n  rsquo: '’',\n  rsquor: '’',\n  rthree: '⋌',\n  rtimes: '⋊',\n  rtri: '▹',\n  rtrie: '⊵',\n  rtrif: '▸',\n  rtriltri: '⧎',\n  ruluhar: '⥨',\n  rx: '℞',\n  sacute: 'ś',\n  sbquo: '‚',\n  sc: '≻',\n  scE: '⪴',\n  scap: '⪸',\n  scaron: 'š',\n  sccue: '≽',\n  sce: '⪰',\n  scedil: 'ş',\n  scirc: 'ŝ',\n  scnE: '⪶',\n  scnap: '⪺',\n  scnsim: '⋩',\n  scpolint: '⨓',\n  scsim: '≿',\n  scy: 'с',\n  sdot: '⋅',\n  sdotb: '⊡',\n  sdote: '⩦',\n  seArr: '⇘',\n  searhk: '⤥',\n  searr: '↘',\n  searrow: '↘',\n  sect: '§',\n  semi: ';',\n  seswar: '⤩',\n  setminus: '∖',\n  setmn: '∖',\n  sext: '✶',\n  sfr: '𝔰',\n  sfrown: '⌢',\n  sharp: '♯',\n  shchcy: 'щ',\n  shcy: 'ш',\n  shortmid: '∣',\n  shortparallel: '∥',\n  shy: '­',\n  sigma: 'σ',\n  sigmaf: 'ς',\n  sigmav: 'ς',\n  sim: '∼',\n  simdot: '⩪',\n  sime: '≃',\n  simeq: '≃',\n  simg: '⪞',\n  simgE: '⪠',\n  siml: '⪝',\n  simlE: '⪟',\n  simne: '≆',\n  simplus: '⨤',\n  simrarr: '⥲',\n  slarr: '←',\n  smallsetminus: '∖',\n  smashp: '⨳',\n  smeparsl: '⧤',\n  smid: '∣',\n  smile: '⌣',\n  smt: '⪪',\n  smte: '⪬',\n  smtes: '⪬︀',\n  softcy: 'ь',\n  sol: '/',\n  solb: '⧄',\n  solbar: '⌿',\n  sopf: '𝕤',\n  spades: '♠',\n  spadesuit: '♠',\n  spar: '∥',\n  sqcap: '⊓',\n  sqcaps: '⊓︀',\n  sqcup: '⊔',\n  sqcups: '⊔︀',\n  sqsub: '⊏',\n  sqsube: '⊑',\n  sqsubset: '⊏',\n  sqsubseteq: '⊑',\n  sqsup: '⊐',\n  sqsupe: '⊒',\n  sqsupset: '⊐',\n  sqsupseteq: '⊒',\n  squ: '□',\n  square: '□',\n  squarf: '▪',\n  squf: '▪',\n  srarr: '→',\n  sscr: '𝓈',\n  ssetmn: '∖',\n  ssmile: '⌣',\n  sstarf: '⋆',\n  star: '☆',\n  starf: '★',\n  straightepsilon: 'ϵ',\n  straightphi: 'ϕ',\n  strns: '¯',\n  sub: '⊂',\n  subE: '⫅',\n  subdot: '⪽',\n  sube: '⊆',\n  subedot: '⫃',\n  submult: '⫁',\n  subnE: '⫋',\n  subne: '⊊',\n  subplus: '⪿',\n  subrarr: '⥹',\n  subset: '⊂',\n  subseteq: '⊆',\n  subseteqq: '⫅',\n  subsetneq: '⊊',\n  subsetneqq: '⫋',\n  subsim: '⫇',\n  subsub: '⫕',\n  subsup: '⫓',\n  succ: '≻',\n  succapprox: '⪸',\n  succcurlyeq: '≽',\n  succeq: '⪰',\n  succnapprox: '⪺',\n  succneqq: '⪶',\n  succnsim: '⋩',\n  succsim: '≿',\n  sum: '∑',\n  sung: '♪',\n  sup1: '¹',\n  sup2: '²',\n  sup3: '³',\n  sup: '⊃',\n  supE: '⫆',\n  supdot: '⪾',\n  supdsub: '⫘',\n  supe: '⊇',\n  supedot: '⫄',\n  suphsol: '⟉',\n  suphsub: '⫗',\n  suplarr: '⥻',\n  supmult: '⫂',\n  supnE: '⫌',\n  supne: '⊋',\n  supplus: '⫀',\n  supset: '⊃',\n  supseteq: '⊇',\n  supseteqq: '⫆',\n  supsetneq: '⊋',\n  supsetneqq: '⫌',\n  supsim: '⫈',\n  supsub: '⫔',\n  supsup: '⫖',\n  swArr: '⇙',\n  swarhk: '⤦',\n  swarr: '↙',\n  swarrow: '↙',\n  swnwar: '⤪',\n  szlig: 'ß',\n  target: '⌖',\n  tau: 'τ',\n  tbrk: '⎴',\n  tcaron: 'ť',\n  tcedil: 'ţ',\n  tcy: 'т',\n  tdot: '⃛',\n  telrec: '⌕',\n  tfr: '𝔱',\n  there4: '∴',\n  therefore: '∴',\n  theta: 'θ',\n  thetasym: 'ϑ',\n  thetav: 'ϑ',\n  thickapprox: '≈',\n  thicksim: '∼',\n  thinsp: ' ',\n  thkap: '≈',\n  thksim: '∼',\n  thorn: 'þ',\n  tilde: '˜',\n  times: '×',\n  timesb: '⊠',\n  timesbar: '⨱',\n  timesd: '⨰',\n  tint: '∭',\n  toea: '⤨',\n  top: '⊤',\n  topbot: '⌶',\n  topcir: '⫱',\n  topf: '𝕥',\n  topfork: '⫚',\n  tosa: '⤩',\n  tprime: '‴',\n  trade: '™',\n  triangle: '▵',\n  triangledown: '▿',\n  triangleleft: '◃',\n  trianglelefteq: '⊴',\n  triangleq: '≜',\n  triangleright: '▹',\n  trianglerighteq: '⊵',\n  tridot: '◬',\n  trie: '≜',\n  triminus: '⨺',\n  triplus: '⨹',\n  trisb: '⧍',\n  tritime: '⨻',\n  trpezium: '⏢',\n  tscr: '𝓉',\n  tscy: 'ц',\n  tshcy: 'ћ',\n  tstrok: 'ŧ',\n  twixt: '≬',\n  twoheadleftarrow: '↞',\n  twoheadrightarrow: '↠',\n  uArr: '⇑',\n  uHar: '⥣',\n  uacute: 'ú',\n  uarr: '↑',\n  ubrcy: 'ў',\n  ubreve: 'ŭ',\n  ucirc: 'û',\n  ucy: 'у',\n  udarr: '⇅',\n  udblac: 'ű',\n  udhar: '⥮',\n  ufisht: '⥾',\n  ufr: '𝔲',\n  ugrave: 'ù',\n  uharl: '↿',\n  uharr: '↾',\n  uhblk: '▀',\n  ulcorn: '⌜',\n  ulcorner: '⌜',\n  ulcrop: '⌏',\n  ultri: '◸',\n  umacr: 'ū',\n  uml: '¨',\n  uogon: 'ų',\n  uopf: '𝕦',\n  uparrow: '↑',\n  updownarrow: '↕',\n  upharpoonleft: '↿',\n  upharpoonright: '↾',\n  uplus: '⊎',\n  upsi: 'υ',\n  upsih: 'ϒ',\n  upsilon: 'υ',\n  upuparrows: '⇈',\n  urcorn: '⌝',\n  urcorner: '⌝',\n  urcrop: '⌎',\n  uring: 'ů',\n  urtri: '◹',\n  uscr: '𝓊',\n  utdot: '⋰',\n  utilde: 'ũ',\n  utri: '▵',\n  utrif: '▴',\n  uuarr: '⇈',\n  uuml: 'ü',\n  uwangle: '⦧',\n  vArr: '⇕',\n  vBar: '⫨',\n  vBarv: '⫩',\n  vDash: '⊨',\n  vangrt: '⦜',\n  varepsilon: 'ϵ',\n  varkappa: 'ϰ',\n  varnothing: '∅',\n  varphi: 'ϕ',\n  varpi: 'ϖ',\n  varpropto: '∝',\n  varr: '↕',\n  varrho: 'ϱ',\n  varsigma: 'ς',\n  varsubsetneq: '⊊︀',\n  varsubsetneqq: '⫋︀',\n  varsupsetneq: '⊋︀',\n  varsupsetneqq: '⫌︀',\n  vartheta: 'ϑ',\n  vartriangleleft: '⊲',\n  vartriangleright: '⊳',\n  vcy: 'в',\n  vdash: '⊢',\n  vee: '∨',\n  veebar: '⊻',\n  veeeq: '≚',\n  vellip: '⋮',\n  verbar: '|',\n  vert: '|',\n  vfr: '𝔳',\n  vltri: '⊲',\n  vnsub: '⊂⃒',\n  vnsup: '⊃⃒',\n  vopf: '𝕧',\n  vprop: '∝',\n  vrtri: '⊳',\n  vscr: '𝓋',\n  vsubnE: '⫋︀',\n  vsubne: '⊊︀',\n  vsupnE: '⫌︀',\n  vsupne: '⊋︀',\n  vzigzag: '⦚',\n  wcirc: 'ŵ',\n  wedbar: '⩟',\n  wedge: '∧',\n  wedgeq: '≙',\n  weierp: '℘',\n  wfr: '𝔴',\n  wopf: '𝕨',\n  wp: '℘',\n  wr: '≀',\n  wreath: '≀',\n  wscr: '𝓌',\n  xcap: '⋂',\n  xcirc: '◯',\n  xcup: '⋃',\n  xdtri: '▽',\n  xfr: '𝔵',\n  xhArr: '⟺',\n  xharr: '⟷',\n  xi: 'ξ',\n  xlArr: '⟸',\n  xlarr: '⟵',\n  xmap: '⟼',\n  xnis: '⋻',\n  xodot: '⨀',\n  xopf: '𝕩',\n  xoplus: '⨁',\n  xotime: '⨂',\n  xrArr: '⟹',\n  xrarr: '⟶',\n  xscr: '𝓍',\n  xsqcup: '⨆',\n  xuplus: '⨄',\n  xutri: '△',\n  xvee: '⋁',\n  xwedge: '⋀',\n  yacute: 'ý',\n  yacy: 'я',\n  ycirc: 'ŷ',\n  ycy: 'ы',\n  yen: '¥',\n  yfr: '𝔶',\n  yicy: 'ї',\n  yopf: '𝕪',\n  yscr: '𝓎',\n  yucy: 'ю',\n  yuml: 'ÿ',\n  zacute: 'ź',\n  zcaron: 'ž',\n  zcy: 'з',\n  zdot: 'ż',\n  zeetrf: 'ℨ',\n  zeta: 'ζ',\n  zfr: '𝔷',\n  zhcy: 'ж',\n  zigrarr: '⇝',\n  zopf: '𝕫',\n  zscr: '𝓏',\n  zwj: '‍',\n  zwnj: '‌'\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n"],"names":[],"version":3,"file":"flowDiagram-93327f21.f1c41c8f.js.map"}