{"mappings":"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","sources":["node_modules/mermaid/dist/flowDiagram-v2-476db779.js","node_modules/mermaid/dist/svgDraw-0fcc813d.js","node_modules/lodash-es/_getPrototype.js","node_modules/lodash-es/isPlainObject.js"],"sourcesContent":["import { p as parser, f as flowDb } from \"./flowDb-6a57c1b4.js\";\nimport { f as flowRendererV2, a as flowStyles } from \"./styles-5f89df53.js\";\nimport { q as setConfig } from \"./mermaid-b0ad2de1.js\";\nimport \"d3\";\nimport \"dagre-d3-es/src/graphlib/index.js\";\nimport \"./index-a92ac404.js\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-49ac43a2.js\";\nimport \"./createText-3df630b5.js\";\nimport \"mdast-util-from-markdown\";\nimport \"ts-dedent\";\nimport \"./svgDraw-0fcc813d.js\";\nimport \"dagre-d3-es/src/dagre-js/label/add-html-label.js\";\nimport \"khroma\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"lodash-es/memoize.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nconst diagram = {\n  parser,\n  db: flowDb,\n  renderer: flowRendererV2,\n  styles: flowStyles,\n  init: (cnf) => {\n    if (!cnf.flowchart) {\n      cnf.flowchart = {};\n    }\n    cnf.flowchart.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    setConfig({ flowchart: { arrowMarkerAbsolute: cnf.arrowMarkerAbsolute } });\n    flowRendererV2.setConf(cnf.flowchart);\n    flowDb.clear();\n    flowDb.setGen(\"gen-2\");\n  }\n};\nexport {\n  diagram\n};\n","import { line, curveBasis } from \"d3\";\nimport { u as utils, l as log, x as parseGenericTypes } from \"./mermaid-b0ad2de1.js\";\nlet edgeCount = 0;\nconst drawEdge = function(elem, path, relation, conf, diagObj) {\n  const getRelationType = function(type) {\n    switch (type) {\n      case diagObj.db.relationType.AGGREGATION:\n        return \"aggregation\";\n      case diagObj.db.relationType.EXTENSION:\n        return \"extension\";\n      case diagObj.db.relationType.COMPOSITION:\n        return \"composition\";\n      case diagObj.db.relationType.DEPENDENCY:\n        return \"dependency\";\n      case diagObj.db.relationType.LOLLIPOP:\n        return \"lollipop\";\n    }\n  };\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n  const lineData = path.points;\n  const lineFunction = line().x(function(d) {\n    return d.x;\n  }).y(function(d) {\n    return d.y;\n  }).curve(curveBasis);\n  const svgPath = elem.append(\"path\").attr(\"d\", lineFunction(lineData)).attr(\"id\", \"edge\" + edgeCount).attr(\"class\", \"relation\");\n  let url = \"\";\n  if (conf.arrowMarkerAbsolute) {\n    url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, \"\\\\(\");\n    url = url.replace(/\\)/g, \"\\\\)\");\n  }\n  if (relation.relation.lineType == 1) {\n    svgPath.attr(\"class\", \"relation dashed-line\");\n  }\n  if (relation.relation.lineType == 10) {\n    svgPath.attr(\"class\", \"relation dotted-line\");\n  }\n  if (relation.relation.type1 !== \"none\") {\n    svgPath.attr(\n      \"marker-start\",\n      \"url(\" + url + \"#\" + getRelationType(relation.relation.type1) + \"Start)\"\n    );\n  }\n  if (relation.relation.type2 !== \"none\") {\n    svgPath.attr(\n      \"marker-end\",\n      \"url(\" + url + \"#\" + getRelationType(relation.relation.type2) + \"End)\"\n    );\n  }\n  let x, y;\n  const l = path.points.length;\n  let labelPosition = utils.calcLabelPosition(path.points);\n  x = labelPosition.x;\n  y = labelPosition.y;\n  let p1_card_x, p1_card_y;\n  let p2_card_x, p2_card_y;\n  if (l % 2 !== 0 && l > 1) {\n    let cardinality_1_point = utils.calcCardinalityPosition(\n      relation.relation.type1 !== \"none\",\n      path.points,\n      path.points[0]\n    );\n    let cardinality_2_point = utils.calcCardinalityPosition(\n      relation.relation.type2 !== \"none\",\n      path.points,\n      path.points[l - 1]\n    );\n    log.debug(\"cardinality_1_point \" + JSON.stringify(cardinality_1_point));\n    log.debug(\"cardinality_2_point \" + JSON.stringify(cardinality_2_point));\n    p1_card_x = cardinality_1_point.x;\n    p1_card_y = cardinality_1_point.y;\n    p2_card_x = cardinality_2_point.x;\n    p2_card_y = cardinality_2_point.y;\n  }\n  if (relation.title !== void 0) {\n    const g = elem.append(\"g\").attr(\"class\", \"classLabel\");\n    const label = g.append(\"text\").attr(\"class\", \"label\").attr(\"x\", x).attr(\"y\", y).attr(\"fill\", \"red\").attr(\"text-anchor\", \"middle\").text(relation.title);\n    window.label = label;\n    const bounds = label.node().getBBox();\n    g.insert(\"rect\", \":first-child\").attr(\"class\", \"box\").attr(\"x\", bounds.x - conf.padding / 2).attr(\"y\", bounds.y - conf.padding / 2).attr(\"width\", bounds.width + conf.padding).attr(\"height\", bounds.height + conf.padding);\n  }\n  log.info(\"Rendering relation \" + JSON.stringify(relation));\n  if (relation.relationTitle1 !== void 0 && relation.relationTitle1 !== \"none\") {\n    const g = elem.append(\"g\").attr(\"class\", \"cardinality\");\n    g.append(\"text\").attr(\"class\", \"type1\").attr(\"x\", p1_card_x).attr(\"y\", p1_card_y).attr(\"fill\", \"black\").attr(\"font-size\", \"6\").text(relation.relationTitle1);\n  }\n  if (relation.relationTitle2 !== void 0 && relation.relationTitle2 !== \"none\") {\n    const g = elem.append(\"g\").attr(\"class\", \"cardinality\");\n    g.append(\"text\").attr(\"class\", \"type2\").attr(\"x\", p2_card_x).attr(\"y\", p2_card_y).attr(\"fill\", \"black\").attr(\"font-size\", \"6\").text(relation.relationTitle2);\n  }\n  edgeCount++;\n};\nconst drawClass = function(elem, classDef, conf, diagObj) {\n  log.debug(\"Rendering class \", classDef, conf);\n  const id = classDef.id;\n  const classInfo = {\n    id,\n    label: classDef.id,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", diagObj.db.lookUpDomId(id)).attr(\"class\", \"classGroup\");\n  let title;\n  if (classDef.link) {\n    title = g.append(\"svg:a\").attr(\"xlink:href\", classDef.link).attr(\"target\", classDef.linkTarget).append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n  } else {\n    title = g.append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n  }\n  let isFirst = true;\n  classDef.annotations.forEach(function(member) {\n    const titleText2 = title.append(\"tspan\").text(\"«\" + member + \"»\");\n    if (!isFirst) {\n      titleText2.attr(\"dy\", conf.textHeight);\n    }\n    isFirst = false;\n  });\n  let classTitleString = getClassTitleString(classDef);\n  const classTitle = title.append(\"tspan\").text(classTitleString).attr(\"class\", \"title\");\n  if (!isFirst) {\n    classTitle.attr(\"dy\", conf.textHeight);\n  }\n  const titleHeight = title.node().getBBox().height;\n  const membersLine = g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", conf.padding + titleHeight + conf.dividerMargin / 2).attr(\"y2\", conf.padding + titleHeight + conf.dividerMargin / 2);\n  const members = g.append(\"text\").attr(\"x\", conf.padding).attr(\"y\", titleHeight + conf.dividerMargin + conf.textHeight).attr(\"fill\", \"white\").attr(\"class\", \"classText\");\n  isFirst = true;\n  classDef.members.forEach(function(member) {\n    addTspan(members, member, isFirst, conf);\n    isFirst = false;\n  });\n  const membersBox = members.node().getBBox();\n  const methodsLine = g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", conf.padding + titleHeight + conf.dividerMargin + membersBox.height).attr(\"y2\", conf.padding + titleHeight + conf.dividerMargin + membersBox.height);\n  const methods = g.append(\"text\").attr(\"x\", conf.padding).attr(\"y\", titleHeight + 2 * conf.dividerMargin + membersBox.height + conf.textHeight).attr(\"fill\", \"white\").attr(\"class\", \"classText\");\n  isFirst = true;\n  classDef.methods.forEach(function(method) {\n    addTspan(methods, method, isFirst, conf);\n    isFirst = false;\n  });\n  const classBox = g.node().getBBox();\n  var cssClassStr = \" \";\n  if (classDef.cssClasses.length > 0) {\n    cssClassStr = cssClassStr + classDef.cssClasses.join(\" \");\n  }\n  const rect = g.insert(\"rect\", \":first-child\").attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", classBox.width + 2 * conf.padding).attr(\"height\", classBox.height + conf.padding + 0.5 * conf.dividerMargin).attr(\"class\", cssClassStr);\n  const rectWidth = rect.node().getBBox().width;\n  title.node().childNodes.forEach(function(x) {\n    x.setAttribute(\"x\", (rectWidth - x.getBBox().width) / 2);\n  });\n  if (classDef.tooltip) {\n    title.insert(\"title\").text(classDef.tooltip);\n  }\n  membersLine.attr(\"x2\", rectWidth);\n  methodsLine.attr(\"x2\", rectWidth);\n  classInfo.width = rectWidth;\n  classInfo.height = classBox.height + conf.padding + 0.5 * conf.dividerMargin;\n  return classInfo;\n};\nconst getClassTitleString = function(classDef) {\n  let classTitleString = classDef.id;\n  if (classDef.type) {\n    classTitleString += \"<\" + classDef.type + \">\";\n  }\n  return classTitleString;\n};\nconst drawNote = function(elem, note, conf, diagObj) {\n  log.debug(\"Rendering note \", note, conf);\n  const id = note.id;\n  const noteInfo = {\n    id,\n    text: note.text,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", id).attr(\"class\", \"classGroup\");\n  let text = g.append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n  const lines = JSON.parse(`\"${note.text}\"`).split(\"\\n\");\n  lines.forEach(function(line2) {\n    log.debug(`Adding line: ${line2}`);\n    text.append(\"tspan\").text(line2).attr(\"class\", \"title\").attr(\"dy\", conf.textHeight);\n  });\n  const noteBox = g.node().getBBox();\n  const rect = g.insert(\"rect\", \":first-child\").attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", noteBox.width + 2 * conf.padding).attr(\n    \"height\",\n    noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin\n  );\n  const rectWidth = rect.node().getBBox().width;\n  text.node().childNodes.forEach(function(x) {\n    x.setAttribute(\"x\", (rectWidth - x.getBBox().width) / 2);\n  });\n  noteInfo.width = rectWidth;\n  noteInfo.height = noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin;\n  return noteInfo;\n};\nconst parseMember = function(text) {\n  let displayText = \"\";\n  let cssStyle = \"\";\n  let returnType = \"\";\n  let visibility = \"\";\n  let firstChar = text.substring(0, 1);\n  let lastChar = text.substring(text.length - 1, text.length);\n  if (firstChar.match(/[#+~-]/)) {\n    visibility = firstChar;\n  }\n  let noClassifierRe = /[\\s\\w)~]/;\n  if (!lastChar.match(noClassifierRe)) {\n    cssStyle = parseClassifier(lastChar);\n  }\n  const startIndex = visibility === \"\" ? 0 : 1;\n  let endIndex = cssStyle === \"\" ? text.length : text.length - 1;\n  text = text.substring(startIndex, endIndex);\n  const methodStart = text.indexOf(\"(\");\n  const methodEnd = text.indexOf(\")\");\n  const isMethod = methodStart > 1 && methodEnd > methodStart && methodEnd <= text.length;\n  if (isMethod) {\n    let methodName = text.substring(0, methodStart).trim();\n    const parameters = text.substring(methodStart + 1, methodEnd);\n    displayText = visibility + methodName + \"(\" + parseGenericTypes(parameters.trim()) + \")\";\n    if (methodEnd < text.length) {\n      let potentialClassifier = text.substring(methodEnd + 1, methodEnd + 2);\n      if (cssStyle === \"\" && !potentialClassifier.match(noClassifierRe)) {\n        cssStyle = parseClassifier(potentialClassifier);\n        returnType = text.substring(methodEnd + 2).trim();\n      } else {\n        returnType = text.substring(methodEnd + 1).trim();\n      }\n      if (returnType !== \"\") {\n        if (returnType.charAt(0) === \":\") {\n          returnType = returnType.substring(1).trim();\n        }\n        returnType = \" : \" + parseGenericTypes(returnType);\n        displayText += returnType;\n      }\n    }\n  } else {\n    displayText = visibility + parseGenericTypes(text);\n  }\n  return {\n    displayText,\n    cssStyle\n  };\n};\nconst addTspan = function(textEl, txt, isFirst, conf) {\n  let member = parseMember(txt);\n  const tSpan = textEl.append(\"tspan\").attr(\"x\", conf.padding).text(member.displayText);\n  if (member.cssStyle !== \"\") {\n    tSpan.attr(\"style\", member.cssStyle);\n  }\n  if (!isFirst) {\n    tSpan.attr(\"dy\", conf.textHeight);\n  }\n};\nconst parseClassifier = function(classifier) {\n  switch (classifier) {\n    case \"*\":\n      return \"font-style:italic;\";\n    case \"$\":\n      return \"text-decoration:underline;\";\n    default:\n      return \"\";\n  }\n};\nconst svgDraw = {\n  getClassTitleString,\n  drawClass,\n  drawEdge,\n  drawNote,\n  parseMember\n};\nexport {\n  parseMember as p,\n  svgDraw as s\n};\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n"],"names":[],"version":3,"file":"flowDiagram-v2-476db779.38a381a4.js.map"}